## 一、分析

设 $\textit{nums}$ 的元素和为 $s$。

两个子集的元素和相等，意味着：

1. $s$ 是偶数。
2. 子集元素和恰好等于 $\dfrac{s}{2}$。

如果 $s$ 是奇数，直接返回 $\texttt{false}$。

如果 $s$ 是偶数，问题相当于：

- 能否从 $\textit{nums}$ 中选出一个子序列，其元素和恰好等于 $\dfrac{s}{2}$？

这可以用 **0-1 背包**解决，请看视频讲解：[0-1 背包和完全背包【基础算法精讲 18】](https://www.bilibili.com/video/BV16Y411v7Y6/)。制作不易，欢迎点赞关注~

## 二、记忆化搜索

定义 $\textit{dfs}(i,j)$ 表示能否从 $\textit{nums}[0]$ 到 $\textit{nums}[i]$ 中选出一个和为 $j$ 的子序列。

考虑 $\textit{nums}[i]$ 选或不选：

- 选：问题变成能否从 $\textit{nums}[0]$ 到 $\textit{nums}[i-1]$ 中选出一个和为 $j-\textit{nums}[i]$ 的子序列，即 $\textit{dfs}(i-1,j-\textit{nums}[i])$。
- 不选：问题变成能否从 $\textit{nums}[0]$ 到 $\textit{nums}[i-1]$ 中选出一个和为 $j$ 的子序列，即 $\textit{dfs}(i-1,j)$。

这两个只要有一个成立，$\textit{dfs}(i,j)$ 就是 $\texttt{true}$。所以有

$$
\textit{dfs}(i,j) = \textit{dfs}(i-1,j-\textit{nums}[i]) \vee \textit{dfs}(i-1,j)
$$

其中 $\vee$ 即编程语言中的 `||`。代码实现时，可以只在 $j\ge \textit{nums}[i]$ 时才调用 $\textit{dfs}(i-1,j-\textit{nums}[i])$，因为任何子序列的和都不会是负的。

递归边界：$\textit{dfs}(-1,0) = \texttt{true},\ \textit{dfs}(-1,>0) = \texttt{false}$。

递归入口：$\textit{dfs}(n-1,s/2)$，即答案。

* [sol-Python3]

```py
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
        def dfs(i: int, j: int) -> bool:
            if i < 0:
                return j == 0
            return j >= nums[i] and dfs(i - 1, j - nums[i]) or dfs(i - 1, j)

        s = sum(nums)
        return s % 2 == 0 and dfs(len(nums) - 1, s // 2)
```

* [sol-Java]

```java
class Solution {
    public boolean canPartition(int[] nums) {
        int s = 0;
        for (int num : nums) {
            s += num;
        }
        if (s % 2 != 0) {
            return false;
        }
        int n = nums.length;
        int[][] memo = new int[n][s / 2 + 1];
        for (int[] row : memo) {
            Arrays.fill(row, -1); // -1 表示没有计算过
        }
        return dfs(n - 1, s / 2, nums, memo);
    }

    private boolean dfs(int i, int j, int[] nums, int[][] memo) {
        if (i < 0) {
            return j == 0;
        }
        if (memo[i][j] != -1) { // 之前计算过
            return memo[i][j] == 1;
        }
        boolean res = j >= nums[i] && dfs(i - 1, j - nums[i], nums, memo) || dfs(i - 1, j, nums, memo);
        memo[i][j] = res ? 1 : 0; // 记忆化
        return res;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int s = reduce(nums.begin(), nums.end());
        if (s % 2) {
            return false;
        }
        int n = nums.size();
        vector<vector<int>> memo(n, vector<int>(s / 2 + 1, -1)); // -1 表示没有计算过
        function<bool(int, int)> dfs = [&](int i, int j) -> bool {
            if (i < 0) {
                return j == 0;
            }
            int& res = memo[i][j]; // 注意这里是引用
            if (res != -1) { // 之前计算过
                return res;
            }
            return res = j >= nums[i] && dfs(i - 1, j - nums[i]) || dfs(i - 1, j);
        };
        return dfs(n - 1, s / 2);
    }
};
```

* [sol-C]

```c
bool dfs(int i, int j, int* nums, int** memo) {
    if (i < 0) {
        return j == 0;
    }
    if (memo[i][j] != -1) { // 之前计算过
        return memo[i][j] == 1;
    }
    return memo[i][j] = j >= nums[i] && dfs(i - 1, j - nums[i], nums, memo) || dfs(i - 1, j, nums, memo);
}

bool canPartition(int* nums, int numsSize) {
    int s = 0;
    for (int i = 0; i < numsSize; i++) {
        s += nums[i];
    }
    if (s % 2) {
        return false;
    }
    int** memo = malloc(numsSize * sizeof(int*));
    for (int i = 0; i < numsSize; i++) {
        memo[i] = malloc((s / 2 + 1) * sizeof(int));
        memset(memo[i], -1, (s / 2 + 1) * sizeof(int)); // -1 表示没有计算过
    }
    int ans = dfs(numsSize - 1, s / 2, nums, memo);
    for (int i = 0; i < numsSize; i++) {
        free(memo[i]);
    }
    free(memo);
    return ans;
}
```

* [sol-Go]

```go
func canPartition(nums []int) bool {
    s := 0
    for _, x := range nums {
        s += x
    }
    if s%2 != 0 {
        return false
    }
    n := len(nums)
    memo := make([][]int8, n)
    for i := range memo {
        memo[i] = make([]int8, s/2+1)
        for j := range memo[i] {
            memo[i][j] = -1 // -1 表示没有计算过
        }
    }
    var dfs func(int, int) bool
    dfs = func(i, j int) bool {
        if i < 0 {
            return j == 0
        }
        p := &memo[i][j]
        if *p != -1 { // 之前计算过
            return *p == 1
        }
        res := j >= nums[i] && dfs(i-1, j-nums[i]) || dfs(i-1, j)
        if res {
            *p = 1 // 记忆化
        } else {
            *p = 0
        }
        return res
    }
    return dfs(n-1, s/2)
}
```

* [sol-JavaScript]

```js
const canPartition = function(nums) {
    const s = _.sum(nums);
    if (s % 2) {
        return false;
    }
    const n = nums.length;
    const memo = Array.from({length: n}, () => Array(s / 2 + 1).fill(-1)); // -1 表示没有计算过
    function dfs(i, j) {
        if (i < 0) {
            return j === 0;
        }
        if (memo[i][j] !== -1) { // 之前计算过
            return memo[i][j] === 1;
        }
        const res = j >= nums[i] && dfs(i - 1, j - nums[i]) || dfs(i - 1, j);
        memo[i][j] = res ? 1 : 0; // 记忆化
        return res;
    }
    return dfs(n - 1, s / 2);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn can_partition(nums: Vec<i32>) -> bool {
        let s = nums.iter().sum::<i32>() as usize;
        if s % 2 != 0 {
            return false;
        }
        fn dfs(i: usize, j: usize, nums: &Vec<i32>, memo: &mut Vec<Vec<i32>>) -> bool {
            if i == nums.len() {
                return j == 0;
            }
            if memo[i][j] != -1 { // 之前计算过
                return memo[i][j] == 1;
            }
            let x = nums[i] as usize;
            let res = j >= x && dfs(i + 1, j - x, nums, memo) || dfs(i + 1, j, nums, memo);
            memo[i][j] = if res { 1 } else { 0 }; // 记忆化
            res
        }
        let n = nums.len();
        let mut memo = vec![vec![-1; s / 2 + 1]; n]; // -1 表示没有计算过
        // 为方便起见，改成 i 从 0 开始
        dfs(0, s / 2, &nums, &mut memo)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(ns)$，其中 $n$ 是 $\textit{nums}$ 的长度，$s$ 是 $\textit{nums}$ 的元素和（的一半）。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(ns)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以动态规划的时间复杂度为 $\mathcal{O}(ns)$。
- 空间复杂度：$\mathcal{O}(ns)$。保存多少状态，就需要多少空间。

## 三、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

具体来说，$f[i][j]$ 的定义和 $\textit{dfs}(i,j)$ 的定义是一样的，都表示能否从 $\textit{nums}[0]$ 到 $\textit{nums}[i]$ 中选出一个和为 $j$ 的子序列。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 一样：

$$
f[i][j] = f[i-1][j-\textit{nums}[i]] \vee f[i-1][j]
$$

但是，这种定义方式**没有状态能表示递归边界**，即 $i=-1$ 的情况。

解决办法：在二维数组 $f$ 的最上边插入一排状态，那么其余状态全部向下偏移一位，把 $f[i]$ 改为 $f[i+1]$，把 $f[i-1]$ 改为 $f[i]$。

修改后 $f[i+1][j]$ 表示能否从 $\textit{nums}[0]$ 到 $\textit{nums}[i]$ 中选出一个和为 $j$ 的子序列。$f[0]$ 对应递归边界。

修改后的递推式为

$$
f[i+1][j] = f[i][j-\textit{nums}[i]] \vee f[i][j]
$$

> **问**：为什么 $\textit{nums}$ 的下标不用变？
>
> **答**：既然是在 $f$ 的最上边插入一排状态，那么就只需要修改和 $f$ 有关的下标，其余任何逻辑都无需修改。或者说，如果把 $\textit{nums}[i]$ 也改成 $\textit{nums}[i+1]$，那么 $\textit{nums}[0]$ 就被我们给忽略掉了。

初始值 $f[0][0]=\texttt{true}$，翻译自递归边界 $\textit{dfs}(-1,0)=\texttt{true}$。其余值初始化成 $\texttt{false}$。

答案为 $f[n][s/2]$，翻译自递归入口 $\textit{dfs}(n-1,s/2)$。

* [sol-Python3]

```py
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        s = sum(nums)
        if s % 2:
            return False
        s //= 2  # 注意这里把 s 减半了
        n = len(nums)
        f = [[False] * (s + 1) for _ in range(n + 1)]
        f[0][0] = True
        for i, x in enumerate(nums):
            for j in range(s + 1):
                f[i + 1][j] = j >= x and f[i][j - x] or f[i][j]
        return f[n][s]
```

* [sol-Java]

```java
class Solution {
    public boolean canPartition(int[] nums) {
        int s = 0;
        for (int num : nums) {
            s += num;
        }
        if (s % 2 != 0) {
            return false;
        }
        s /= 2; // 注意这里把 s 减半了
        int n = nums.length;
        boolean[][] f = new boolean[n + 1][s + 1];
        f[0][0] = true;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            for (int j = 0; j <= s; j++) {
                f[i + 1][j] = j >= x && f[i][j - x] || f[i][j];
            }
        }
        return f[n][s];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int s = reduce(nums.begin(), nums.end());
        if (s % 2) {
            return false;
        }
        s /= 2; // 注意这里把 s 减半了
        int n = nums.size();
        vector<vector<int>> f(n + 1, vector<int>(s + 1));
        f[0][0] = true;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            for (int j = 0; j <= s; j++) {
                f[i + 1][j] = j >= x && f[i][j - x] || f[i][j];
            }
        }
        return f[n][s];
    }
};
```

* [sol-C]

```c
bool canPartition(int* nums, int numsSize) {
    int s = 0;
    for (int i = 0; i < numsSize; i++) {
        s += nums[i];
    }
    if (s % 2) {
        return false;
    }
    s = s / 2 + 1;
    bool* f = calloc((numsSize + 1) * s, sizeof(bool));
    f[0] = true;
    for (int i = 0; i < numsSize; i++) {
        int x = nums[i];
        for (int j = 0; j < s; j++) {
            f[(i + 1) * s + j] = j >= x && f[i * s + j - x] || f[i * s + j];
        }
    }
    bool ans = f[(numsSize + 1) * s - 1];
    free(f);
    return ans;
}
```

* [sol-Go]

```go
func canPartition(nums []int) bool {
    s := 0
    for _, num := range nums {
        s += num
    }
    if s%2 != 0 {
        return false
    }
    s /= 2 // 注意这里把 s 减半了
    n := len(nums)
    f := make([][]bool, n+1)
    for i := range f {
        f[i] = make([]bool, s+1)
    }
    f[0][0] = true
    for i, x := range nums {
        for j := 0; j <= s; j++ {
            f[i+1][j] = j >= x && f[i][j-x] || f[i][j]
        }
    }
    return f[n][s]
}
```

* [sol-JavaScript]

```js
var canPartition = function(nums) {
    let s = _.sum(nums);
    if (s % 2) {
        return false;
    }
    s /= 2; // 注意这里把 s 减半了
    const n = nums.length;
    const f = Array.from({length: n + 1}, () => Array(s + 1).fill(false));
    f[0][0] = true;
    for (let i = 0; i < n; i++) {
        const x = nums[i];
        for (let j = 0; j <= s; j++) {
            f[i + 1][j] = j >= x && f[i][j - x] || f[i][j];
        }
    }
    return f[n][s];
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn can_partition(nums: Vec<i32>) -> bool {
        let s = nums.iter().sum::<i32>();
        if s % 2 != 0 {
            return false;
        }
        let s = s as usize / 2; // 注意这里把 s 减半了
        let n = nums.len();
        let mut f = vec![vec![false; s + 1]; n + 1];
        f[0][0] = true;
        for (i, &x) in nums.iter().enumerate() {
            let x = x as usize;
            for j in 0..=s {
                f[i + 1][j] = j >= x && f[i][j - x] || f[i][j];
            }
        }
        f[n][s]
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(ns)$，其中 $n$ 是 $\textit{nums}$ 的长度，$s$ 是 $\textit{nums}$ 的元素和（的一半）。
- 空间复杂度：$\mathcal{O}(ns)$。

## 四、空间优化

观察上面的状态转移方程，在计算 $f[i+1]$ 时，只会用到 $f[i]$，不会用到比 $i$ 更早的状态。

因此可以去掉第一个维度，反复利用同一个一维数组。

状态转移方程改为

$$
f[j] = f[j] \vee f[j-\textit{nums}[i]]
$$

初始值 $f[0]= \texttt{true}$。

答案为 $f[s/2]$。

具体例子，以及为什么要倒序遍历 $j$，请看 [0-1 背包视频讲解](https://www.bilibili.com/video/BV16Y411v7Y6/)。

此外，设前 $i$ 个数的和为 $s'$，由于子序列的元素和不可能比 $s'$ 还大，$j$ 可以从 $\min(s',s/2)$ 开始倒着枚举。比如 $\textit{nums}$ 前两个数的和等于 $5$，那么我们无法在前两个数中，选出一个元素和大于 $5$ 的子序列，所以对于 $j>5$ 的 $f$ 值，一定是 $\texttt{false}$，无需计算。

* [sol-Python3]

```py
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        s = sum(nums)
        if s % 2:
            return False
        s //= 2  # 注意这里把 s 减半了
        f = [True] + [False] * s
        s2 = 0
        for i, x in enumerate(nums):
            s2 = min(s2 + x, s)
            for j in range(s2, x - 1, -1):
                f[j] = f[j] or f[j - x]
        return f[s]
```

* [sol-Java]

```java
public class Solution {
    public boolean canPartition(int[] nums) {
        int s = 0;
        for (int x : nums) {
            s += x;
        }
        if (s % 2 != 0) {
            return false;
        }
        s /= 2; // 注意这里把 s 减半了
        boolean[] f = new boolean[s + 1];
        f[0] = true;
        int s2 = 0;
        for (int x : nums) {
            s2 = Math.min(s2 + x, s);
            for (int j = s2; j >= x; j--) {
                f[j] = f[j] || f[j - x];
            }
        }
        return f[s];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int s = reduce(nums.begin(), nums.end());
        if (s % 2) {
            return false;
        }
        s /= 2; // 注意这里把 s 减半了
        vector<int> f(s + 1);
        f[0] = true;
        int s2 = 0;
        for (int x : nums) {
            s2 = min(s2 + x, s);
            for (int j = s2; j >= x; j--) {
                f[j] |= f[j - x];
            }
        }
        return f[s];
    }
};
```

* [sol-C]

```c
bool canPartition(int* nums, int numsSize) {
    int s = 0;
    for (int i = 0; i < numsSize; i++) {
        s += nums[i];
    }
    if (s % 2) {
        return false;
    }
    s /= 2; // 注意这里把 s 减半了
    bool* f = calloc(s + 1, sizeof(bool));
    f[0] = true;
    int s2 = 0;
    for (int i = 0; i < numsSize; i++) {
        int x = nums[i];
        s2 = s2 + x < s ? s2 + x : s;
        for (int j = s2; j >= x; j--) {
            f[j] |= f[j - x];
        }
    }
    bool ans = f[s];
    free(f);
    return ans;
}
```

* [sol-Go]

```go
func canPartition(nums []int) bool {
    s := 0
    for _, x := range nums {
        s += x
    }
    if s%2 != 0 {
        return false
    }
    s /= 2 // 注意这里把 s 减半了
    f := make([]bool, s+1)
    f[0] = true
    s2 := 0
    for _, x := range nums {
        s2 = min(s2+x, s)
        for j := s2; j >= x; j-- {
            f[j] = f[j] || f[j-x]
        }
    }
    return f[s]
}
```

* [sol-JavaScript]

```js
var canPartition = function(nums) {
    let s = _.sum(nums);
    if (s % 2) {
        return false;
    }
    s /= 2; // 注意这里把 s 减半了
    const f = Array(s + 1).fill(false);
    f[0] = true;
    let s2 = 0;
    for (const x of nums) {
        s2 = Math.min(s2 + x, s);
        for (let j = s2; j >= x; j--) {
            f[j] = f[j] || f[j - x];
        }
    }
    return f[s];
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn can_partition(nums: Vec<i32>) -> bool {
        let s = nums.iter().sum::<i32>();
        if s % 2 != 0 {
            return false;
        }
        let mut f = vec![false; s as usize / 2 + 1];
        f[0] = true;
        let mut s = 0;
        for x in nums {
            let x = x as usize;
            s = (s + x).min(f.len() - 1);
            for j in (x..=s).rev() {
                f[j] = f[j] || f[j - x];
            }
        }
        f[s]
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(ns)$，其中 $n$ 是 $\textit{nums}$ 的长度，$s$ 是 $\textit{nums}$ 的元素和（的一半）。
- 空间复杂度：$\mathcal{O}(s)$。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
