# 题解思路1

子序列类型$dp$，涉及到相邻元素，考虑$LIS$（最长递增子序列）基础套路

转换为子问题求解，在以$nums[i]$结尾的好子序列中，枚举上一个元素是选的哪个，注意同时记录有多少个坐标不满足$seq[i] != seq[i + 1]$条件

**本质**：枚举选哪个

#### 状态

$dp[i][j]$ 表示以$nums[i]$结尾的 不超过$j$个下标满足xx 的最长好子序列长度

#### 状态转移

枚举$i$之前的下标$p$

当 $nums[p] == nums[i]$ 时，

$dp[i][j] = max(dp[i][j], dp[p][j]+1)$，没有占用$seq[i] != seq[i + 1]$条件

当 $nums[p] ！= nums[i]$ 时，

$dp[i][j] = max(dp[i][j], dp[p][j-1]+1)$，占用了一次$seq[i] != seq[i + 1]$条件

#### 边界

$j<0$时为$0$

$i$为$0$时，均为$1$

$dp$数组中为兼容下标$<0$情况，多开辟$1$空间，用下标$0$表示边界，状态转移下标统一后移$1$位

#### 答案

$dp[i][k]$最大值 （$0<=i<n$）

# ver1-代码

- 时间 $n²k$
- 空间 $nk$

* []

```go
func maximumLength(nums []int, k int) int {
	var (
		n  = len(nums)
		dp = make([][]int, n) // dp[i][j] 表示以nums[i]结尾的 不超过j个下标满足xx 的最长好子序列长度
	)
	//初始化
	for i := range dp {
		dp[i] = make([]int, k+2)
	}
	for j := 0; j < k+1; j++ { // 边界
		dp[0][j+1] = 1
	}

	//状态转移
	for i := 0; i < n; i++ {
		for j := 0; j < k+1; j++ {
			for p := 0; p < i; p++ { // 枚举
				if nums[p] == nums[i] {
					dp[i][j+1] = max(dp[i][j+1], dp[p][j+1]+1)
				} else {
					dp[i][j+1] = max(dp[i][j+1], dp[p][j]+1)
				}
			}
		}
	}

    // 遍历找最大
	var ans = 1
	for i := 0; i < n; i++ {
		ans = max(ans, dp[i][k+1])
	}
	return ans
}

```

# 感悟知识

$LIS$（最长递增子序列）基础模型的子序列问题，还是缺乏训练，量变还没引起质变qwq，任重而道远

$dp$中的初始化部分还是很细节的，注意观察状态转移方程而定
