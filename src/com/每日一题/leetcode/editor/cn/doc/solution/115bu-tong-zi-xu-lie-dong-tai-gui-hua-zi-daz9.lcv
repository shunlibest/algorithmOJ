定义`dp[i][j]`,`s`中下标范围`[0,i-1]`中选出字符来能够拼成`t`的下标范围`[0,j-1]`的连续子序列的组合数

以示例1为例：
输入：s = "rabbbit", t = "rabbit"
输出：3
dp[i][j]完整内容如下
|      | *    | r    | a    | b    | b    | i    | t    |
| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |
| *    | 1    | 0    | 0    | 0    | 0    | 0    | 0    |
| r    | 1    | 1    | 0    | 0    | 0    | 0    | 0    |
| a    | 1    | 1    | 1    | 0    | 0    | 0    | 0    |
| b    | 1    | 1    | 1    | 1    | 0    | 0    | 0    |
| b    | 1    | 1    | 1    | 2    | 1    | 0    | 0    |
| b    | 1    | 1    | 1    | 3    | 3    | 0    | 0    |
| i    | 1    | 1    | 1    | 3    | 3    | 3    | 0    |
| t    | 1    | 1    | 1    | 3    | 3    | 3    | 3    |

先直接上伪代码再说为什么
为了方便迭代，i和j均从1开始，初始化方法参考表格，第一列全给1，第一行除了第一列都给0.
迭代方程如下：

* java

```java
if(s[i-1]==t[j-1]){
    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
}else{
    dp[i][j] = dp[i-1][j];
}

```

基本思路如下图：
![屏幕截图 2023-04-07 163739.png](https://pic.leetcode.cn/1680856826-iBfqFS-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-04-07%20163739.png)

如果`s[i-1]！=t[j-1]`，这是匹配不上的情况，就顺延上一行的结果，比如s范围在`[r,a,b]`中选，`t`的范围是`[r,a]`,那么当b和a匹配不上的时候，`s`取`[r,a,b]`能够拼凑出`[r,a]`的组合数和`s`取`[r,a]`能够拼凑出`[r,a]`的组合数都是一样，那么`dp[3][1] = dp[2][1]`,转移过程如绿线所示。
即`dp[i][j] = dp[i-1][j]`。

对于`s[i-1]==t[j-1]`，匹配上的情况。以蓝色圆圈圈起来的位置为例，s此时范围取`[r,a,b,b]`，该子串最后一个b和`t`中`[r,a,b]`的最后一个b对应。

那么用`[r,a,b,b]`去拼凑`[r,a,b]`应该有多少种组合方案呢？

我们可以分两类情况考虑，是否使用`[r,a,b,b]`的最后一个b去匹配`[r,a,b]`的b。

如果使用，那么`t`中的`[r,a,b]`的b已经得到匹配了，那么剩下的任务就是使用`s`中的`[r,a,b]`去拼凑`t`中的`[r,a]`。
使用`s`中的`[r,a,b]`去拼凑`t`中的`[r,a]`能够得到的组合数是`dp[3][2]`。也就是蓝色圆圈左上角的位置的元素。

如果不使用，也就是说我们不用`[r,a,b,b]`的最后一个b去匹配`[r,a,b]`的b。那么剩下的任务就是使用`s`中的`[r,a,b]`去拼凑`t`中的`[r,a,b]`。使用`s`中的`[r,a,b]`去拼凑`t`中的`[r,a,b]`组合数是`dp[3][3]`。

两种情况全部算进来，`dp[4][3] = dp[3][2] + dp[3][3]`
即 `dp[i][j] = dp[i-1][j-1] + dp[i-1][j];`

二维dp代码,效率不知为啥很低，击败5%......

* java

```java
class Solution {
    public int numDistinct(String s, String t) {
        if(s.length()<t.length())return 0;
        int[][] dp = new int[s.length()+1][t.length()+1];
        for(int i=0;i<=s.length();i++){
            dp[i][0] = 1;
        }
        for(int j=1;j<=t.length();j++){
                dp[0][j] = 0;
        }
        for(int i = 1;i<=s.length();i++){
            for(int j = 1;j<=t.length();j++){
                if(s.charAt(i-1)==t.charAt(j-1)&&j<=i){
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]; 
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[s.length()][t.length()];
    }
        
} 
```

滚动数组优化

* java

```java
class Solution {
    public int numDistinct(String s, String t) {
        if(s.length()<t.length())return 0;
        int[] dp = new int[t.length()+1];
      
        dp[0] = 1;
    
        for(int i = 1;i<=s.length();i++){
            for(int j = t.length();j>=1;j--){
                if(s.charAt(i-1)==t.charAt(j-1)&&j<=i){
                    dp[j] += dp[j-1]; 
                }
            }
        }
        return dp[t.length()];
    }
        
} 

```

