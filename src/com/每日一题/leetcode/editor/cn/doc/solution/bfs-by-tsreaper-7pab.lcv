## 解法：BFS

最小环模板题。最小环的介绍详见 [OI Wiki](https://oi-wiki.org/graph/min-circle/)。

我们枚举所有边，每次把一条边 $u - v$ 从图中删掉，然后求从 $u$ 出发，不经过 $u - v$ 到达 $v$ 的最短路。

这样，这条最短路，加上被删掉的边 $u - v$ 就是一个环。而且由于我们求了从 $u$ 到 $v$ 的最短路，这个环就是包含 $u - v$ 的最小环。

因此，我们实际上就是在枚举，真正的最小环包含图中的哪一条边。取所有答案的最小值，就是真正的最小环。

复杂度 $\mathcal{O}(m^2)$，因为边长都是 $1$，我们只要通过 BFS 即可求最短路。

## 参考代码（c++）

* c++

```c++
class Solution {
public:
    int findShortestCycle(int n, vector<vector<int>>& edges) {
        vector<int> e[n];
        for (auto &edge : edges) {
            e[edge[0]].push_back(edge[1]);
            e[edge[1]].push_back(edge[0]);
        }

        const int INF = 1e9;
        // 求从 S 出发，不经过 S - T 这条边，走到 T 的最短路
        // 因为边长都是 1，bfs 求最短路即可
        auto bfs = [&](int S, int T) {
            queue<int> q;
            int dis[n];
            memset(dis, -1, sizeof(dis));
            q.push(S); dis[S] = 0;
            while (!q.empty()) {
                int sn = q.front(); q.pop();
                for (int fn : e[sn]) if (dis[fn] == -1) {
                    // 不能经过 S - T 这条边
                    if (sn == S && fn == T) continue;
                    q.push(fn);
                    dis[fn] = dis[sn] + 1;
                }
            }
            return dis[T] == -1 ? INF : dis[T];
        };

        int ans = INF;
        // 枚举删掉哪条边，取所有答案的最小值
        for (int i = 0; i < n; i++) for (int j : e[i]) ans = min(ans, bfs(i, j) + 1);
        return ans == INF ? -1 : ans;
    }
};
```

