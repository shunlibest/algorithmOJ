定义 $f[i]$ 表示平铺 $2 \times i$ 面板的方案数，那么答案为 $f[n]$。

尝试计算 $f$ 的前几项，并从中找到规律，得到 $f[n]$ 的递推式：

![790-5.png](https://pic.leetcode.cn/1668157188-nBzesC-790-5.png)

代码实现时，可以定义 $f[0]=1$，这样可以从 $f[3]$ 开始算。

* [sol-Python3]

```py
MOD = 10 ** 9 + 7

class Solution:
    def numTilings(self, n: int) -> int:
        if n == 1: return 1
        f = [0] * (n + 1)
        f[0] = f[1] = 1
        f[2] = 2
        for i in range(3, n + 1):
            f[i] = (f[i - 1] * 2 + f[i - 3]) % MOD
        return f[n]
```

* [sol-Java]

```java
class Solution {
    private static final long MOD = (long) 1e9 + 7;

    public int numTilings(int n) {
        if (n == 1) return 1;
        long[] f = new long[n + 1];
        f[0] = f[1] = 1;
        f[2] = 2;
        for (int i = 3; i <= n; ++i)
            f[i] = (f[i - 1] * 2 + f[i - 3]) % MOD;
        return (int) f[n];
    }
}
```

* [sol-C++]

```cpp
class Solution {
    const int MOD = 1e9 + 7;
public:
    int numTilings(int n) {
        if (n == 1) return 1;
        long f[n + 1];
        f[0] = f[1] = 1;
        f[2] = 2;
        for (int i = 3; i <= n; ++i)
            f[i] = (f[i - 1] * 2 + f[i - 3]) % MOD;
        return f[n];
    }
};
```

* [sol-Go]

```go
func numTilings(n int) int {
    if n == 1 {
        return 1
    }
    f := make([]int, n+1)
    f[0], f[1], f[2] = 1, 1, 2
    for i := 3; i <= n; i++ {
        f[i] = (f[i-1]*2 + f[i-3]) % (1e9 + 7)
    }
    return f[n]
}
```

也可以用 $3$ 个变量滚动计算 $f$。

* [sol2-Python3]

```py
MOD = 10 ** 9 + 7

class Solution:
    def numTilings(self, n: int) -> int:
        if n == 1: return 1
        a, b, c = 1, 1, 2
        for _ in range(3, n + 1):
            a, b, c = b, c, (c * 2 + a) % MOD
        return c
```

* [sol2-Java]

```java
class Solution {
    private static final long MOD = (long) 1e9 + 7;

    public int numTilings(int n) {
        if (n == 1) return 1;
        long a = 1, b = 1, c = 2;
        for (int i = 3; i <= n; ++i) {
            long f = (c * 2 + a) % MOD;
            a = b;
            b = c;
            c = f;
        }
        return (int) c;
    }
}
```

* [sol2-C++]

```cpp
class Solution {
    const int MOD = 1e9 + 7;
public:
    int numTilings(int n) {
        if (n == 1) return 1;
        long a = 1, b = 1, c = 2;
        for (int i = 3; i <= n; ++i) {
            long f = (c * 2 + a) % MOD;
            a = b;
            b = c;
            c = f;
        }
        return c;
    }
};
```

* [sol2-Go]

```go
func numTilings(n int) int {
    if n == 1 {
        return 1
    }
    a, b, c := 1, 1, 2
    for i := 3; i <= n; i++ {
        a, b, c = b, c, (c*2+a)%(1e9+7)
    }
    return c
}
```

由于 $n\le 1000$，还可以预先计算好 $1000$ 以内的 $f$ 值。

* [sol3-Python3]

```py
MOD = 10 ** 9 + 7

f = [0] * 1001
f[0] = f[1] = 1
f[2] = 2
for i in range(3, 1001):
    f[i] = (f[i - 1] * 2 + f[i - 3]) % MOD

class Solution:
    def numTilings(self, n: int) -> int:
        return f[n]
```

* [sol3-Java]

```java
class Solution {
    private static final long MOD = (long) 1e9 + 7;
    private static final long[] f = new long[1001];

    static {
        f[0] = f[1] = 1;
        f[2] = 2;
        for (int i = 3; i <= 1000; ++i)
            f[i] = (f[i - 1] * 2 + f[i - 3]) % MOD;
    }

    public int numTilings(int n) {
        return (int) f[n];
    }
}
```

* [sol3-C++]

```cpp
const int MOD = 1e9 + 7;
long f[1001];
int init = []() {
    f[0] = f[1] = 1;
    f[2] = 2;
    for (int i = 3; i <= 1000; ++i)
        f[i] = (f[i - 1] * 2 + f[i - 3]) % MOD;
    return 0;
}();

class Solution {
public:
    int numTilings(int n) {
        return f[n];
    }
};
```

* [sol3-Go]

```go
var f = [1001]int{1, 1, 2}

func init() {
    for i := 3; i <= 1000; i++ {
        f[i] = (f[i-1]*2 + f[i-3]) % (1e9 + 7)
    }
}

func numTilings(n int) int {
    return f[n]
}
```

#### 复杂度分析

- 时间复杂度：$O(n)$。如果预先计算，则为 $O(1)$。
- 空间复杂度：$O(1)$。

## 分类题单

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)

更多题单，点我个人主页 - 讨论发布。

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
