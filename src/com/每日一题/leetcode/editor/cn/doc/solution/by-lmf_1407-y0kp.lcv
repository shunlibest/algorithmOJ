# 状态定义

## f\[i\]\[j\]:从前i个钢筋中挑出一部分并分成两堆，这两堆钢筋的长度和的差值为j的情况下较小的那一堆的和的最大值

# 状态转移

## 考虑当前遍历的钢筋i，假设长度为len。我们枚举之前的差值j，那么我们有几种情况

## 1、不使用当前钢筋

### f\[i\]\[j\] = f\[i-1\]\[j\]。

### 根据我们的状态定义，这是很容易理解的，没问题。翻译一下就是:从前i个钢筋中挑出一部分并分成两堆，这两堆钢筋的长度和的差值为j的情况下较小的那一堆的和的最大值 等于 从前i-1个钢筋中挑出一部分并分成两堆，这两堆钢筋的长度和的差值为j的情况下较小的那一堆的和的最大值。这在不使用钢筋i的情况下显然是相等的。

## 2、将当前钢筋放在较大的堆里，较小的那一堆不会发生任何改变！

### f\[i\]\[j+len\] = f\[i-1\]\[j\]

## 3、将当前钢筋放在较小的堆里，较小的那一堆的和增大len，但是仍然不超过较大的那一堆的和！

### f\[i\]\[j-len\] = f\[i-1\]\[j\]+len

## 4、将当前钢筋放在较小的堆里，较小的那一堆的和增大len，并且超过了较大的那一堆的和！此时较小堆的身份发生了改变，原来的较大堆变成了现在的较小堆。因为原来的较小堆和较大堆的差值为j，所以原来的较大堆是f\[i-1\]\[j\]+j。

### f\[i\]\[len-j\] = f\[i-1\]\[j\]+j

* 

```
class Solution {
public:
    int tallestBillboard(vector<int>& rods) {
        int sum = accumulate(rods.begin(), rods.end(), 0);
        int f[32][5050];
        // f[i][j]: 前i个物品凑成挑出两堆，两堆差值为j的较小那个堆的最大值
        memset(f, -0x3f, sizeof(f));
        f[0][0] = 0;
        int n = rods.size();
        for (int i = 1; i <= n; i++) {
            int len = rods[i-1];
            // 枚举之前差值
            for (int j = 0; j <= sum; j++) {
                // 不使用
                f[i][j] = max(f[i][j], f[i-1][j]);

                if (j + len <= sum) {
                    // 可以加在较大的堆，较小那个堆的值不变
                    f[i][j+len] = max(f[i][j+len], f[i-1][j]);
                }

                if (j >= len) {
                    // 可以加在较小的堆，较小那个堆的值改变
                    f[i][j-len] = max(f[i][j-len], f[i-1][j]+len);
                }
                
                if (len >= j) {
                    // 可以加在较小的堆，较小那个堆改变
                    f[i][len-j] = max(f[i][len-j], f[i-1][j]+j);
                }
            }
        }
        return f[n][0];
    }
};
```

