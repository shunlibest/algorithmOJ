![单调栈【基础算法精讲 26】](https://pic.leetcode.cn/1710804602-sheXGS-lc84.jpg)

首先，面积最大矩形的高度**一定是** $\textit{heights}$ **中的元素**。这可以用反证法证明：假如高度不在 $\textit{heights}$ 中，比如 $4$，那我们可以增加高度直到触及某根柱子的顶部，比如增加到 $5$，由于矩形底边长不变，高度增加，我们得到了面积更大的矩形，矛盾，所以面积最大矩形的高度一定是 $\textit{heights}$ 中的元素。

假设 $h=\textit{heights}[i]$ 是矩形的高度，那么矩形的宽度最大是多少？我们需要知道：

- 在 $i$ 左侧的**小于** $h$ 的最近元素的下标 $\textit{left}$，如果不存在则为 $-1$。求出了 $\textit{left}$，那么 $\textit{left}+1$ 就是在 $i$ 左侧的**大于等于** $h$ 的最近元素的下标。
- 在 $i$ 右侧的**小于** $h$ 的最近元素的下标 $\textit{right}$，如果不存在则为 $n$。求出了 $\textit{right}$，那么 $\textit{right}-1$ 就是在 $i$ 右侧的**大于等于** $h$ 的最近元素的下标。

比如示例 1（上图），选择 $i=2$ 这个柱子作为矩形高，那么左边小于 $\textit{heights}[2]=5$ 的最近元素的下标为 $\textit{left}=1$，右边小于 $\textit{heights}[2]=5$ 的最近元素的下标为 $\textit{right}=4$。

那么矩形的宽度就是 $\textit{right}-\textit{left}-1 = 4-1-1=2$，矩形面积为 $h\cdot (\textit{right}-\textit{left}-1) = 5\cdot 2 = 10$。

枚举 $i$，计算对应的矩形面积，更新答案的最大值。

如何快速计算 $\textit{left}$ 和 $\textit{right}$？这可以用单调栈求出。原理请看视频：[单调栈【基础算法精讲 26】](https://www.bilibili.com/video/BV1VN411J7S7/)，欢迎点赞关注~

* [sol-Python3]

```py
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        n = len(heights)
        left = [-1] * n
        st = []
        for i, x in enumerate(heights):
            while st and x <= heights[st[-1]]:
                st.pop()
            if st:
                left[i] = st[-1]
            st.append(i)

        right = [n] * n
        st.clear()
        for i in range(n - 1, -1, -1):
            x = heights[i]
            while st and x <= heights[st[-1]]:
                st.pop()
            if st:
                right[i] = st[-1]
            st.append(i)

        ans = 0
        for h, l, r in zip(heights, left, right):
            ans = max(ans, h * (r - l - 1))
        return ans
```

* [sol-Java]

```java
class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int[] left = new int[n];
        Deque<Integer> st = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            int x = heights[i];
            while (!st.isEmpty() && x <= heights[st.peek()]) {
                st.pop();
            }
            left[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }

        int[] right = new int[n];
        st.clear();
        for (int i = n - 1; i >= 0; i--) {
            int x = heights[i];
            while (!st.isEmpty() && x <= heights[st.peek()]) {
                st.pop();
            }
            right[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, heights[i] * (right[i] - left[i] - 1));
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int largestRectangleArea(vector<int> &heights) {
        int n = heights.size();
        vector<int> left(n, -1);
        stack<int> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[i] <= heights[st.top()]) {
                st.pop();
            }
            if (!st.empty()) {
                left[i] = st.top();
            }
            st.push(i);
        }

        vector<int> right(n, n);
        st = stack<int>();
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && heights[i] <= heights[st.top()]) {
                st.pop();
            }
            if (!st.empty()) {
                right[i] = st.top();
            }
            st.push(i);
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, heights[i] * (right[i] - left[i] - 1));
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func largestRectangleArea(heights []int) (ans int) {
    n := len(heights)
    left := make([]int, n)
    st := []int{}
    for i, x := range heights {
        for len(st) > 0 && x <= heights[st[len(st)-1]] {
            st = st[:len(st)-1]
        }
        if len(st) > 0 {
            left[i] = st[len(st)-1]
        } else {
            left[i] = -1
        }
        st = append(st, i)
    }

    right := make([]int, n)
    st = st[:0]
    for i := n - 1; i >= 0; i-- {
        for len(st) > 0 && heights[i] <= heights[st[len(st)-1]] {
            st = st[:len(st)-1]
        }
        if len(st) > 0 {
            right[i] = st[len(st)-1]
        } else {
            right[i] = n
        }
        st = append(st, i)
    }

    for i, h := range heights {
        ans = max(ans, h*(right[i]-left[i]-1))
    }
    return ans
}
```

* [sol-JavaScript]

```js
var largestRectangleArea = function(heights) {
    const n = heights.length;
    const left = Array(n).fill(-1);
    const st = [];
    for (let i = 0; i < n; i++) {
        const x = heights[i];
        while (st.length && x <= heights[st[st.length - 1]]) {
            st.pop();
        }
        if (st.length) {
            left[i] = st[st.length - 1];
        }
        st.push(i);
    }

    const right = Array(n).fill(n);
    st.length = 0;
    for (let i = n - 1; i >= 0; i--) {
        const x = heights[i];
        while (st.length && x <= heights[st[st.length - 1]]) {
            st.pop();
        }
        if (st.length) {
            right[i] = st[st.length - 1];
        }
        st.push(i);
    }

    let ans = 0;
    for (let i = 0; i < n; i++) {
        ans = Math.max(ans, heights[i] * (right[i] - left[i] - 1));
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {
        let n = heights.len();
        let mut left = vec![-1; n];
        let mut st = Vec::new();
        for (i, &x) in heights.iter().enumerate() {
            while !st.is_empty() && x <= heights[*st.last().unwrap()] {
                st.pop();
            }
            if let Some(&j) = st.last() {
                left[i] = j as i32;
            }
            st.push(i);
        }

        let mut right = vec![n as i32; n];
        st.clear();
        for (i, &x) in heights.iter().enumerate().rev() {
            while !st.is_empty() && x <= heights[*st.last().unwrap()] {
                st.pop();
            }
            if let Some(&j) = st.last() {
                right[i] = j as i32;
            }
            st.push(i);
        }

        let mut ans = 0;
        for ((&h, l), r) in heights.iter().zip(left).zip(right) {
            ans = ans.max(h * (r - l - 1));
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{heights}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
