> Problem: [329. 矩阵中的最长递增路径](https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/description/)

[TOC]

# 思路

> 讲述看到这一题的思路

# 解题方法

> 描述你的解题方法

# 复杂度

时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```C++
class Solution 
{
private:
    int dx[4]={0,0,1,-1};
    int dy[4]={1,-1,0,0};
    vector<vector<int>> memo;
    int n,m;
public:
    int dfs(vector<vector<int>>& matrix,int i, int j)
    {
        if(memo[i][j]!=0) return memo[i][j];
        int ret=1;
        int num=matrix[i][j];
        for(int k=0;k<4;k++)
        {
            int x = i+dx[k], y = j + dy[k];
            if(x>=0&&y>=0&&x<m&&y<n&&num<matrix[x][y])
                ret=max(ret,1+dfs(matrix,x,y));
        }
        
        memo[i][j]=ret;
        return ret;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) 
    {
        m=matrix.size(),n=matrix[0].size();
        memo.resize(m,vector<int>(n));
        int ret=1;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                ret=max(ret,dfs(matrix,i,j));
            }
        }
        return ret;
    }
};
```

