本题与[152. 乘积最大子数组](/problems/maximum-product-subarray/)基本一致，区别在于本题选择的元素并不要求连续，因此本题也可以叫做**乘积最大子序列**。

我们记dpA[i]为枚举到第i个元素时，乘积最大子序列的乘积；dpB[i]为枚举到第i个元素时，乘积最小子序列的乘积。状态转移方程见以下代码：

* 

```
class Solution:
    def maxStrength(self, nums: List[int]) -> int:
        n = len(nums)
        dpA = [0] * n
        dpB = [0] * n
        dpA[0] = nums[0]
        dpB[0] = nums[0]
        for i in range(1, n):
            dpA[i] = max(dpA[i - 1] * nums[i], dpB[i - 1] * nums[i], nums[i], dpA[i - 1])
            dpB[i] = min(dpB[i - 1] * nums[i], dpA[i - 1] * nums[i], nums[i], dpB[i - 1])
        return dpA[n - 1]
```

本题并不建议采用贪心的做法(直接将所有数相乘然后再考虑怎么删元素)，因为边界条件比较多容易遗漏。

