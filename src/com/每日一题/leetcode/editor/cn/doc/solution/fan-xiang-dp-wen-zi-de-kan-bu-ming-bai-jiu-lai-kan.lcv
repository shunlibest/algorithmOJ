![image.png](https://pic.leetcode-cn.com/3ffad731e26ac6b4d9182d389e55815815866ac9a9830ea4863c3bbc8311681f-image.png)

### 解题思路

1. 为啥用反向？因为要正向更新dp无法更新当前所需最小的生命值
2. 反向更新dp：用负数记录，负数的**相反数**表示从此处走到右下角所需要扣的血量的最小值，即所需的最低初始健康点数-1
3. 更新状态分两步：**(我用的是负数进行更新，但从其相反数进行理解)**
   - dungeon[i][j] = dungeon[i][j] + Math.max(dungeon[i + 1][j], dungeon[i][j + 1]);
   - 取下一步的所需要扣的血量的最小值(负数用max)与此处的数值的和
   - if (dungeon[i][j] > 0) dungeon[i][j] = 0;
   - 所需要扣的血量的最小值最小为零，不可能为负数 *(指该处数值的相反数)*
4. 总的状态转移方程：dp[i][j]=max(min(dp[i+1][j],dp[i][j+1])+dungeon(i,j),1)

![image.png](https://pic.leetcode-cn.com/f5463cef50529d0cf74ef0b21a5a40618749530c8acd041757e3a421a321f120-image.png)

### 代码

* java

```java
class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        int row = dungeon.length, col = dungeon[0].length;
        if (dungeon[row - 1][col - 1] > 0) dungeon[row - 1][col - 1] = 0;
        for (int i = row - 2; i >= 0; i--){
            dungeon[i][col - 1] = dungeon[i][col - 1] + dungeon[i + 1][col - 1];
            if (dungeon[i][col - 1] > 0) dungeon[i][col - 1] = 0;
        }
        for (int i = col - 2; i >= 0; i--){
            dungeon[row - 1][i] = dungeon[row - 1][i] + dungeon[row - 1][i + 1];
            if (dungeon[row - 1][i] > 0) dungeon[row - 1][i] = 0;
        }

        for (int i = row - 2; i >= 0; i--){
            for (int j = col - 2; j >= 0; j--){
                dungeon[i][j] = dungeon[i][j] + Math.max(dungeon[i + 1][j], dungeon[i][j + 1]);
                if (dungeon[i][j] > 0) dungeon[i][j] = 0;
            }
        }
        return dungeon[0][0] = dungeon[0][0] > 0 ? 1 : -dungeon[0][0] + 1;
    }
}
```

