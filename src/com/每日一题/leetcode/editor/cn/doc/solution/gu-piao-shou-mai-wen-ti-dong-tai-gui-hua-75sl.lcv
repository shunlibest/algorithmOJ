> Problem: [123. 买卖股票的最佳时机 III](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/description/)

[TOC]

# 思路

> 参考代码随想录

# 解题方法

动态规划：
动态规划五部曲：
1.dp数组的定义
dp[i][0]表示第i天不进行任何操作的最大金额
dp[i][1]表示第i天第一次持有股时的最大金额
dp[i][2]表示第i天第一次不持有股的最大金额
dp[i][3]表示第i天第二次持有股时的最大金额
dp[i][4]表示第i天第二次不持有股的最大金额
2.dp数组的递推公式
和上一题不一样，这一题只能购买两次
但是同样都有两种情况：
dp[i][0]：
不进行任何操作就保留原状dp[i-1][0]
dp[i][1]：
当前一天持有股时，保持原状dp[i-1][1]
当前一天不持有股时，dp[i-1][0]-prices[i]
dp[i][2]：
当前一天持有股时，dp[i-1][1]+prices[i]
当前一天不持有股时，保持原状dp[i-1][2]
dp[i][3]：
当前一天持有股时，保持原状dp[i-1][3]
当前一天不持有股时，dp[i-1][2]-prices[i]
dp[i][4]：
当前一天持有股时，dp[i-1][3]+prices[i]
当前一天不持有股时，保持原状dp[i-1][4]
3.dp数组的初始化
dp是由dp[i-1]推出的，当第0天时:
dp[0][0]=0;//不进行任何操作
dp[0][1]=-prices[0];//第一次持有股份
dp[0][2]=0;//第一次不持有股份
dp[0][3]=-prices[0];//第二次持有股份
dp[0][4]=0;//第二次不持有股份
4.dp的遍历顺序
从前往后
5.举例证明
省略

# 复杂度

时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

空间复杂度:

> 添加空间复杂度, 示例： $O(n*5)$

# Code

* []

```C
int maxProfit(int* prices, int pricesSize) {
    int dp[pricesSize][5];
    //dp[i][0]表示第i天不进行任何操作的最大金额
    //dp[i][1]表示第i天第一次持有股时的最大金额
    //dp[i][2]表示第i天第一次不持有股时的最大金额
    //dp[i][3]表示第i天第二次持有股时的最大金额
    //dp[i][4]表示第i天第二次不持有股的最大金额
    memset(dp,0,sizeof(dp));
    dp[0][0]=0;
    dp[0][1]=-prices[0];
    dp[0][2]=0;
    dp[0][3]=-prices[0];
    dp[0][4]=0;
    for(int i=1;i<pricesSize;i++){
        dp[i][0]=dp[i-1][0];
        dp[i][1]=fmax(dp[i-1][1],dp[i-1][0]-prices[i]);
        dp[i][2]=fmax(dp[i-1][2],dp[i-1][1]+prices[i]);
        dp[i][3]=fmax(dp[i-1][3],dp[i-1][2]-prices[i]);
        dp[i][4]=fmax(dp[i-1][4],dp[i-1][3]+prices[i]);
    }
    return dp[pricesSize-1][4];
}
```

