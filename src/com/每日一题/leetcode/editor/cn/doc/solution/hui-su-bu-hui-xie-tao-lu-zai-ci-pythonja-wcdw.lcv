## 视频讲解

请看 [组合型回溯+剪枝【基础算法精讲 15】](https://www.bilibili.com/video/BV1xG4y1F7nC/)

制作不易，欢迎点赞~

## 方法一：枚举填左括号还是右括号

* [sol-Python3]

```py
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        m = n * 2  # 括号长度
        ans = []
        path = [''] * m  # 所有括号长度都是一样的 m
        # i=目前填了多少个括号
        # open=左括号个数，i-open=右括号个数
        def dfs(i: int, open: int) -> None:
            if i == m:  # 括号构造完毕
                ans.append(''.join(path))  # 加入答案
                return
            if open < n:  # 可以填左括号
                path[i] = '('  # 直接覆盖
                dfs(i + 1, open + 1)  # 多了一个左括号
            if i - open < open:  # 可以填右括号
                path[i] = ')'  # 直接覆盖
                dfs(i + 1, open)
        dfs(0, 0)
        return ans
```

* [sol-Java]

```java
class Solution {
    private int n;
    private char[] path;
    private final List<String> ans = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        this.n = n;
        path = new char[n * 2]; // 所有括号长度都是一样的 n*2
        dfs(0, 0);
        return ans;
    }

    // i=目前填了多少个括号
    // open=左括号个数，i-open=右括号个数
    private void dfs(int i, int open) {
        if (i == n * 2) { // 括号构造完毕
            ans.add(new String(path)); // 加入答案
            return;
        }
        if (open < n) { // 可以填左括号
            path[i] = '('; // 直接覆盖
            dfs(i + 1, open + 1); // 多了一个左括号
        }
        if (i - open < open) { // 可以填右括号
            path[i] = ')'; // 直接覆盖
            dfs(i + 1, open);
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        int m = n * 2; // 括号长度
        vector<string> ans;
        string path(m, 0); // 所有括号长度都是一样的 m
        // i=目前填了多少个括号
        // open=左括号个数，i-open=右括号个数
        auto dfs = [&](auto&& dfs, int i, int open) {
            if (i == m) { // 括号构造完毕
                ans.emplace_back(path); // 加入答案
                return;
            }
            if (open < n) { // 可以填左括号
                path[i] = '('; // 直接覆盖
                dfs(dfs, i + 1, open + 1); // 多了一个左括号
            }
            if (i - open < open) { // 可以填右括号
                path[i] = ')'; // 直接覆盖
                dfs(dfs, i + 1, open);
            }
        };
        dfs(dfs, 0, 0);
        return ans;
    }
};
```

* [sol-Go]

```go
func generateParenthesis(n int) (ans []string) {
    m := n * 2
    path := make([]byte, m)
    // i=目前填了多少个括号
    // open=左括号个数，i-open=右括号个数
    var dfs func(int, int)
    dfs = func(i, open int) {
        if i == m {
            ans = append(ans, string(path))
            return
        }
        if open < n { // 可以填左括号
            path[i] = '('
            dfs(i+1, open+1)
        }
        if i-open < open { // 可以填右括号
            path[i] = ')'
            dfs(i+1, open)
        }
    }
    dfs(0, 0)
    return
}
```

* [sol-JavaScript]

```js
var generateParenthesis = function(n) {
    const m = n * 2;
    const ans = [];
    const path = Array(m);
    // i=目前填了多少个括号
    // open=左括号个数，i-open=右括号个数
    function dfs(i, open) {
        if (i === n * 2) {
            ans.push(path.join(""));
            return;
        }
        if (open < n) { // 可以填左括号
            path[i] = '(';
            dfs(i + 1, open + 1);
        }
        if (i - open < open) { // 可以填右括号
            path[i] = ')';
            dfs(i + 1, open);
        }
    }
    dfs(0, 0);
    return ans;
};
```

#### 复杂度分析

- 时间复杂度：分析回溯问题的时间复杂度，有一个通用公式：**路径长度**$\times$**搜索树的叶子数**。对于本题，它等于 $\mathcal{O}(n\cdot C(2n,n))$。但由于左右括号的约束，实际上没有这么多叶子，根据 Catalan 数，只有 $\dfrac{C(2n,n)}{n+1}$ 个叶子节点，所以实际的时间复杂度为 $\mathcal{O}(C(2n,n))$。此外，根据阶乘的 Stirling 公式，时间复杂度也可以表示为 $\mathcal{O}\left(\dfrac{4^n}{\sqrt n}\right)$。
- 空间复杂度：$\mathcal{O}(n)$。返回值的空间不计入。

## 方法二：枚举下一个左括号的位置

* [sol-Python3]

```py
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans = []
        path = []
        # balance = 左括号个数 - 右括号个数
        def dfs(i: int, balance: int) -> None:
            if len(path) == n:
                s = [')'] * (n * 2)
                for j in path:
                    s[j] = '('
                ans.append(''.join(s))
                return
            # 可以填 0 到 balance 个右括号
            for close in range(balance + 1):  # 填 close 个右括号
                path.append(i + close)  # 填 1 个左括号
                dfs(i + close + 1, balance - close + 1)
                path.pop()
        dfs(0, 0)
        return ans
```

* [sol-Java]

```java
class Solution {
    private int n;
    private final List<Integer> path = new ArrayList<>();
    private final List<String> ans = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        this.n = n;
        dfs(0, 0);
        return ans;
    }

    // balance = 左括号个数 - 右括号个数
    private void dfs(int i, int balance) {
        if (path.size() == n) {
            char[] s = new char[n * 2];
            Arrays.fill(s, ')');
            for (int j : path) {
                s[j] = '(';
            }
            ans.add(new String(s));
            return;
        }
        // 可以填 0 到 balance 个右括号
        for (int close = 0; close <= balance; close++) { // 填 close 个右括号
            path.add(i + close); // 填 1 个左括号
            dfs(i + close + 1, balance - close + 1);
            path.remove(path.size() - 1);
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        vector<int> path;
        // balance = 左括号个数 - 右括号个数
        auto dfs = [&](auto&& dfs, int i, int balance) {
            if (path.size() == n) {
                string s(n * 2, ')');
                for (int j : path) {
                    s[j] = '(';
                }
                ans.emplace_back(s);
                return;
            }
            // 可以填 0 到 balance 个右括号
            for (int close = 0; close <= balance; close++) { // 填 close 个右括号
                path.push_back(i + close); // 填 1 个左括号
                dfs(dfs, i + close + 1, balance - close + 1);
                path.pop_back();
            }
        };
        dfs(dfs, 0, 0);
        return ans;
    }
};
```

* [sol-Go]

```go
func generateParenthesis(n int) (ans []string) {
    path := []int{}
    var dfs func(int, int)
    dfs = func(i, balance int) { // balance = 左括号个数 - 右括号个数
        if len(path) == n {
            s := bytes.Repeat([]byte{')'}, n*2)
            for _, j := range path {
                s[j] = '('
            }
            ans = append(ans, string(s))
            return
        }
        // 可以填 0 到 balance 个右括号
        for close := 0; close <= balance; close++ { // 填 close 个右括号
            path = append(path, i+close) // 填 1 个左括号
            dfs(i+close+1, balance-close+1)
            path = path[:len(path)-1]
        }
    }
    dfs(0, 0)
    return
}
```

* [sol-JavaScript]

```js
var generateParenthesis = function (n) {
    const ans = [];
    const path = [];
    // balance = 左括号个数 - 右括号个数
    function dfs(i, balance) {
        if (path.length === n) {
            let s = Array(n * 2).fill(')');
            for (const j of path) s[j] = '(';
            ans.push(s.join(""));
            return;
        }
        // 可以填 0 到 balance 个右括号
        for (let close = 0; close <= balance; close++) { // 填 close 个右括号
            path.push(i + close); // 填 1 个左括号
            dfs(i + close + 1, balance - close + 1);
            path.pop();
        }
    }
    dfs(0, 0);
    return ans;
};
```

#### 复杂度分析

- 时间复杂度：分析回溯问题的时间复杂度，有一个通用公式：**路径长度**$\times$**搜索树的叶子数**。对于本题，它等于 $\mathcal{O}(n\cdot C(2n,n))$。但由于左右括号的约束，实际上没有这么多叶子，根据 Catalan 数，只有 $\dfrac{C(2n,n)}{n+1}$ 个叶子节点，所以实际的时间复杂度为 $\mathcal{O}(C(2n,n))$。此外，根据阶乘的 Stirling 公式，时间复杂度也可以表示为 $\mathcal{O}\left(\dfrac{4^n}{\sqrt n}\right)$。
- 空间复杂度：$\mathcal{O}(n)$。返回值的空间不计入。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
