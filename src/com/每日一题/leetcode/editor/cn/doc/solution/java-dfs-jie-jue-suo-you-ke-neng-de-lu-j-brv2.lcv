<br> ## 解题思路: &gt; 1. 可以将本题的题目简化为以下模型: 求有向无环图中, 从起点start到终点dst的所有可行路径的集合; &gt; 2. 以上的模型抽象, 比较容易套用的解题模板为DFS的方式: &gt; 3. DFS整体解题思路为: 选择某个节点作为前进的路径, 遍历该节点可行的所有后续节点, 递归所有后续节点, 撤销选择该节点; &gt; 4. 【递归的方式实现dfs】: &gt; * 从起始点start出发, 可以前进的所有位置集合为graph[start], 依次遍历该集合, 选择其中某一个节点idx, 将idx添加到已经选择的前进路径List
 <Integer>
   currList上, 然后递归, 尝试选择idx的后续节点作为路径, idx的所有后续节点递归遍历完以后, 就说明idx的所有后续可能的前进路径都已经尝试过了, 即可撤销选择idx节点, 改为选择graph[start]集合中的其他节点, 继续递归遍历; &gt; * 递归中, 当某条路径行进到终点dst时, 那么说明当前选中的路径currList满足条件, 可以把该路径添加到返回列表 List
  <List<Integer>
   &gt; ans中; 
  </List<Integer>
 </Integer></br>

<br> ## 提交代码: </br>

* java

```java
class Solution {

    List<List<Integer>> ans;

    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        //dfs 递归
        ans = new ArrayList<>();
        List<Integer> currList = new ArrayList<>();
        currList.add(0);
        dfs(graph, 0, currList);
        return ans;
    }

    //递归
    //start-当前递归到的节点, currList-从初始节点走到当前节点所选择的路径
    public void dfs(int[][] graph, int start, List<Integer> currList){
        if(start == graph.length-1){ //到达终点
            List<Integer> right = new ArrayList<>(currList);
            ans.add(right);
            return;
        }
        int[] dst = graph[start];   //当前节点的所有后节点
        for(int idx : dst){
            currList.add(idx);  //选择该节点
            dfs(graph, idx, currList);  //递归
            currList.remove(currList.size()-1); //撤销选择该节点
        }
    }
}
```

<br> ## 提交记录[20210825]: </br>

* css

```css
执行用时：2 ms, 在所有 Java 提交中击败了87.93%的用户
内存消耗：40.1 MB, 在所有 Java 提交中击败了63.75%的用户

```

<br> *** 如果对你有帮助, 还请帮忙点个赞吧👍</br>

