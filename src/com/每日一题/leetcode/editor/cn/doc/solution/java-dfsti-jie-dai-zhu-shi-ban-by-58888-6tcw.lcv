![image.png](https://pic.leetcode-cn.com/1639239496-lYEpoa-image.png)

> 解题思路： 引爆一个炸弹，dfs排查所有可能会一起爆炸的炸弹， 模拟引爆所有炸弹即可。

* java

```java
class Solution {
    // 炸弹引爆最大数量
    int max = 1;
    // 炸弹是否引爆备忘录
    boolean[] mem;
    public int maximumDetonation(int[][] bombs) {
        mem = new boolean[bombs.length];
        for(int i = 0 ; i < bombs.length ; i ++){
            // 先引爆一个
            dfs(bombs, i);
            // 所有炸弹置为未引爆状态
            Arrays.fill(mem,false);
        }
        return max;
    }

    private int dfs(int[][] bombs, int i){
        if(mem[i]){
            return 0;
        }
        mem[i] = true;
        int ret = 1;
        // 遍历所有炸弹，判断是否会连带引爆
        for(int j = 0 ; j < bombs.length ; j ++){
            if(mem[j]) continue;
            if(canBom(bombs,i,j)){
                // j爆炸之后，会带动其他的炸弹爆炸，继续dfs
                ret += dfs(bombs, j);
            }
        }
        max = Math.max(max,ret);
        return ret;
    }
    
    private boolean canBom(int[][] bombs, int i, int j){
        int[] b1 = bombs[i];
        int[] b2 = bombs[j];
        long x0 = b1[0], x1 = b2[0], y0 = b1[1], y1 = b2[1], r0 = b1[2];
        long len = (y1-y0)*(y1-y0) + (x1-x0)*(x1-x0);
        long r02 = r0 * r0;
        // 【两点距离的平方】(y1-y0)^2 + (x1-x0)^2 < 【引爆半径的平方】r0^2 则会被引爆
        if(len <= r02) return true;
        
        return false;
        
    }
    
}
```

