### 解题思路

本题可以采用动态规划解法，dp[i]表示以第i本书（从1开始数）为结尾的前i本书能叠成的最小高度。

故有以下这些情况：
- 当第i本书单独作为一层时， dp[i] = dp[i-1] + books[i-1][1];
- 当第i本书和第i-1本书一起作为一层的时候，dp[i] = dp[i-2] + max(books[i-1][1], books[i-2][1]);
- 依次类推...
- 当第i本书和第j本书到第i-1本书之间的所有书作为一层时， dp[i] = dp[j-1] + max(books[i-1][1], books[i-2][1], ... , books[j-1][1]);

综上所述，时间复杂度为O(n^2)， 空间复杂度为O(n)；

同时注意在计算上述递推过程的同时要记得还有书架自身宽度的限制，即不能无限的组合若干本书为同一层。最终dp[n]即为结果。

### 代码

* java

```java
class Solution {
    public int minHeightShelves(int[][] books, int shelf_width) {
        int n = books.length;
        //dp[i]表示以第i-1本书（从第0本算起）结尾的前i本书叠成的最小高度
        int[] dp = new int[n+1];

        dp[1] = books[0][1];

        for(int i = 2; i <= n; i++) {
            dp[i] = books[i-1][1] + dp[i-1];
            int w = books[i-1][0], h = books[i-1][1];
            for(int j = i-1; j > 0; j--) {
                w += books[j-1][0];
                if(w > shelf_width) break;
                h = Math.max(h, books[j-1][1]);
                dp[i] = Math.min(dp[i], dp[j-1] + h);
            }
        }

        return dp[n];
    }
}
```

