### 动态规划

#### 关键图

![image.png](https://pic.leetcode-cn.com/6b85bdc77ff483209c4d66e1c3ba1261e34a8a62350334144006d5a5803b20c4-image.png)

[!跳到代码](#参考代码)

#### 思路

- 今天不需要出门，不用买票
- 今天如果要出门，需要买几天？
  - 看往后几天（最多 30 天内）要不要出门
    - 30 天内都没有要出行的，那只买今天就好
    - 有要出门的（不同决策）
      - 这次 和 后面几次 分开买更省
      - 这次 和 后面几次 一起买更省

#### 细化思路

上述思路显而易见，最关键在于：「今天买多少，得看后几天怎么安排」，即「前面依赖后面」——从后向前来买。

如图所示，例 `days = [1,4,6,7,8,20]`

1. 第 `21` 及以后的日子都不需要出门，不用买票
2. 第 `20` 需要出门，需要买几天？
   - 不考虑 `20` 之前要不要出门，否则与思路相违背
   - 第 `20` 之后没有出门日，故买「一天」的 `costs[0]` 最省钱

![image.png](https://pic.leetcode-cn.com/284d7ef7ed80b3065fbd18a085bc1fe0fdae55afc014db36fda1bac68471f4fb-image.png)

3. 第 `9` - `19` 不需要出门，则不用买

![image.png](https://pic.leetcode-cn.com/f46be536fb31210704abd4918aa55dbf17040a2b1fabc20c30b35a9b2f41c7ac-image.png)

4. **第 `8` 需要出门，需要买几天？**
   - 往后（只需看往后 30 天）有出门的需求
     - 决策 1：买一天期，后面的不包
     - 决策 2：买七天期，包到第 `8 + 7 - 1` 天，第 `8 + 7` 天往后的不包
     - 决策 3：买三十天期，包到第 `8 + 30 - 1` 天，第 `8 + 30` 天往后的不包
     - 下图展示了三种决策所包含的日期跨度（黄色区域画多了一天...）、所花费用
       - 可见，决策 3 包三十天期的话，第 `20` 可不用花钱

![image.png](https://pic.leetcode-cn.com/6eb931f53b200745f3a52a93fecf0effed056f07912565d8a48736c1a8334f7c-image.png)

假设题目只有 `[8, 20]` 两天需要出行，则

* []

```Java
int result8 = min(c[0] + c[0], c[1] + c[0], c[2] + 0);
// 第 8 天  = min(决策1，      决策2,       决策3);
```

5. 抽象，定义状态，确定从后向前的递推公式
   - 将上述结果换个说法：「`result` 为第 `8` 天开始，所需最小费用 **累计**」
   - 抽象，定义状态： 「`dp[i]` 为第 `i` 天开始，所需最小费用 **累计**」
   - 则

   * []

   ```Java
   dp[i] = min(决策1, 决策2, 决策3);
         = min(c[0] + 1天后不包, c[1] + 7天后不包, c[2] + 30天不包);
         = min(c[0] + dp[i + 1], c[1] + dp[i + 7], c[2] + dp[i + 30]);
   ```

![image.png](https://pic.leetcode-cn.com/6b85bdc77ff483209c4d66e1c3ba1261e34a8a62350334144006d5a5803b20c4-image.png)

#### 参考代码

* []

```Java
class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int len = days.length, maxDay = days[len - 1], minDay = days[0];
        int[] dp = new int[maxDay + 31]; // 多扩几天，省得判断 365 的限制
        // 只需看 maxDay -> minDay，此区间外都不需要出门，不会增加费用
        for (int d = maxDay, i = len - 1; d >= minDay; d--) {
            // i 表示 days 的索引
            // 也可提前将所有 days 放入 Set，再通过 set.contains() 判断
            if (d == days[i]) {
                dp[d] = Math.min(dp[d + 1] + costs[0], dp[d + 7] + costs[1]);
                dp[d] = Math.min(dp[d], dp[d + 30] + costs[2]);
                i--; // 别忘了递减一天
            } else dp[d] = dp[d + 1]; // 不需要出门
        }
        return dp[minDay]; // 从后向前遍历，返回最前的 minDay
    }
}
```

#### 复杂度分析

- 时间复杂度：$O(maxDay - minDay)$
- 空间复杂度：$O(maxDay)$

#### 再优化

- 当 `d != days[i]` 时，可直接将 `d = days[i]` 以快速跳到前一个需要出发的 `d`
- 若如此，则需将中间跳过的 `dp[d]` 都补上总费用累计

