看大家用dfs记忆搜索的比较多，这里提供一个纯dp的思路。先按照元素值大小进行排序，同时记录元素的值，x，y坐标。再以元素值从小到大的顺序在matrix矩阵中进行dp累积。

dp的重点是需要按序进行，保证大的dp可以依赖小的dp，在这里表现为，递增较大的元素需要在较小元素计算后再计算，所以使用最小堆弹出当前最小元素，并使用记录的x,y坐标到matrix矩阵上判断周边元素大小，完成dp累积

* 

```
public int longestIncreasingPath(int[][] matrix) {
    if(matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0)
        return 0;
    //元素入最小堆，数组下标0-value，数组下标1-matrix中y坐标，数组下标2-matrix中x坐标，最小堆以value排序
    Queue<int[]> minDump = new PriorityQueue<int[]>((pre,next) -> pre[0] - next[0]);
    for(int y = 0; y < matrix.length; y++){
        for(int x = 0; x < matrix[0].length; x++){
            minDump.offer(new int[]{matrix[y][x],y,x});
        }
    }
    //dp(记录当前元素累积到的最大递增路径长度)
    int[][] dp = new int[matrix.length][matrix[0].length];
    //实时记录最大路径，作为返回值返回
    int maxLength = 0; 
    //元素从小到大开始dp(保证大的元素排在小的元素后被累积)
    while(minDump.size() > 0){
        int[] curElement = minDump.poll();
        int value = curElement[0];
        int y = curElement[1];
        int x = curElement[2];
        int curMax = 1;
        //四个方向比较最大路径(如果matrix元素大于周边的元素，则最长路径在周边dp的基础上+1)
        if(y > 0 && value > matrix[y - 1][x])
            curMax = Math.max(curMax,dp[y - 1][x] + 1);
        if(y < matrix.length - 1 && value > matrix[y + 1][x])
            curMax = Math.max(curMax,dp[y + 1][x] + 1);
        if(x > 0 && value > matrix[y][x - 1])
            curMax = Math.max(curMax,dp[y][x - 1] + 1);
        if(x < matrix[0].length - 1 && value > matrix[y][x + 1])
            curMax = Math.max(curMax,dp[y][x + 1] + 1);
        //累积dp
        dp[y][x] = curMax;
        //实时记录最大值
        maxLength = Math.max(maxLength,curMax);
    }
    return maxLength;
}
```

