> Problem: [2745. 构造最长的新字符串](https://leetcode.cn/problems/construct-the-longest-new-string/description/)

[TOC]

# 思路

> 看高手都是数学法，不过自己没想好，就老老实实的动态规划吧。

# 解题方法

> 定义一个4维动态规划数组$dp[x+1][y+1][z+1][3]$, 最后一维为0表示以$AA$结束的最长长度，最后一维为1表示以$BB$结束的最长长度，最后一维为2表示以$AB$结束的最长长度，即：
>
>> $dp[i][j][k][0]$表示还剩下$i$个$AA$，$j$个$BB$，$k$个$AB$，最后以$AA$结束的最长长度
>> $dp[i][j][k][1]$表示还剩下$i$个$AA$，$j$个$BB$，$k$个$AB$，最后以$BB$结束的最长长度
>> $dp[i][j][k][2]$表示还剩下$i$个$AA$，$j$个$BB$，$k$个$AB$，最后以$AB$结束的最长长度

> 初始化我们有:
>
>> $dp[0][0][0][status] = 0, status \in [0,2]$

> 现在我们可以开始递推$dp[i][j][k][status]$了，先看$status = 0$即以$AA$结尾的场景, 如果当前以AA结束, 那么之前的字符串以BB或者AB结束，这样最长长度的递推式子如下：
> $dp[i][j][k][0] = 2 + max(dp[i-1][j][k][1],dp[i-1][j][k][2]), (i \geq 1)$

> 再看看$status = 1$即以$BB$结尾的场景, 如果最后一个字符串是BB，那么之前的字符串以AA结束，这样最长长度的递推式子如下：
> $dp[i][j][k][1] = 2 + dp[i][j-1][k][0],(j \geq 1)$

> 最后看status = 2$即以$AB$结尾的场景,如果最后一个字符串是AB，那么之前的字符串以BB或者AB结束，这样最长长度的递推式子如下：
> $dp[i][j][k][2] = 2 + max(dp[i][j][k-1][1],dp[i][j][k-1][2]), (k \geq 1)$

最终的结果就是下面这三者的最大值：
$max(dp[x][y][z][0], dp[x][y][z][1], dp[x][y][z][2])$

# 复杂度

- 时间复杂度: $O(xyz)$

- 空间复杂度: $O(xyz)$

# Code

* []

```Java

class Solution {
    public int longestString(int x, int y, int z) {
        //最后一维为0表示以AA结束的数量，最后一维为1表示以BB结束的数量，最后一维为2表示以AB结束的数量
        int[][][][] dp = new int[x+1][y+1][z+1][3];
        for(int i = 0; i <= x; i++){
            for(int j = 0; j <= y; j++){
                for(int k = 0; k <= z; k++){
                    //处理当前以AA结束, 那么之前的字符串以BB或者AB结束
                    if(i > 0) dp[i][j][k][0] = 2 + Math.max(dp[i-1][j][k][1],dp[i-1][j][k][2]);
                    //如果最后一个字符串是BB，那么之前的字符串以AA结束
                    if(j > 0) dp[i][j][k][1] = 2 + dp[i][j-1][k][0];
                    //如果最后一个字符串是AB，那么之前的字符串以BB或者AB结束
                    if(k > 0) dp[i][j][k][2] = 2 + Math.max(dp[i][j][k-1][1],dp[i][j][k-1][2]);
                }
            }
        }
        int res = Math.max(dp[x][y][z][0], dp[x][y][z][1]);
        res = Math.max(res, dp[x][y][z][2]); 
        return res;
    }
}
```

