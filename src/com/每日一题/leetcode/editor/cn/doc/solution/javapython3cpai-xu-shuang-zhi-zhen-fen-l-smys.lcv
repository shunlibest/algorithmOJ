> [2332. 坐上公交的最晚时间](https://leetcode.cn/problems/the-latest-time-to-catch-a-bus/)

[TOC]

# 题目

给你一个下标从 **0** 开始长度为 `n` 的整数数组 `buses` ，其中 `buses[i]` 表示第 `i` 辆公交车的出发时间。同时给你一个下标从 **0** 开始长度为 `m` 的整数数组 `passengers` ，其中 `passengers[j]` 表示第 `j` 位乘客的到达时间。所有公交车出发的时间互不相同，所有乘客到达的时间也互不相同。

给你一个整数 `capacity` ，表示每辆公交车 **最多** 能容纳的乘客数目。

每位乘客都会搭乘下一辆有座位的公交车。如果你在 `y` 时刻到达，公交在 `x` 时刻出发，满足 `y <= x` 且公交没有满，那么你可以搭乘这一辆公交。**最早** 到达的乘客优先上车。

返回你可以搭乘公交车的最晚到达公交站时间。你 **不能** 跟别的乘客同时刻到达。

**注意：**数组 `buses` 和 `passengers` 不一定是有序的。

# 题目分析

> 参考 [灵神题解 —— 《插队》](https://leetcode.cn/problems/the-latest-time-to-catch-a-bus/solutions/1658352/pai-xu-by-endlesscheng-h9w9/?envType=daily-question&envId=2024-09-18)

## 思路分析

这道题给定我们一组车辆到达时刻和乘客到达时刻，以及每辆车的载客量。要求的是我们要坐上公交车的最晚到达公交车站的时间，并且不能和其他乘客同时到达。【也就是说每个时刻只能有一个乘客】

一组车辆和一组乘客的载客无非只有两种大的情况：

- 所有车都用完了；

  ![image-20240918104806832.png](https://pic.leetcode.cn/1726630122-seJpxi-image-20240918104806832.png)

- 所有乘客都上车了；

  ![image-20240918105932236.png](https://pic.leetcode.cn/1726630122-dhjxkq-image-20240918105932236.png)

**因此我们最后到达的时刻无非两种：1.最后一辆车到达时刻；2.最后一个乘客到达时刻前一刻；**

我们需要先模拟现有的乘客 `passengers` 的上车情况，**找到最后一个乘客到达时刻**。由于乘客上车是要按照时间顺序来，因此我们需要先将两个数组排序，然后我们可以用双指针 `i` 和 `j` 分别维护当前的车辆和乘客：

![image-20240918111149977.png](https://pic.leetcode.cn/1726630122-bqhnOV-image-20240918111149977.png)

然后再按照上面的分类讨论的情况去找最晚到达车站的时间。**特别注意：**我们找到的时间不一定就是合理的，因为不能和已有乘客的时间重复，因此还需要进行校验：

![image-20240918112248348.png](https://pic.leetcode.cn/1726630122-RAPRIc-image-20240918112248348.png)

我们通过双指针的移动，`j`一定指向首个未上车的乘客，即 `j-1`指向最后一个上车的乘客；

我们得到的时刻就要和每一个上车的乘客比较，如果冲突了，就要往前倒一个时刻。为了**得到最晚的，比较就是从最后一个上车乘客的时间开始比较**；

# 代码

1. 分别排序车辆和乘客的时间；
2. 模拟乘客上车过程：
   1. `i`指向当前车辆，`j`指向当前乘客，`c`表示当前车辆的当前容量；
   2. 模拟每一辆车 `buses[i]` 的上客情况，直到所有乘客都上车或者所有车都无法再上乘客；
   3. 每辆车的容量初始为最大值 `capacity`；
   4. 当车子还有容量且当前乘客 `passengers[j]` 在当前车辆 `buses[i]` 之前到达，乘客上车，指针`j`后移；
3. 根据不同情况计算到达时间 `res`；
4. `j` 指向的是首个未上车的乘客，即 `j-1`是最后上车的乘客；我们将我们的到达时间 `res` 和 `passengers[j-1]`比较，如果冲突了，`res-1`，同时`j`前移和上一个到达的乘客的到达时间比较是否冲突；如此循环直到不冲突；

* []

```Java
class Solution {
    public int latestTimeCatchTheBus(int[] buses, int[] passengers, int capacity) {
        Arrays.sort(buses);                             // 排序车辆时间
        Arrays.sort(passengers);                        // 排序乘客时间
        int n = buses.length, m = passengers.length;    
        int i = 0, j = 0, c = 0;                        // i指向当前车辆，j指向当前乘客，c表示当前车辆的当前容量
        for(; i < n; i++){                              // 模拟每一辆车的上客情况
            if(j == m)break;                            // 所有乘客都上车，退出循环
            c = capacity;                               // 每辆车的容量初始为最大值
            while(c > 0 && j < m && passengers[j] <= buses[i]){
                j++;                                    // 当车子还有容量且当前乘客在当前车辆之前到达，乘客上车，指针j后移
                c--;
            }
        }
        j--;                                            // j指向第一个没上车的人，j-1就是最后一个上车的；
        // i = n: 所有车都用了
        //  - p == capacity: 最后一辆也装满了，要把最后一个上车的人挤掉
        //  - p < capacity: 还有空位，最后一车发车之前到就行
        // j+1 = m: 所有人都上车了
        //  - i < n: 车没用完，最后一车发车之前到就行
        //  - i = n: 最后一辆也装满了，要把最后一个上车的人挤掉
        int res = (i == n && c > 0 || j + 1 == m && i < n) ? buses[n-1] : passengers[j];
        // 校验我们的到达时间res是否和已上车的乘客的到达时刻冲突 
        for(;j >= 0 && res == passengers[j]; j--){
            res--;  // 存在冲突，到达时间前移一个单位
        }
        return res;
    }
}
```

* []

```Python
class Solution:
    def latestTimeCatchTheBus(self, buses: List[int], passengers: List[int], capacity: int) -> int:
        buses.sort()        # 排序车辆时间
        passengers.sort()   # 排序乘客时间
        n, m = len(buses), len(passengers)    
        i = j = c = 0       # i指向当前车辆，j指向当前乘客，c表示当前车辆的当前容量
        while i < n:        # 模拟每一辆车的上客情况
            if j == m:
                break       # 所有乘客都上车，退出循环
            c = capacity    # 每辆车的容量初始为最大值
            while c > 0 and j < m and passengers[j] <= buses[i]:
                j += 1      # 当车子还有容量且当前乘客在当前车辆之前到达，乘客上车，指针j后移
                c -= 1
            i += 1
        j -= 1              # j指向第一个没上车的人，j-1就是最后一个上车的；
        # i = n: 所有车都用了
        #  - p == capacity: 最后一辆也装满了，要把最后一个上车的人挤掉
        #  - p < capacity: 还有空位，最后一车发车之前到就行
        # j+1 = m: 所有人都上车了
        #  - i < n: 车没用完，最后一车发车之前到就行
        #  - i = n: 最后一辆也装满了，要把最后一个上车的人挤掉
        res = buses[-1] if i == n and c > 0 or j + 1 == m and i < n else passengers[j]
        # 校验我们的上车时间res是否和已有乘客冲突 
        while j >= 0 and res == passengers[j]:
            res -= 1  # 存在冲突，到达时间前移一个单位
            j -= 1    # 和前一个乘客比较
        return res
```

* []

```C++
class Solution {
public:
    int latestTimeCatchTheBus(vector<int>& buses, vector<int>& passengers, int capacity) {
        sort(buses.begin(), buses.end());               // 排序车辆时间
        sort(passengers.begin(), passengers.end());     // 排序乘客时间
        int n = buses.size(), m = passengers.size();    
        int i = 0, j = 0, c = 0;                        // i指向当前车辆，j指向当前乘客，c表示当前车辆的当前容量
        for(; i < n; i++){                              // 模拟每一辆车的上客情况
            if(j == m)break;                            // 所有乘客都上车，退出循环
            c = capacity;                               // 每辆车的容量初始为最大值
            while(c > 0 && j < m && passengers[j] <= buses[i]){
                j++;                                    // 当车子还有容量且当前乘客在当前车辆之前到达，乘客上车，指针j后移
                c--;
            }
        }
        j--;                                            // j指向第一个没上车的人，j-1就是最后一个上车的；
        // i = n: 所有车都用了
        //  - p == capacity: 最后一辆也装满了，要把最后一个上车的人挤掉
        //  - p < capacity: 还有空位，最后一车发车之前到就行
        // j+1 = m: 所有人都上车了
        //  - i < n: 车没用完，最后一车发车之前到就行
        //  - i = n: 最后一辆也装满了，要把最后一个上车的人挤掉
        int res = (i == n && c > 0 || j + 1 == m && i < n) ? buses[n-1] : passengers[j];
        // 校验我们的到达时间res是否和已上车的乘客的到达时刻冲突 
        for(;j >= 0 && res == passengers[j]; j--){
            res--;  // 存在冲突，到达时间前移一个单位
        }
        return res;
    }
};
```

