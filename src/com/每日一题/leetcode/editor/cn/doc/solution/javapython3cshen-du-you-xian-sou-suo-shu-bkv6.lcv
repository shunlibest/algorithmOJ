对 [官解](https://leetcode.cn/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/solutions/2487673/tong-ji-wu-xiang-tu-zhong-wu-fa-hu-xiang-q5eh/?envType=daily-question&envId=2023-10-21) 的理解与补充

# 题目

## 2316. 统计无向图中无法互相到达点对数

给你一个整数 `n` ，表示一张 **无向图** 中有 `n` 个节点，编号为 `0` 到 `n - 1` 。同时给你一个二维整数数组 `edges` ，其中 `edges[i] = [ai, bi]` 表示节点 `ai` 和 `bi` 之间有一条 **无向** 边。

请你返回 **无法互相到达** 的不同 **点对数目** 。

# 题目分析

这道题是对图的连通块的一个基础应用。
连通块是指图中的一个区域，区域上的节点彼此可达【如示例 `1` 的图】。这道题要找到的是无法互相到达的不同点对数目。

那么我们可以以连通块为单位，**一个连通块的节点肯定是彼此可达的，而连通块之外的节点对于连通块上的节点来说都是不可达的**。因此我们如果知道一个连通块的节点有  `cnt` 个，那么连通块以外的节点就有 `n - cnt`，那么不可达的节点对就有 `cnt * (n - cnt)` 对。具体如下图所示：

![image.png](https://pic.leetcode.cn/1697859973-TbNpvu-image.png)

## 如何统计每个连通块的节点个数

我们可以通过深度优先搜索对每个连通块进行搜索，同时我们不重复搜索搜索过的节点【因为通过深度优先，搜索过的节点一定在某个连通块，已经进行了一次统计】。因此我们 **需要一个数组来标记** 每个节点是否搜索过。

# 代码

* []

```Java
class Solution {
    boolean[] visited;

    public long countPairs(int n, int[][] edges) {
        // 建图
        List<List<Integer>> links = new ArrayList<>();
        for(int i = 0; i < n; i++){
            links.add(new ArrayList<>());
        }
        for(int[] e: edges){
            links.get(e[0]).add(e[1]);
            links.get(e[1]).add(e[0]);
        }
        // 深度优先搜索
        visited = new boolean[n];   // 记录节点是否搜索过
        long res = 0;
        for(int i = 0; i < n; i++){
            if(visited[i])continue;     // 已搜索过的连通块的节点，跳过
            long cnt = dfs(i, links);   // 搜索节点所在的连通块的节点数
            res += cnt * (n - cnt);     // 一个连通块的所有节点和连通块以外的节点都互相不可达
        }
        return res / 2;     // 每个节点对被算了两次，除以2
    }

    private int dfs(int node, List<List<Integer>> links){
        visited[node] = true;   // 当前节点已经访问过了
        int cnt = 1;    // 统计从这个节点可达的不重复的节点个数，初始个数为一个，表示节点本身
        for(int next: links.get(node)){
            if(!visited[next])cnt += dfs(next, links);  // 递归搜索相邻节点的可达不重复节点个数
        }   // 深度优先搜索，找到这个节点所在的连通块的所有节点
        return cnt;
    }
}
```

* []

```Python
class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:
        self.visited = [False] * n   # 记录遍历过的节点
        # 建图
        links = [[] for _ in range(n)]
        for x, y in edges:
            links[x].append(y)
            links[y].append(x)
        # 深度优先搜索
        res = 0
        for i in range(n):
            if self.visited[i]: continue     # 已搜索过的连通块的节点，跳过
            cnt = self.dfs(i, links)   # 搜索节点所在的连通块的节点数
            res += cnt * (n - cnt)     # 一个连通块的所有节点和连通块以外的节点都互相不可达
        return res // 2     # 每个节点对被算了两次，除以2

    def dfs(self, node:int, links: List[List[int]]) -> int:
        self.visited[node] = True   # 标记当前节点已经访问过了
        cnt = 1     # 统计从这个节点可达的不重复的节点个数，初始个数为一个，表示节点本身
        # 深度优先搜索，找到这个节点所在的连通块的所有节点 
        for next_ in links[node]:
            if not self.visited[next_]: cnt += self.dfs(next_, links)    # 递归搜索相邻节点的可达不重复节点个数
        return cnt
```

* []

```C++
class Solution {
private:
    vector<bool> visited;   // 记录遍历过的节点

    int dfs(int node, vector<vector<int>>& links){
        visited[node] = true;   // 标记当前节点已经访问过了
        int cnt = 1;    // 统计从这个节点可达的不重复的节点个数，初始个数为一个，表示节点本身
        for(int next: links[node]){
            if(!visited[next])cnt += dfs(next, links);  // 递归搜索相邻节点的可达不重复节点个数
        }   // 深度优先搜索，找到这个节点所在的连通块的所有节点
        return cnt;
    }

public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        // 建图
        vector<vector<int>> links(n, vector<int>(0));
        for(auto e: edges){
            links[e[0]].emplace_back(e[1]);
            links[e[1]].emplace_back(e[0]);
        }
        // 深度优先搜索
        visited.resize(n);   // 记录节点是否搜索过
        long long res = 0;
        for(int i = 0; i < n; i++){
            if(visited[i])continue;     // 已搜索过的连通块的节点，跳过
            long cnt = dfs(i, links);   // 搜索节点所在的连通块的节点数
            res += cnt * (n - cnt);     // 一个连通块的所有节点和连通块以外的节点都互相不可达
        }
        return res / 2;     // 每个节点对被算了两次，除以2
    }
};

```

