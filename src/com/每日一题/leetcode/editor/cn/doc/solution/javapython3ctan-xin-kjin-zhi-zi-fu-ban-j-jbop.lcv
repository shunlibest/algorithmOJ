> [2663. 字典序最小的美丽字符串](https://leetcode.cn/problems/lexicographically-smallest-beautiful-string/)

[TOC]

# 题目

如果一个字符串满足以下条件，则称其为 **美丽字符串** ：

- 它由英语小写字母表的前 `k` 个字母组成。
- 它不包含任何长度为 `2` 或更长的回文子字符串。

给你一个长度为 `n` 的美丽字符串 `s` 和一个正整数 `k` 。

请你找出并返回一个长度为 `n` 的美丽字符串，该字符串还满足：在字典序大于 `s` 的所有美丽字符串中字典序最小。如果不存在这样的字符串，则返回一个空字符串。

对于长度相同的两个字符串 `a` 和 `b` ，如果字符串 `a` 在与字符串 `b` 不同的第一个位置上的字符字典序更大，则字符串 `a` 的字典序大于字符串 `b` 。

- 例如，`"abcd"` 的字典序比 `"abcc"` 更大，因为在不同的第一个位置（第四个字符）上 `d` 的字典序大于 `c` 。

# 题目分析

> 参考 [灵茶山艾府的题解 —— 《贪心》](https://leetcode.cn/problems/lexicographically-smallest-beautiful-string/solutions/2251229/tan-xin-pythonjavacgo-by-endlesscheng-yix5/?envType=daily-question&envId=2024-06-22)

## 思路分析

这道题是要找到比给定的美丽字符串 `s` **大的最小美丽字符串**，并且字符只能由小写字母表的前 `k` 个字符构成。同时字符串不能包含长度大于1的回文子串。

## 字符k进制

我们可以把由 `k` 个字符组成的字符串看作 `k` 进制，对应 `0-9` 组成的数字的十进制。

![image-20240622230319502.png](https://pic.leetcode.cn/1719070327-gNwAfx-image-20240622230319502.png)

根据**贪心策略**，我们要找到比给定的美丽字符串 `s` **大的最小美丽字符串**，那么相当于将字符串 `s + 1`，即从最后一个字符加 `1`。但是**由于加 `1`  后的字符串长度还必须为 `n`，说明最高位不能进位。**如果最高位需要进位，说明无法得到比给定的美丽字符串更大的字符串。

## 判定变化位置是否产生回文子串

说清楚了这个 `+1` 的过程，我们再来看，达成美丽字符串还有一个条件：不包含任何长度为 `2` 或更长的回文子字符串。回文串有这样的特点：如果范围 `s[a:b]` 是一个回文串，则 `s[a+1: b-1]`也一定是回文串；如果范围 `s[a:b]` 不是一个回文串，则 `s[a-1:b+1]`也一定不是回文串。

由于给定的字符串 `s` 本身是一个美丽字符串，一定不包含回文子串。如果产生回文子串，**则一定是 `+1` 操作带来某个字符 `s[i]` 的变化所产生成**。那么其一定构成某个长度为 `2` 或长度为 `3` 的回文子串，即 `s[i] = s[i - 1]` 或 `s[i] = s[i-2]`。

![image-20240622231316590.png](https://pic.leetcode.cn/1719070327-SkMCav-image-20240622231316590.png)

出现了上述情况，那么就只能对当前位执行 `+1`【注意是当前位执行 `+1`，而不是整个s执行+1】，跳过这个不合法的字符。

![image-20240622232117464.png](https://pic.leetcode.cn/1719070327-FoKGOb-image-20240622232117464.png)

如果当前位已经满足条件了，那么我们接下来就要将当前位右移继续校验。因为之所以我们当前处在当前位 `i` 这个位置，一定是从 `[i, n)` 这些都发生了改变并产生了进位1直到当前位 `i`，**所有发生改变的位值都要校验，所以当前位右移**。

![image-20240622232717380.png](https://pic.leetcode.cn/1719070327-oeyaRg-image-20240622232717380.png)

因为我们会后移继续校验，因此我们每次只要校验当前位 `s[i]` 和其左边的字符 `s[i-1], s[i-2]` 是否构成回文子串；即使 `s[i]` 和后面的字符构成回文串，也应该由右面的字符去校验。【**因为修改的越靠后的字符，最终得到的字符排序越小**】

# 代码

1. 上界字符 `up` 可以通过 `'a' + k - 1` 得到；【`[a, up]` 的字符个数等于 `up - a + 1` 等于 `k`，从而计算得到 `up`】

* []

```Java
class Solution {
    public String smallestBeautifulString(String s, int k) {
        char[] strArr = s.toCharArray();
        char up = (char)('a' + k - 1);      // 上界字符，需要进位的字符
        int n = s.length();
        int i = n - 1;   // 贪心处理
        while(i < n){
            // 将当前位 + 1 处理
            while(i >= 0 && strArr[i] == up){
                // 当前位到达上界，需要要进位处理
                strArr[i--] = 'a';
            }
            if(i == -1)return "";   // 首位都还要进1，则无法产生最大字符串
            strArr[i]++;    // 当前位 + 1    
            // 判断当前位是否和左侧字符构成回文串
            while(i < n && !(i > 0 && strArr[i] == strArr[i - 1] || i > 1 && strArr[i] == strArr[i - 2])){
                // 如果不构成，那么[0, i]都是合法字符，往后校验
                i++;
            }
            // 否则当前位就要继续执行 + 1 处理
        }
        return new String(strArr);  
    }
}
```

* []

```Python
class Solution:
    def smallestBeautifulString(self, s: str, k: int) -> str:
        # python的字符不能直接做加减，因此我们先将字符都转为ASCII码，最后再转回去
        a = ord('a')
        up = a + k - 1      # 上界字符，需要进位的字符
        n = len(s)
        i = n - 1   # 贪心处理
        sl = list(map(ord, s))     # 将原字符串每个字符转为ASCII码列表
        while i < n :
            # 将当前位 + 1 处理
            while i >= 0 and sl[i] == up:
                # 当前位到达上界，需要要进位处理
                sl[i] = a
                i -= 1

            if i == -1: return ""   # 首位都还要进1，则无法产生最大字符串
            sl[i] += 1    # 当前位 + 1    
            # 判断当前位是否和左侧字符构成回文串
            while i < n and not (i > 0 and sl[i] == sl[i - 1] or i > 1 and sl[i] == sl[i - 2]):
                # 如果不构成，那么[0, i]都是合法字符，往后校验
                i += 1
            # 否则当前位就要继续执行 + 1 处理
        # 将ASCII列表转回字符再拼接成字符串
        return ''.join(map(chr, sl))
```

* []

```C++
class Solution {
public:
    string smallestBeautifulString(string s, int k) {
        char up = 'a' + k - 1;      // 上界字符，需要进位的字符
        int n = s.size();
        int i = n - 1;   // 贪心处理
        while(i < n){
            // 将当前位 + 1 处理
            while(i >= 0 && s[i] == up){
                // 当前位到达上界，需要要进位处理
                s[i--] = 'a';
            }
            if(i == -1)return "";   // 首位都还要进1，则无法产生最大字符串
            s[i]++;    // 当前位 + 1    
            // 判断当前位是否和左侧字符构成回文串
            while(i < n && !(i > 0 && s[i] == s[i - 1] || i > 1 && s[i] == s[i - 2])){
                // 如果不构成，那么[0, i]都是合法字符，往后校验
                i++;
            }
            // 否则当前位就要继续执行 + 1 处理
        }
        return s;       
    }
};
```

