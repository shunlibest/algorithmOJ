# 记忆化递归

## 思路

对于 1 到 n（n > 1） 的数，我们先猜一次，最坏的情况是猜错。 因此需要比较猜错的两种情况（猜大了，猜小了）中最坏的情况的最小值。

即：

* py

```py
# 其中 i 指的是你选择的 1 到 n 之间的数字，ans 是我们需要返回的结果。
ans = min(ans, i + max(猜大了, 猜小了))
```

- 如果猜小了， 范围缩小到 [i + 1, n]
- 否则缩小到 [1, i - 1]

据此不难写出递归代码。

注意由于需要维护左右两个端点的信息， 因此我们需要扩充函数参数列表， 于是我新建了一个函数 dfs 来完成，具体见代码。之所以维护两个端点信息是因为区间 [0, 8] 和 区间 [2, 10] 的代价是不一样的。

我只给了记忆化递归，大家可以自行改写成 DP 形式。

## 代码

* py

```py
class Solution:
    def getMoneyAmount(self, n: int) -> int:
        @lru_cache(None)
        def dfs(l, r):
            if l == r: return 0
            if r - l == 1: return l
            ans = 0xffffff
            for  i in range(l, r + 1):
                ans  = min(ans, i + max(dfs(l, i - 1), dfs(i + 1, r)))
            return ans
        return dfs(1, n)
```

**复杂度分析**

- 时间复杂度：$O(N^2)$
- 空间复杂度：$O(N^2)$

大家也可以关注我的公众号《力扣加加》带你啃下算法这块硬骨头。
