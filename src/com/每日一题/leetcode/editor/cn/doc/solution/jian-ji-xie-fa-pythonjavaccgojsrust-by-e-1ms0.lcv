设 $\textit{word}$ 的长度为 $n$。遍历 $\textit{word}$，统计其中大写字母的个数 $\textit{cnt}$。

分类讨论：

- 如果 $\textit{cnt}=0$，说明所有字母均为小写，符合要求。
- 如果 $\textit{cnt}=n$，说明所有字母均为大写，符合要求。
- 如果 $\textit{cnt}=1$ 且 $\textit{word}[0]$ 是大写字母，说明 $\textit{word}$ 只有首字母大写，符合要求。
- 其余情况不符合要求。

* [sol-Python3]

```py
class Solution:
    def detectCapitalUse(self, word: str) -> bool:
        cnt = sum(c.isupper() for c in word)
        return cnt == 0 or cnt == len(word) or cnt == 1 and word[0].isupper()
```

* [sol-Python3库函数]

```py
class Solution:
    def detectCapitalUse(self, word: str) -> bool:
        return word.islower() or word.isupper() or word.istitle()
```

* [sol-Java]

```java
public class Solution {
    public boolean detectCapitalUse(String word) {
        int cnt = 0;
        for (char c : word.toCharArray()) {
            if (Character.isUpperCase(c)) {
                cnt++;
            }
        }
        return cnt == 0 || cnt == word.length() || cnt == 1 && Character.isUpperCase(word.charAt(0));
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    bool detectCapitalUse(string word) {
        int cnt = ranges::count_if(word, [](char c) { return isupper(c); });
        return cnt == 0 || cnt == word.length() || cnt == 1 && isupper(word[0]);
    }
};
```

* [sol-C]

```c
bool detectCapitalUse(char* word) {
    int cnt = 0;
    for (int i = 0; word[i]; i++) {
        if (isupper(word[i])) {
            cnt++;
        }
    }
    return cnt == 0 || cnt == strlen(word) || cnt == 1 && isupper(word[0]);
}
```

* [sol-Go]

```go
func detectCapitalUse(word string) bool {
    cnt := 0
    for _, c := range word {
        if unicode.IsUpper(c) {
            cnt++
        }
    }
    return cnt == 0 || cnt == len(word) || cnt == 1 && unicode.IsUpper(rune(word[0]))
}
```

* [sol-JS]

```js
var detectCapitalUse = function(word) {
    const cnt = _.sumBy(word, c => c === c.toUpperCase() ? 1 : 0);
    return cnt === 0 || cnt === word.length || cnt === 1 && word[0] === word[0].toUpperCase();
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn detect_capital_use(word: String) -> bool {
        let cnt = word.chars().filter(|&c| c.is_uppercase()).count();
        cnt == 0 || cnt == word.len() || cnt == 1 && word.chars().next().unwrap().is_uppercase()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 是 $\textit{word}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
