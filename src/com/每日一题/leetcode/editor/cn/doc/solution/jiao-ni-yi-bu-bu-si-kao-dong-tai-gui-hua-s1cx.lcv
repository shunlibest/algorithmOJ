## 本题视频讲解

请看[【基础算法精讲 18】](https://www.bilibili.com/video/BV16Y411v7Y6/)。如果这个视频对你有帮助，欢迎点赞关注！

## 一、递归搜索 + 保存计算结果 = 记忆化搜索

### 视频内容补充

设 $\textit{nums}$ 的元素和为 $s$，其中添加正号的元素之和为 $p$，其余添加负号的元素（绝对值）之和为 $q$，那么有

$$
p + q = s
$$

又因为表达式运算结果等于 $\textit{target}$，所以有

$$
p - q = \textit{target}
$$

解得

$$
\begin{cases}
p = \dfrac{s + \textit{target}}{2}     \\
q = \dfrac{s - \textit{target}}{2}     \\
\end{cases}
$$

- 如果 $\textit{target}\ge 0$，那么取 $q=\dfrac{s - \textit{target}}{2}$ 作为背包容量比 $p$ 更好。
- 如果 $\textit{target}< 0$，那么取 $p=\dfrac{s + \textit{target}}{2}$ 作为背包容量比 $q$ 更好。

综上所述，取

$$
\frac{s - |\textit{target}|}{2}
$$

作为 0-1 背包的背包容量是最优的。（注意 $\textit{target}$ 可以是负数）

### 答疑

**问**：`dfs(i - 1, c) + dfs(i - 1, c - nums[i])` 中的加法是什么意思？

**答**：这叫**加法原理**，如果事件 A 和事件 B 是互斥的（即不能同时发生，不选 $\textit{nums}[i]$ 的同时，又选了 $\textit{nums}[i]$），那么发生事件 A **或**事件 B 的总数等于事件 A 的数量加上事件 B 的数量。

* [sol-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        s = sum(nums) - abs(target)
        if s < 0 or s % 2:
            return 0
        m = s // 2  # 背包容量

        @cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
        def dfs(i: int, c: int) -> int:
            if i < 0:
                return 1 if c == 0 else 0
            if c < nums[i]:
                return dfs(i - 1, c)  # 只能不选
            return dfs(i - 1, c) + dfs(i - 1, c - nums[i])  # 不选 + 选
        return dfs(len(nums) - 1, m)
```

* [sol-Java]

```java
class Solution {
    private int[] nums;
    private int[][] memo;

    public int findTargetSumWays(int[] nums, int target) {
        int s = 0;
        for (int x : nums) {
            s += x;
        }
        s -= Math.abs(target);
        if (s < 0 || s % 2 == 1) {
            return 0;
        }
        int m = s / 2; // 背包容量

        this.nums = nums;
        int n = nums.length;
        memo = new int[n][m + 1];
        for (int[] row : memo) {
            Arrays.fill(row, -1); // -1 表示没有计算过
        }
        return dfs(n - 1, m);
    }

    private int dfs(int i, int c) {
        if (i < 0) {
            return c == 0 ? 1 : 0;
        }
        if (memo[i][c] != -1) { // 之前计算过
            return memo[i][c];
        }
        if (c < nums[i]) {
            return memo[i][c] = dfs(i - 1, c); // 只能不选
        }
        return memo[i][c] = dfs(i - 1, c) + dfs(i - 1, c - nums[i]); // 不选 + 选
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int s = reduce(nums.begin(), nums.end(), 0) - abs(target);
        if (s < 0 || s % 2) {
            return 0;
        }
        int m = s / 2; // 背包容量

        int n = nums.size();
        vector<vector<int>> memo(n, vector<int>(m + 1, -1)); // -1 表示没有计算过
        auto dfs = [&](auto&& dfs, int i, int c) -> int {
            if (i < 0) {
                return c == 0;
            }
            int& res = memo[i][c]; // 注意这里是引用
            if (res != -1) { // 之前计算过
                return res;
            }
            if (c < nums[i]) {
                return res = dfs(dfs, i - 1, c); // 只能不选
            }
            return res = dfs(dfs, i - 1, c) + dfs(dfs, i - 1, c - nums[i]); // 不选 + 选
        };
        return dfs(dfs, n - 1, m);
    }
};
```

* [sol-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    s := 0
    for _, x := range nums {
        s += x
    }
    s -= abs(target)
    if s < 0 || s%2 == 1 {
        return 0
    }
    m := s / 2 // 背包容量

    n := len(nums)
    memo := make([][]int, n)
    for i := range memo {
        memo[i] = make([]int, m+1)
        for j := range memo[i] {
            memo[i][j] = -1 // -1 表示没有计算过
        }
    }
    var dfs func(int, int) int
    dfs = func(i, c int) (res int) {
        if i < 0 {
            if c == 0 {
                return 1
            }
            return 0
        }
        p := &memo[i][c]
        if *p != -1 { // 之前计算过
            return *p
        }
        defer func() { *p = res }() // 记忆化
        if c < nums[i] {
            return dfs(i-1, c) // 只能不选
        }
        return dfs(i-1, c) + dfs(i-1, c-nums[i]) // 不选 + 选
    }
    return dfs(n-1, m)
}

func abs(x int) int { if x < 0 { return -x }; return x }
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm)$，其中 $n$ 为 $\textit{nums}$ 的长度，$m$ 为 $\textit{nums}$ 的元素和减去 $\textit{target}$ 的绝对值。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(nm)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以动态规划的时间复杂度为 $\mathcal{O}(nm)$。
- 空间复杂度：$\mathcal{O}(nm)$。保存多少状态，就需要多少空间。

## 二、1:1 翻译成递推

* [sol-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        s = sum(nums) - abs(target)
        if s < 0 or s % 2:
            return 0
        m = s // 2  # 背包容量

        n = len(nums)
        f = [[0] * (m + 1) for _ in range(n + 1)]
        f[0][0] = 1
        for i, x in enumerate(nums):
            for c in range(m + 1):
                if c < x:
                    f[i + 1][c] = f[i][c]  # 只能不选
                else:
                    f[i + 1][c] = f[i][c] + f[i][c - x]  # 不选 + 选
        return f[n][m]
```

* [sol-Java]

```java
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int s = 0;
        for (int x : nums) {
            s += x;
        }
        s -= Math.abs(target);
        if (s < 0 || s % 2 == 1) {
            return 0;
        }
        int m = s / 2; // 背包容量

        int n = nums.length;
        int[][] f = new int[n + 1][m + 1];
        f[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int c = 0; c <= m; c++) {
                if (c < nums[i]) {
                    f[i + 1][c] = f[i][c]; // 只能不选
                } else {
                    f[i + 1][c] = f[i][c] + f[i][c - nums[i]]; // 不选 + 选
                }
            }
        }
        return f[n][m];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int s = reduce(nums.begin(), nums.end(), 0) - abs(target);
        if (s < 0 || s % 2) {
            return 0;
        }
        int m = s / 2; // 背包容量

        int n = nums.size();
        vector<vector<int>> f(n + 1, vector<int>(m + 1));
        f[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int c = 0; c <= m; c++) {
                if (c < nums[i]) {
                    f[i + 1][c] = f[i][c]; // 只能不选
                } else {
                    f[i + 1][c] = f[i][c] + f[i][c - nums[i]]; // 不选 + 选
                }
            }
        }
        return f[n][m];
    }
};
```

* [sol-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    s := 0
    for _, x := range nums {
        s += x
    }
    s -= abs(target)
    if s < 0 || s%2 == 1 {
        return 0
    }
    m := s / 2 // 背包容量

    n := len(nums)
    f := make([][]int, n+1)
    for i := range f {
        f[i] = make([]int, m+1)
    }
    f[0][0] = 1
    for i, x := range nums {
        for c := 0; c <= m; c++ {
            if c < x {
                f[i+1][c] = f[i][c] // 只能不选
            } else {
                f[i+1][c] = f[i][c] + f[i][c-x] // 不选 + 选
            }
        }
    }
    return f[n][m]
}

func abs(x int) int { if x < 0 { return -x }; return x }
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm)$，其中 $n$ 为 $\textit{nums}$ 的长度，$m$ 为 $\textit{nums}$ 的元素和减去 $\textit{target}$ 的绝对值。
- 空间复杂度：$\mathcal{O}(nm)$。

## 三、空间优化：两个数组（滚动数组）

* [sol-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        s = sum(nums) - abs(target)
        if s < 0 or s % 2:
            return 0
        m = s // 2  # 背包容量

        n = len(nums)
        f = [[0] * (m + 1) for _ in range(2)]
        f[0][0] = 1
        for i, x in enumerate(nums):
            for c in range(m + 1):
                if c < x:
                    f[(i + 1) % 2][c] = f[i % 2][c]  # 只能不选
                else:
                    f[(i + 1) % 2][c] = f[i % 2][c] + f[i % 2][c - x]  # 不选 + 选
        return f[n % 2][m]
```

* [sol-Java]

```java
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int s = 0;
        for (int x : nums) {
            s += x;
        }
        s -= Math.abs(target);
        if (s < 0 || s % 2 == 1) {
            return 0;
        }
        int m = s / 2; // 背包容量

        int n = nums.length;
        int[][] f = new int[2][m + 1];
        f[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int c = 0; c <= m; c++) {
                if (c < nums[i]) {
                    f[(i + 1) % 2][c] = f[i % 2][c]; // 只能不选
                } else {
                    f[(i + 1) % 2][c] = f[i % 2][c] + f[i % 2][c - nums[i]]; // 不选 + 选
                }
            }
        }
        return f[n % 2][m];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int s = reduce(nums.begin(), nums.end(), 0) - abs(target);
        if (s < 0 || s % 2) {
            return 0;
        }
        int m = s / 2; // 背包容量

        int n = nums.size();
        vector<vector<int>> f(2, vector<int>(m + 1));
        f[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int c = 0; c <= m; c++) {
                if (c < nums[i]) {
                    f[(i + 1) % 2][c] = f[i % 2][c]; // 只能不选
                } else {
                    f[(i + 1) % 2][c] = f[i % 2][c] + f[i % 2][c - nums[i]]; // 不选 + 选
                }
            }
        }
        return f[n % 2][m];
    }
};
```

* [sol-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    s := 0
    for _, x := range nums {
        s += x
    }
    s -= abs(target)
    if s < 0 || s%2 == 1 {
        return 0
    }
    m := s / 2 // 背包容量

    n := len(nums)
    f := make([][]int, 2)
    for i := range f {
        f[i] = make([]int, m+1)
    }
    f[0][0] = 1
    for i, x := range nums {
        for c := 0; c <= m; c++ {
            if c < x {
                f[(i+1)%2][c] = f[i%2][c] // 只能不选
            } else {
                f[(i+1)%2][c] = f[i%2][c] + f[i%2][c-x] // 不选 + 选
            }
        }
    }
    return f[n%2][m]
}

func abs(x int) int { if x < 0 { return -x }; return x }
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm)$，其中 $n$ 为 $\textit{nums}$ 的长度，$m$ 为 $\textit{nums}$ 的元素和减去 $\textit{target}$ 的绝对值。
- 空间复杂度：$\mathcal{O}(m)$。

## 四、空间优化：一个数组

* [sol-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        s = sum(nums) - abs(target)
        if s < 0 or s % 2:
            return 0
        m = s // 2  # 背包容量

        f = [1] + [0] * m
        for x in nums:
            for c in range(m, x - 1, -1):
                f[c] += f[c - x]
        return f[m]
```

* [sol-Java]

```java
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int s = 0;
        for (int x : nums) {
            s += x;
        }
        s -= Math.abs(target);
        if (s < 0 || s % 2 == 1) {
            return 0;
        }
        int m = s / 2; // 背包容量

        int[] f = new int[m + 1];
        f[0] = 1;
        for (int x : nums) {
            for (int c = m; c >= x; c--) {
                f[c] += f[c - x];
            }
        }
        return f[m];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int s = reduce(nums.begin(), nums.end(), 0) - abs(target);
        if (s < 0 || s % 2) {
            return 0;
        }
        int m = s / 2; // 背包容量

        vector<int> f(m + 1);
        f[0] = 1;
        for (int x : nums) {
            for (int c = m; c >= x; c--) {
                f[c] += f[c - x];
            }
        }
        return f[m];
    }
};
```

* [sol-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    s := 0
    for _, x := range nums {
        s += x
    }
    s -= abs(target)
    if s < 0 || s%2 == 1 {
        return 0
    }
    m := s / 2

    f := make([]int, m+1)
    f[0] = 1
    for _, x := range nums {
        for c := m; c >= x; c-- {
            f[c] += f[c-x]
        }
    }
    return f[m]
}

func abs(x int) int { if x < 0 { return -x }; return x }
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm)$，其中 $n$ 为 $\textit{nums}$ 的长度，$m$ 为 $\textit{nums}$ 的元素和减去 $\textit{target}$ 的绝对值。
- 空间复杂度：$\mathcal{O}(m)$。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心（基本贪心策略/反悔/区间/字典序/数学/思维/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
