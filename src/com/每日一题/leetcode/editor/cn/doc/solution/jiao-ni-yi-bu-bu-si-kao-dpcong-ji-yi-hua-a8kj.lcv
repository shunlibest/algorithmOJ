## 一、寻找子问题

本题要构造长为 $n$ 的字符串 $s$，同时满足：

1. $s$ 至多包含 $1$ 个 $\texttt{A}$。
2. $s$ 不包含 $\texttt{LLL}$，也就是说，至多有 $2$ 个连续的 $\texttt{L}$。

**从右往左填入字母**。一开始，之前填过的字母不含 $\texttt{A}$，且上一个填的字母不是 $\texttt{L}$。

考虑 $s$ 的最后一个位置填什么字母：

- 填 $\texttt{P}$：问题变成，在之前填过的字母不含 $\texttt{A}$，且上一个填的字母不是 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $n-1$ 的字符串。
- 填 $\texttt{A}$：问题变成，在之前填过的字母包含 $\texttt{A}$，且上一个填的字母不是 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $n-1$ 的字符串。在这种情况下，后续位置不能填 $\texttt{A}$。
- 填 $\texttt{L}$：问题变成，在之前填过的字母不含 $\texttt{A}$，且上一个填的字母是 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $n-1$ 的字符串。如果继续填 $\texttt{L}$，问题变成，在之前填过的字母不含 $\texttt{A}$，且右边相邻位置有 $2$ 个连续 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $n-2$ 的字符串。在这种情况下，下一个位置不能填 $\texttt{L}$。

这些问题都是**和原问题相似的、规模更小的子问题**，可以用**递归**解决。

> 注：从右往左思考，主要是为了方便把递归翻译成递推。从左往右思考也是可以的。

## 二、状态定义与状态转移方程

因为要解决的问题都形如「在之前填过 $j$ 个 $\texttt{A}$，且右边相邻位置有 $k$ 个连续 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $i$ 的字符串」，所以用它作为本题的状态定义 $\textit{dfs}(i,j,k)$。

考虑长为 $i$ 的字符串的最后一个位置填什么字母：

- 填 $\texttt{P}$：问题变成，在之前填过 $j$ 个 $\texttt{A}$，且右边相邻位置有 $0$ 个连续 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $i-1$ 的字符串，即 $\textit{dfs}(i-1,j,0)$。
- 如果 $j=0$，那么可以填 $\texttt{A}$：问题变成，在之前填过 $1$ 个 $\texttt{A}$，且右边相邻位置有 $0$ 个连续 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $i-1$ 的字符串，即 $\textit{dfs}(i-1,1,0)$。
- 如果 $k<2$，那么可以填 $\texttt{L}$：问题变成，在之前填过 $j$ 个 $\texttt{A}$，且右边相邻位置有 $k+1$ 个连续 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $i-1$ 的字符串，即 $\textit{dfs}(i-1,j,k+1)$。

由于最后一个位置填的字母不同，所以三种情况互相独立，根据**加法原理**，将上述方案数相加，即为 $\textit{dfs}(i,j,k)$。

递归边界：$\textit{dfs}(0,j,k)=1$。如果能递归到 $i=0$ 的状态，说明我们找到了一个合法方案，返回 $1$。

递归入口：$\textit{dfs}(n,0,0)$，也就是答案。

## 三、递归搜索 + 保存递归返回值 = 记忆化搜索

考虑到整个递归过程中有大量重复递归调用（递归入参相同）。由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组中。
- 如果一个状态不是第一次遇到（$\textit{memo}$ 中保存的结果不等于 $\textit{memo}$ 的初始值），那么可以直接返回 $\textit{memo}$ 中保存的结果。

**注意**：$\textit{memo}$ 数组的**初始值**一定不能等于要记忆化的值！例如初始值设置为 $0$，并且要记忆化的 $\textit{dfs}(i,j,k)$ 也等于 $0$，那就没法判断 $0$ 到底表示第一次遇到这个状态，还是表示之前遇到过了，从而导致记忆化失效。一般把初始值设置为 $-1$。

本题方案数均为正数，初始化成 $0$ 也可以。

> Python 用户可以无视上面这段，直接用 `@cache` 装饰器。

具体请看视频讲解 [动态规划入门：从记忆化搜索到递推](https://www.bilibili.com/video/BV1Xj411K7oF/)，其中包含把记忆化搜索 1:1 翻译成递推的技巧。

注意要在 $\textit{dfs}$ 的中途取模，原理见 [模运算的世界：当加减乘除遇上取模](https://leetcode.cn/circle/discuss/mDfnkW/)。

代码实现时，可以把 $\textit{dfs}$ 写在外面，这样多个测试用例之间可以**共享**记忆化搜索的结果，效率更高。

* [sol-Python3]

```py
MOD = 1_000_000_007

@cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
def dfs(i: int, j: int, k: int) -> int:
    if i == 0:
        return 1
    res = dfs(i - 1, j, 0)
    if j == 0:
        res += dfs(i - 1, 1, 0)
    if k < 2:
        res += dfs(i - 1, j, k + 1)
    return res % MOD

class Solution:
    def checkRecord(self, n: int) -> int:
        return dfs(n, 0, 0)
```

* [sol-Java]

```java
class Solution {
    private static final int MOD = 1_000_000_007;
    private static final int MX = 100_001;
    private static final int[][][] memo = new int[MX][2][3];

    public int checkRecord(int n) {
        return dfs(n, 0, 0);
    }

    private static int dfs(int i, int j, int k) {
        if (i == 0) {
            return 1;
        }
        if (memo[i][j][k] > 0) { // 之前计算过
            return memo[i][j][k];
        }
        long res = dfs(i - 1, j, 0);
        if (j == 0) {
            res += dfs(i - 1, 1, 0);
        }
        if (k < 2) {
            res += dfs(i - 1, j, k + 1);
        }
        return memo[i][j][k] = (int) (res % MOD);
    }
}
```

* [sol-C++]

```cpp
const int MOD = 1'000'000'007;
const int MX = 100'001;

int memo[MX][2][3];

int dfs(int i, int j, int k) {
    if (i == 0) {
        return 1;
    }
    int& res = memo[i][j][k]; // 注意这里是引用
    if (res) {
        return res;
    }
    res = dfs(i - 1, j, 0);
    if (j == 0) {
        res = (res + dfs(i - 1, 1, 0)) % MOD;
    }
    if (k < 2) {
        res = (res + dfs(i - 1, j, k + 1)) % MOD;
    }
    return res;
};

class Solution {
public:
    int checkRecord(int n) {
        return dfs(n, 0, 0);
    }
};
```

* [sol-Go]

```go
const mod = 1_000_000_007
const mx = 100_001

var memo [mx][2][3]int

func dfs(i, j, k int) int {
    if i == 0 {
        return 1
    }
    p := &memo[i][j][k]
    if *p > 0 { // 之前计算过
        return *p
    }
    res := dfs(i-1, j, 0)
    if j == 0 {
        res += dfs(i-1, 1, 0)
    }
    if k < 2 {
        res += dfs(i-1, j, k+1)
    }
    *p = res % mod // 记忆化
    return *p
}

func checkRecord(n int) int {
    return dfs(n, 0, 0)
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(n)$，单个状态的计算时间为 $\mathcal{O}(1)$，所以总的时间复杂度为 $\mathcal{O}(n)$。
- 空间复杂度：$\mathcal{O}(n)$。保存多少状态，就需要多少空间。

## 四、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

具体来说，$f[i][j][k]$ 的定义和 $\textit{dfs}(i,j,k)$ 的定义是一样的，都表示在之前填过 $j$ 个 $\texttt{A}$，且右边相邻位置有 $k$ 个连续 $\texttt{L}$ 的情况下，继续填字母，能构造多少个长为 $i$ 的字符串。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 一样。

初始值 $f[0][j][k]=1$，翻译自递归边界 $\textit{dfs}(0,j,k)=1$。

答案为 $f[n][0][0]$，翻译自递归入口 $\textit{dfs}(n,0,0)$。

代码实现时，可以把 $f$ 数组和递推的计算过程写在外面，方便在多个测试用例之间**共享**，效率更高。

* [sol-Python3]

```py
MOD = 1_000_000_007
MX = 100_001

f = [[[0] * 3, [0] * 3] for _ in range(MX)]
f[0] = [[1] * 3, [1] * 3]
for i in range(1, MX):
    for j in range(2):
        for k in range(3):
            res = f[i - 1][j][0]
            if j == 0:
                res += f[i - 1][1][0]
            if k < 2:
                res += f[i - 1][j][k + 1]
            f[i][j][k] = res % MOD

class Solution:
    def checkRecord(self, n: int) -> int:
        return f[n][0][0]
```

* [sol-Java]

```java
class Solution {
    private static final int MOD = 1_000_000_007;
    private static final int MX = 100_001;
    private static final int[][][] f = new int[MX][2][3];

    static {
        f[0] = new int[][]{{1, 1, 1}, {1, 1, 1}};
        for (int i = 1; i < MX; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    long res = f[i - 1][j][0];
                    if (j == 0) {
                        res += f[i - 1][1][0];
                    }
                    if (k < 2) {
                        res += f[i - 1][j][k + 1];
                    }
                    f[i][j][k] = (int) (res % MOD);
                }
            }
        }
    }

    public int checkRecord(int n) {
        return f[n][0][0];
    }
}
```

* [sol-C++]

```cpp
const int MOD = 1'000'000'007;
const int MX = 100'001;

int f[MX][2][3];

auto init = [] {
    f[0][0][0] = f[0][0][1] = f[0][0][2] = f[0][1][0] = f[0][1][1] = f[0][1][2] = 1;
    for (int i = 1; i < MX; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 3; k++) {
                int& res = f[i][j][k];
                res = f[i - 1][j][0];
                if (j == 0) {
                    res = (res + f[i - 1][1][0]) % MOD;
                }
                if (k < 2) {
                    res = (res + f[i - 1][j][k + 1]) % MOD;
                }
            }
        }
    }
    return 0;
}();

class Solution {
public:
    int checkRecord(int n) {
        return f[n][0][0];
    }
};
```

* [sol-Go]

```go
const mod = 1_000_000_007
const mx = 100_001

var f [mx][2][3]int

func init() {
    f[0] = [2][3]int{{1, 1, 1}, {1, 1, 1}}
    for i := 1; i < mx; i++ {
        for j := 0; j < 2; j++ {
            for k := 0; k < 3; k++ {
                res := f[i-1][j][0]
                if j == 0 {
                    res += f[i-1][1][0]
                }
                if k < 2 {
                    res += f[i-1][j][k+1]
                }
                f[i][j][k] = res % mod
            }
        }
    }
}

func checkRecord(n int) int {
    return f[n][0][0]
}
```

#### 复杂度分析

- 时间复杂度：预处理 $\mathcal{O}(N)$，每次调用 $\texttt{checkRecord}$ 时 $\mathcal{O}(1)$。其中 $N=10^5$。
- 空间复杂度：预处理 $\mathcal{O}(N)$，每次调用 $\texttt{checkRecord}$ 时 $\mathcal{O}(1)$。

## 五、矩阵快速幂优化

为方便表示成矩阵乘法，首先把 $f$ 数组改成二维的，即用 $f[i][3j+k]$ 代替原来的 $f[i][j][k]$。

完整写出 $(j,k)=(0,0),(0,1),(0,2),(1,0),(1,1),(1,2)$ 分别对应的 $6$ 个状态转移方程：

$$
\begin{aligned}
f[i][0] &= f[i-1][0] + f[i-1][1] + f[i-1][3]     \\
f[i][1] &= f[i-1][0] + f[i-1][2] + f[i-1][3]     \\
f[i][2] &= f[i-1][0] + f[i-1][3]     \\
f[i][3] &= f[i-1][3] + f[i-1][4]     \\
f[i][4] &= f[i-1][3] + f[i-1][5]     \\
f[i][5] &= f[i-1][3]      \\
\end{aligned}
$$

用矩阵乘法表示，即

$$
\begin{bmatrix}
f[i][0] \\
f[i][1] \\
f[i][2] \\
f[i][3] \\
f[i][4] \\
f[i][5] \\
\end{bmatrix}
= \begin{bmatrix}
1 & 1 & 0 & 1 & 0 & 0 \\
1 & 0 & 1 & 1 & 0 & 0 \\
1 & 0 & 0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1 & 1 & 0 \\
0 & 0 & 0 & 1 & 0 & 1 \\
0 & 0 & 0 & 1 & 0 & 0 \\
\end{bmatrix}
\begin{bmatrix}
f[i-1][0] \\
f[i-1][1] \\
f[i-1][2] \\
f[i-1][3] \\
f[i-1][4] \\
f[i-1][5] \\
\end{bmatrix}
$$

把上式中的三个矩阵分别记作 $F[i],M,F[i-1]$，即

$$
F[i] = M\times F[i-1]
$$

那么有

$$
\begin{aligned}
F[n] ={} & M\times F[n-1]      \\
={} & M\times M\times F[n-2]        \\
={} & M\times M\times M\times  F[n-3]        \\
\vdots & \\
={} & M^n\times F[0]
\end{aligned}
$$

其中

$$
F[0] =
\begin{bmatrix}
1 \\
1 \\
1 \\
1 \\
1 \\
1 \\
\end{bmatrix}
$$

$M^n$ 可以用**快速幂**计算，原理请看[【图解】一张图秒懂快速幂](https://leetcode.cn/problems/powx-n/solution/tu-jie-yi-zhang-tu-miao-dong-kuai-su-mi-ykp3i/)。

由于答案 $f[n][0]$ 是 $F[n]$ 的第一项，根据矩阵乘法，其等于 $M^n$ 的第一行乘以 $F[0]$。由于 $F[0]$ 全为 $1$，答案也等于 $M^n$ 第一行的元素和。

* [sol-Python3]

```py
MOD = 1_000_000_007

# 返回矩阵 a 和矩阵 b 相乘的结果
def mul(a: List[List[int]], b: List[List[int]]) -> List[List[int]]:
    return [[sum(x * y for x, y in zip(row, col)) % MOD for col in zip(*b)]
            for row in a]

# 返回 n 个矩阵 a 相乘的结果
def pow(a: List[List[int]], n: int) -> List[List[int]]:
    size = len(a)
    res = [[0] * size for _ in range(size)]
    for i in range(size):
        res[i][i] = 1  # 单位矩阵
    while n:
        if n & 1:
            res = mul(res, a)
        a = mul(a, a)
        n >>= 1
    return res

class Solution:
    def checkRecord(self, n: int) -> int:
        m = [[1, 1, 0, 1, 0, 0],
             [1, 0, 1, 1, 0, 0],
             [1, 0, 0, 1, 0, 0],
             [0, 0, 0, 1, 1, 0],
             [0, 0, 0, 1, 0, 1],
             [0, 0, 0, 1, 0, 0]]
        return sum(pow(m, n)[0]) % MOD
```

* [sol-Java]

```java
class Solution {
    private static final int MOD = 1_000_000_007;
    private static final int SIZE = 6;

    public int checkRecord(int n) {
        int[][] m = {
            {1, 1, 0, 1, 0, 0},
            {1, 0, 1, 1, 0, 0},
            {1, 0, 0, 1, 0, 0},
            {0, 0, 0, 1, 1, 0},
            {0, 0, 0, 1, 0, 1},
            {0, 0, 0, 1, 0, 0},
        };
        int ans = 0;
        for (int x : pow(m, n)[0]) {
            ans = (ans + x) % MOD;
        }
        return ans;
    }

    // 返回 n 个矩阵 a 相乘的结果
    private int[][] pow(int[][] a, int n) {
        int[][] res = new int[SIZE][SIZE];
        for (int i = 0; i < SIZE; i++) {
            res[i][i] = 1; // 单位矩阵
        }
        while (n > 0) {
            if ((n & 1) > 0) {
                res = mul(res, a);
            }
            a = mul(a, a);
            n >>= 1;
        }
        return res;
    }

    // 返回矩阵 a 和矩阵 b 相乘的结果
    private int[][] mul(int[][] a, int[][] b) {
        int[][] c = new int[SIZE][SIZE];
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                for (int k = 0; k < SIZE; k++) {
                    c[i][j] = (int) ((c[i][j] + (long) a[i][k] * b[k][j]) % MOD);
                }
            }
        }
        return c;
    }
}
```

* [sol-C++]

```cpp
class Solution {
    static constexpr int MOD = 1'000'000'007;
    static constexpr int SIZE = 6;

    using matrix = array<array<int, SIZE>, SIZE>;

    // 返回矩阵 a 和矩阵 b 相乘的结果
    matrix mul(matrix& a, matrix& b) {
        matrix c{};
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                for (int k = 0; k < SIZE; k++) {
                    c[i][j] = (c[i][j] + (long long) a[i][k] * b[k][j]) % MOD;
                }
            }
        }
        return c;
    }

    // 返回 n 个矩阵 a 相乘的结果
    matrix pow(matrix a, int n) {
        matrix res = {};
        for (int i = 0; i < SIZE; i++) {
            res[i][i] = 1; // 单位矩阵
        }
        while (n) {
            if (n & 1) {
                res = mul(res, a);
            }
            a = mul(a, a);
            n >>= 1;
        }
        return res;
    }

public:
    int checkRecord(int n) {
        matrix m = {{
            {{1, 1, 0, 1, 0, 0}},
            {{1, 0, 1, 1, 0, 0}},
            {{1, 0, 0, 1, 0, 0}},
            {{0, 0, 0, 1, 1, 0}},
            {{0, 0, 0, 1, 0, 1}},
            {{0, 0, 0, 1, 0, 0}},
        }};
        matrix res = pow(m, n);
        int ans = 0;
        for (int x : res[0]) {
            ans = (ans + x) % MOD;
        }
        return ans;
    }
};
```

* [sol-Go]

```go
const mod = 1_000_000_007

type matrix [6][6]int

// 返回矩阵 a 和矩阵 b 相乘的结果
func (a matrix) mul(b matrix) matrix {
    c := matrix{}
    for i, row := range a {
        for j := range b[0] {
            for k, x := range row {
                c[i][j] = (c[i][j] + x*b[k][j]) % mod
            }
        }
    }
    return c
}

// 返回 n 个矩阵 a 相乘的结果
func (a matrix) pow(n int) matrix {
    res := matrix{}
    for i := range res {
        res[i][i] = 1 // 单位矩阵
    }
    for n > 0 {
        if n&1 > 0 {
            res = res.mul(a)
        }
        a = a.mul(a)
        n >>= 1
    }
    return res
}

var m = matrix{
    {1, 1, 0, 1, 0, 0},
    {1, 0, 1, 1, 0, 0},
    {1, 0, 0, 1, 0, 0},
    {0, 0, 0, 1, 1, 0},
    {0, 0, 0, 1, 0, 1},
    {0, 0, 0, 1, 0, 0},
}

func checkRecord(n int) (ans int) {
    for _, x := range m.pow(n)[0] {
        ans += x
    }
    return ans % mod
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(\log n)$。
- 空间复杂度：$\mathcal{O}(1)$。

## 相似题目

见 [动态规划题单](https://leetcode.cn/circle/discuss/tXLS3i/) 中的「**五、状态机 DP**」和「**§7.3 矩阵快速幂优化**」。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
