## 一、寻找子问题

为方便描述，将 $1$ 到 $n$ 的排列 $\textit{perm}$ 简记为 $p$。

假设 $n=5$。回顾枚举 [46. 全排列](https://leetcode.cn/problems/permutations/) 的思路（先不管整除的事情）：

- 枚举 $p_1$ 选哪个，它可以是 $1,2,3,4,5$，假设 $p_1 = 2$。
- 枚举 $p_2$ 选哪个，它不能是之前选过的数 $2$，可以是 $1,3,4,5$，假设 $p_2 = 4$。
- 枚举 $p_3$ 选哪个，它不能是之前选过的数 $2,4$，可以是 $1,3,5$，假设 $p_3 = 1$。
- 枚举 $p_4$ 选哪个，它不能是之前选过的数 $1,2,4$，可以是 $3,5$，假设 $p_4 = 5$。
- 枚举 $p_5$ 选哪个，它不能是之前选过的数 $1,2,4,5$，只能是 $3$，所以 $p_5 = 3$。
- 生成的排列为 $p = [2,4,1,5,3]$。

在这个过程中，我们需要知道：

- 哪些数不能选。这可以用一个集合 $S$ 存储选过的数。枚举 $p_i$ 的值，然后把 $p_i$ 加入集合 $S$。注意剩下能选的数变少了，所以要解决的问题规模也变小了。

在上面的例子中，对于 $p_3$ 而言，之前选过的数的集合 $S=\{2,4\}$，那么枚举：

- $p_3=1$，如果满足整除关系，那么接下来要解决的问题是：在 $S=\{1,2,4\}$ 的情况下，剩余数字可以构造的优美排列的数量。
- $p_3=3$，如果满足整除关系，那么接下来要解决的问题是：在 $S=\{2,3,4\}$ 的情况下，剩余数字可以构造的优美排列的数量。
- $p_3=5$，如果满足整除关系，那么接下来要解决的问题是：在 $S=\{2,4,5\}$ 的情况下，剩余数字可以构造的优美排列的数量。

由于这些都是**和原问题相似的、规模更小的子问题**，所以可以用**递归**解决。

> 注：动态规划有「选或不选」和「枚举选哪个」两种基本思考方式。在做题时，可根据题目要求，选择适合题目的一种来思考。本题用到的是「枚举选哪个」。

请注意上述过程中，会产生**重复子问题**，例如：

- 目前生成的排列是 $p = [2,4,1,\text{\_},\text{\_}]$，现在递归到倒数第二个位置，那么 $S=\{1,2,4\}$。
- 目前生成的排列是 $p = [4,2,1,\text{\_},\text{\_}]$，现在递归到倒数第二个位置，那么 $S=\{1,2,4\}$。

这样的重复子问题，是本题可以用 DP 优化的关键。换句话说，前面的排列具体长啥样，我们并不关心，**我们记录的是无序的集合，不是有序的列表**。

## 二、状态定义与状态转移方程

按照上面的讨论，定义 $\textit{dfs}(S)$ 表示在之前选过的数的集合为 $S$ 的情况下，剩余数字可以构造的优美排列的数量。

注意我们不需要添加参数 $i$，因为集合 $S$ 的大小加一就是 $i$。

考虑 $p_i$ 选什么：

- 枚举 $j=1,2,\cdots,n$ 且 $j\notin S$ 且 $i$ 和 $j$ 一个可以整除另一个。
- 要解决的问题变成：在之前选过的数的集合为 $S \cup \{j\}$ 的情况下，剩余数字可以构造的优美排列的数量，即 $\textit{dfs}(S \cup \{j\})$。

累加这些子问题，得

$$
\textit{dfs}(S) = \sum_{j} \textit{dfs}(S \cup \{j\})
$$

递归边界：$\textit{dfs}(U)=1$，其中全集 $U=\{1,2,\cdots n\}$。如果能递归到 $S=U$ 的状态，表示所有数都选完了，我们找到了一个合法排列。

递归入口：$\textit{dfs}(\varnothing)$，也就是答案。其中 $\varnothing$ 表示空集，因为一开始什么也没有选。

## 三、递归搜索 + 保存递归返回值 = 记忆化搜索

考虑到整个递归过程中有大量重复递归调用（递归入参相同）。由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组中。
- 如果一个状态不是第一次遇到（$\textit{memo}$ 中保存的结果不等于 $\textit{memo}$ 的初始值），那么可以直接返回 $\textit{memo}$ 中保存的结果。

**注意**：$\textit{memo}$ 数组的**初始值**一定不能等于要记忆化的值！例如初始值设置为 $0$，并且要记忆化的 $\textit{dfs}(S)$ 也等于 $0$，那就没法判断 $0$ 到底表示第一次遇到这个状态，还是表示之前遇到过了，从而导致记忆化失效。一般把初始值设置为 $-1$。

> Python 用户可以无视上面这段，直接用 `@cache` 装饰器。

具体请看视频讲解 [动态规划入门：从记忆化搜索到递推](https://www.bilibili.com/video/BV1Xj411K7oF/)，其中包含如何把记忆化搜索 1:1 翻译成递推的技巧。

代码实现时，用位运算实现集合操作，原理见 [从集合论到位运算，常见位运算技巧分类总结！](https://leetcode.cn/circle/discuss/CaOJ45/)对于本题来说，二进制的最低位表示 $1$，次低位表示 $2$，依此类推。

* [sol-Python3]

```py
class Solution:
    def countArrangement(self, n: int) -> int:
        u = (1 << n) - 1
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
        def dfs(s: int) -> int:
            if s == u:
                return 1
            res = 0
            i = s.bit_count() + 1
            for j in range(1, n + 1):
                if s >> (j - 1) & 1 == 0 and (i % j == 0 or j % i == 0):
                    res += dfs(s | (1 << (j - 1)))
            return res
        return dfs(0)
```

* [sol-Java]

```java
class Solution {
    public int countArrangement(int n) {
        int[] memo = new int[1 << n];
        Arrays.fill(memo, -1); // -1 表示没有计算过
        return dfs(0, n, memo);
    }

    private int dfs(int s, int n, int[] memo) {
        if (s == (1 << n) - 1) {
            return 1;
        }
        if (memo[s] != -1) { // 之前计算过
            return memo[s];
        }
        int res = 0;
        int i = Integer.bitCount(s) + 1;
        for (int j = 1; j <= n; j++) {
            if ((s >> (j - 1) & 1) == 0 && (i % j == 0 || j % i == 0)) {
                res += dfs(s | (1 << (j - 1)), n, memo);
            }
        }
        memo[s] = res; // 记忆化
        return res;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int countArrangement(int n) {
        vector<int> memo(1 << n, -1); // -1 表示没有计算过
        function<int(int)> dfs = [&](int s) -> int {
            if (s == (1 << n) - 1) {
                return 1;
            }
            int& res = memo[s]; // 注意这里是引用
            if (res != -1) { // 之前计算过
                return res;
            }
            res = 0;
            int i = __builtin_popcount(s) + 1;
            for (int j = 1; j <= n; j++) {
                if ((s >> (j - 1) & 1) == 0 && (i % j == 0 || j % i == 0)) {
                    res += dfs(s | (1 << (j - 1)));
                }
            }
            return res;
        };
        return dfs(0);
    }
};
```

* [sol-Go]

```go
func countArrangement(n int) int {
    memo := make([]int, 1<<n)
    for i := range memo {
        memo[i] = -1 // -1 表示没有计算过
    }
    var dfs func(int) int
    dfs = func(s int) int {
        if s == 1<<n-1 {
            return 1
        }
        p := &memo[s]
        if *p != -1 { // 之前计算过
            return *p
        }
        res := 0
        i := bits.OnesCount(uint(s)) + 1
        for j := 1; j <= n; j++ {
            if s>>(j-1)&1 == 0 && (i%j == 0 || j%i == 0) {
                res += dfs(s | 1<<(j-1))
            }
        }
        *p = res // 记忆化
        return res
    }
    return dfs(0)
}
```

* [sol-JavaScript]

```js
var countArrangement = function(n) {
    const memo = Array(1 << n).fill(-1); // -1 表示没有计算过
    function dfs(s) {
        if (s === (1 << n) - 1) {
            return 1;
        }
        if (memo[s] !== -1) { // 之前计算过
            return memo[s];
        }
        let res = 0;
        const i = bitCount32(s) + 1;
        for (let j = 1; j <= n; j++) {
            if ((s >> (j - 1) & 1) === 0 && (i % j === 0 || j % i === 0)) {
                res += dfs(s | (1 << (j - 1)));
            }
        }
        memo[s] = res; // 记忆化
        return res;
    }
    return dfs(0);
};

function bitCount32(n) {
    n = n - ((n >> 1) & 0x55555555);
    n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
}
```

* [sol-Rust]

```rust
impl Solution {
    pub fn count_arrangement(n: i32) -> i32 {
        fn dfs(s: usize, n: i32, memo: &mut Vec<i32>) -> i32 {
            if s == (1 << n) - 1 {
                return 1;
            }
            if memo[s] != -1 { // 之前计算过
                return memo[s];
            }
            let mut res = 0;
            let i = s.count_ones() as i32 + 1;
            for j in 1..=n {
                if (s >> (j - 1) & 1) == 0 && (i % j == 0 || j % i == 0) {
                    res += dfs(s | (1 << (j - 1)), n, memo);
                }
            }
            memo[s] = res; // 记忆化
            res
        }
        let mut memo = vec![-1; 1 << n]; // -1 表示没有计算过
        dfs(0, n, &mut memo)
    }
}
```

也可以反过来，定义 $\textit{dfs}(S)$ 表示在可以选的数字集合为 $S$ 的情况下，可以构造的优美排列的数量。

定义 $i$ 等于集合 $S$ 的大小。

考虑 $p_i$ 选什么：

- 枚举 $j\in S$ 且 $i$ 和 $j$ 一个可以整除另一个。
- 要解决的问题变成：在可以选的数字集合为 $S \setminus \{j\}$ 的情况下，可以构造的优美排列的数量，即 $\textit{dfs}(S \setminus \{j\})$。

累加这些子问题，得

$$
\textit{dfs}(S) = \sum_{j} \textit{dfs}(S \setminus \{j\})
$$

递归边界：$\textit{dfs}(\varnothing)=1$。如果能递归到 $S=\varnothing$ 的状态，表示所有数都选完了，我们找到了一个合法排列。

递归入口：$\textit{dfs}(U)$，也就是答案。一开始每个数都可以选。

* [sol-Python3]

```py
class Solution:
    def countArrangement(self, n: int) -> int:
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
        def dfs(s: int) -> int:
            if s == 0:
                return 1
            res = 0
            i = s.bit_count()
            for j in range(1, n + 1):
                if s >> (j - 1) & 1 and (i % j == 0 or j % i == 0):
                    res += dfs(s ^ (1 << (j - 1)))
            return res
        return dfs((1 << n) - 1)
```

* [sol-Java]

```java
class Solution {
    public int countArrangement(int n) {
        int[] memo = new int[1 << n];
        Arrays.fill(memo, -1); // -1 表示没有计算过
        return dfs((1 << n) - 1, n, memo);
    }

    private int dfs(int s, int n, int[] memo) {
        if (s == 0) {
            return 1;
        }
        if (memo[s] != -1) { // 之前计算过
            return memo[s];
        }
        int res = 0;
        int i = Integer.bitCount(s);
        for (int j = 1; j <= n; j++) {
            if ((s >> (j - 1) & 1) != 0 && (i % j == 0 || j % i == 0)) {
                res += dfs(s ^ (1 << (j - 1)), n, memo);
            }
        }
        memo[s] = res; // 记忆化
        return res;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int countArrangement(int n) {
        vector<int> memo(1 << n, -1); // -1 表示没有计算过
        function<int(int)> dfs = [&](int s) -> int {
            if (s == 0) {
                return 1;
            }
            int& res = memo[s]; // 注意这里是引用
            if (res != -1) { // 之前计算过
                return res;
            }
            res = 0;
            int i = __builtin_popcount(s);
            for (int j = 1; j <= n; j++) {
                if (s >> (j - 1) & 1 && (i % j == 0 || j % i == 0)) {
                    res += dfs(s ^ (1 << (j - 1)));
                }
            }
            return res;
        };
        return dfs((1 << n) - 1);
    }
};
```

* [sol-Go]

```go
func countArrangement(n int) int {
    memo := make([]int, 1<<n)
    for i := range memo {
        memo[i] = -1 // -1 表示没有计算过
    }
    var dfs func(int) int
    dfs = func(s int) int {
        if s == 0 {
            return 1
        }
        p := &memo[s]
        if *p != -1 { // 之前计算过
            return *p
        }
        res := 0
        i := bits.OnesCount(uint(s))
        for j := 1; j <= n; j++ {
            if s>>(j-1)&1 != 0 && (i%j == 0 || j%i == 0) {
                res += dfs(s ^ 1<<(j-1))
            }
        }
        *p = res // 记忆化
        return res
    }
    return dfs(1<<n - 1)
}
```

* [sol-JavaScript]

```js
var countArrangement = function(n) {
    const memo = Array(1 << n).fill(-1); // -1 表示没有计算过
    function dfs(s) {
        if (s === 0) {
            return 1;
        }
        if (memo[s] !== -1) { // 之前计算过
            return memo[s];
        }
        let res = 0;
        const i = bitCount32(s);
        for (let j = 1; j <= n; j++) {
            if (s >> (j - 1) & 1 && (i % j === 0 || j % i === 0)) {
                res += dfs(s ^ (1 << (j - 1)));
            }
        }
        memo[s] = res; // 记忆化
        return res;
    }
    return dfs((1 << n) - 1);
};

function bitCount32(n) {
    n = n - ((n >> 1) & 0x55555555);
    n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
}
```

* [sol-Rust]

```rust
impl Solution {
    pub fn count_arrangement(n: i32) -> i32 {
        fn dfs(s: usize, n: i32, memo: &mut Vec<i32>) -> i32 {
            if s == 0 {
                return 1;
            }
            if memo[s] != -1 { // 之前计算过
                return memo[s];
            }
            let mut res = 0;
            let i = s.count_ones() as i32;
            for j in 1..=n {
                if (s >> (j - 1) & 1) != 0 && (i % j == 0 || j % i == 0) {
                    res += dfs(s ^ (1 << (j - 1)), n, memo);
                }
            }
            memo[s] = res; // 记忆化
            res
        }
        let mut memo = vec![-1; 1 << n]; // -1 表示没有计算过
        dfs((1 << n) - 1, n, &mut memo)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n2^n)$。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题状态个数等于 $\mathcal{O}(2^n)$，单个状态的计算时间为 $\mathcal{O}(n)$，所以动态规划的时间复杂度为 $\mathcal{O}(n2^n)$。
- 空间复杂度：$\mathcal{O}(2^n)$。保存多少状态，就需要多少空间。

## 四、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

具体来说，$f[S]$ 的定义和 $\textit{dfs}(S)$ 的定义是一样的，都表示在可以选的数字集合为 $S$ 的情况下，可以构造的优美排列的数量。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 一样：

$$
f[S] = \sum_{j} f[S \setminus \{j\}]
$$

其中 $j\in S$ 且 $i$ 和 $j$ 一个可以整除另一个。

初始值 $f[\varnothing]=1$，翻译自递归边界 $\textit{dfs}(\varnothing)=1$。

答案为 $f[U]$，翻译自递归入口 $\textit{dfs}(U)$。

* [sol-Python3]

```py
class Solution:
    def countArrangement(self, n: int) -> int:
        f = [0] * (1 << n)
        f[0] = 1
        for s in range(1, 1 << n):
            i = s.bit_count()
            for j in range(1, n + 1):
                if s >> (j - 1) & 1 and (i % j == 0 or j % i == 0):
                    f[s] += f[s ^ (1 << (j - 1))]
        return f[-1]
```

* [sol-Java]

```java
class Solution {
    public int countArrangement(int n) {
        int[] f = new int[1 << n];
        f[0] = 1;
        for (int s = 1; s < 1 << n; s++) {
            int i = Integer.bitCount(s);
            for (int j = 1; j <= n; j++) {
                if ((s >> (j - 1) & 1) != 0 && (i % j == 0 || j % i == 0)) {
                    f[s] += f[s ^ (1 << (j - 1))];
                }
            }
        }
        return f[(1 << n) - 1];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int countArrangement(int n) {
        vector<int> f(1 << n);
        f[0] = 1;
        for (int s = 1; s < 1 << n; s++) {
            int i = __builtin_popcount(s);
            for (int j = 1; j <= n; j++) {
                if (s >> (j - 1) & 1 && (i % j == 0 || j % i == 0)) {
                    f[s] += f[s ^ (1 << (j - 1))];
                }
            }
        }
        return f.back();
    }
};
```

* [sol-Go]

```go
func countArrangement(n int) int {
    f := make([]int, 1<<n)
    f[0] = 1
    for s := 1; s < 1<<n; s++ {
        i := bits.OnesCount(uint(s))
        for j := 1; j <= n; j++ {
            if s>>(j-1)&1 != 0 && (i%j == 0 || j%i == 0) {
                f[s] += f[s^1<<(j-1)]
            }
        }
    }
    return f[1<<n-1]
}
```

* [sol-JavaScript]

```js
var countArrangement = function(n) {
    const f = Array(1 << n).fill(0);
    f[0] = 1;
    for (let s = 1; s < 1 << n; s++) {
        const i = bitCount32(s);
        for (let j = 1; j <= n; j++) {
            if (s >> (j - 1) & 1 && (i % j === 0 || j % i === 0)) {
                f[s] += f[s ^ (1 << (j - 1))];
            }
        }
    }
    return f[(1 << n) - 1];
};

function bitCount32(n) {
    n = n - ((n >> 1) & 0x55555555);
    n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
}
```

* [sol-Rust]

```rust
impl Solution {
    pub fn count_arrangement(n: i32) -> i32 {
        let mut f = vec![0; 1 << n];
        f[0] = 1;
        for s in 1..f.len() {
            let i = s.count_ones() as i32;
            for j in 1..=n {
                if (s >> (j - 1) & 1) != 0 && (i % j == 0 || j % i == 0) {
                    f[s] += f[s ^ (1 << (j - 1))];
                }
            }
        }
        f[f.len() - 1]
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n2^n)$。
- 空间复杂度：$\mathcal{O}(2^n)$。

## 相似题目

见 [动态规划题单](https://leetcode.cn/circle/discuss/tXLS3i/) 中的「§9.1 排列型 ① 相邻无关」。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
