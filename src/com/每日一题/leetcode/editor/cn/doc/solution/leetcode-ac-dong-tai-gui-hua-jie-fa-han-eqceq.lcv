> 欢迎大家关注我的 LeetCode 代码仓库：https://github.com/yanglr/leetcode-ac
> 几乎所有题目都会提供多种解法，真诚求star！

## 解题思路

### 算法选取

由于数据规模是 $1 <= n <= 10^9$, 时间复杂度 ≥ O(n)的算法可能会超时。
故只能使用 O(log n) 或 O(1)的算法了。

本题可以考虑用动态规划求解，这个题后面分析会发现类似于**斐波那契数列**，后面的代码提供了 C++ 和 Java的实现。

**dp数组:**

用f(i) 表示长度为i 的不含有连续1的二进制数(范围是 i个0 ~ i个1) 的个数。

**f(i)与前面几项的关系怎么找？**
f(i)相当于每次在f(i-1)表示的那些数的前面补1个0或1, f1, f2, f3, f4可以列表如下:

![image.png](https://pic.leetcode-cn.com/1631450358-chkQRA-image.png)

多列出几个，就可以发现规律了: `f(i) = f(i-1) + f(i-2)`

### 对于一个给定的数，如何做到不重、不漏地统计满足要求的数的个数?

我们的总体原则是想要**不重、不漏，且不能大于输入的数n**。
固定一部分，考虑剩下的位有多少种可能性。

将一个数转为二进制格式，从最高有效位（即从左到右）开始扫描。
如果我们发现右边每出现一次 1xxxx(1后有k个digit, 每个x表示0或1)样子的连续数字，满足不含有连续1的二进制数的总个数count 就需要增加f(k)，因为我们可以在这个数字上放一个'0'，后面放任意一个有效长度为k的字符串；之后，我们继续循环考虑剩下的情况，也就是说，我们在这个digit上放一个'1'。如果发现有连续的1，我们就退出循环并返回答案。在循环结束时，我们返回count+1，包括数字n本身。

例如，如果n是10010110，接下来需要找到比n小的且没有连续1的数:
1. 我们**只把第1个有效位1换为0**，这个1后面怎么放数字，都会比n小，其中最大的数是末尾7位都是“1”的数，这些数可以用范围 00000000-01111111表示，其中满足不含有连续1的二进制数的个数为 f(7)。
2. 我们**只把第2个有效位1换为0**，这个1后面怎么放数字，都会比n小，其中最大的数是末尾4位都是“1”的数，这些数可以用范围 10000000-10001111表示，数的个数为 0000-1111，其中满足不含有连续1的二进制数的个数为f(4)。
3. 我们**只把第3个有效位1换为0**，这个1后面怎么放数字，都会比n小，其中最大的数是末尾2位都是“1”的数，这些数可以用范围10010000-10010011表示，数的个数为 00~11，其中满足不含有连续1的二进制数的个数为f(2)。
4. 我们**只把第4个有效位1换为0**，这个1后面怎么放数字，都会比n小，其中最大的数是末尾1位是“1”的数，些数可以用范围 10010100-10010101表示，数的个数为 0~1，其中满足不含有连续1的二进制数的个数为f(1)。

结合下图看更直观~

**ps**: 数的二进制表示中有几个1(比如，有k个1)，这里就有几个(k个)步骤。

接下来的操作是需要在二进制数 1001011x 上做变换的，但1001011x已出现连续的1，非法了，故不进入计数。

![image.png](https://pic.leetcode-cn.com/1631336206-KIdIcj-image.png)

## 已AC的代码如下:

* []

```C++
class Solution {
public:
    int findIntegers(int n) {
        vector<int> f(32);
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; i++)
            f[i] = f[i - 1] + f[i - 2];
        string numStr = toBinary(n);
        int res = 0;
        for (int i = 0; i < numStr.size(); i++) {
            if (numStr[i] == '0') /* 选出numStr[i] = '1'的digit */
                continue;
            res += f[numStr.size() - i - 1];
            if (i != 0 && numStr[i - 1] == '1')
                return res;
        }
        return res + 1;
    }
    string toBinary(long n)  /* 非负整数转二进制表示的字符串 */
    {
        string res = "";
        while (n > 0)
        {
            char r = n % 2 + '0';
            res.push_back(r);     /* 记住: 放进去的结果会导致低位在前, 高位在后 */
            n /= 2;
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
```

* []

```Java
class Solution {
    public int findIntegers(int num) {
        int[] dp = new int[32];
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < 32; i++)
            dp[i] = dp[i - 1] + dp[i - 2];
        String numStr = getBinary(num);
        int res = 0;
        for (int i = 0; i < numStr.length(); i++) {
            if (numStr.charAt(i) == '0')
                continue;
            res += dp[numStr.length() - i - 1];
            if (i != 0 && numStr.charAt(i - 1) == '1')
                return res;
        }
        return res + 1;
    }
    // 将非负整数转为二进制字符串
    private String getBinary(int num) {
        StringBuilder sb = new StringBuilder();
        while (num > 0)
        {
            sb.insert(0, num & 1);
            num >>= 1;
        }
        return sb.toString();
    }
}
```

<br />

## 时间复杂度优化, 时间复杂度超过了100% 的提交

接下来, 试了一下不转为字符串做后续操作, 后续处理都改用位运算, 运行时间超过了100% 的提交。

### 已AC的C++代码为:

* cpp

```cpp
class Solution {
public:
    int findIntegers(int num) {
        int f[32];
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; ++i)
            f[i] = f[i - 1] + f[i - 2];
        int res = 0;
        int preBit = 0; // 记录当前digit的前一个digit
        int k = 30;     // 指针k, 从二进制数的末位开始向前移动
        while (k >= 0)
        {
            if (num & (1 << k)) // 从低位向高位扫描, 判断第k位是否为1
            {
                res += f[k];
                if (preBit) return res; // 出现了连续的1, 直接返回res
                preBit = 1; // 当前digit是1, 将preBit更新为当前digit 1, 为下一轮迭代做准备
            }
            else preBit = 0;

            --k;
        }
        return res + 1; // 算上 num 本身
    }
};
```

#### 运行结果:

![image.png](https://pic.leetcode-cn.com/1631339184-xanjPs-image.png)

<br />

## 空间复杂度优化, 空间复杂度超过了97.89% 的提交

不用dp数组，直接用临时变量可以吗？当然可以。

### 已AC的C++代码为:

* cpp

```cpp
class Solution {
public:
    int findIntegers(int num) {      
        int res = 0;
        int preBit = 0; // 记录当前digit的前一个digit
        int k = 30;     // 指针k, 从二进制数的末位开始向前移动
        while (k >= 0)
        {
            if (num & (1 << k)) // 从低位向高位扫描, 判断第k位是否为1
            {
                res += getF(k);
                if (preBit) return res; // 出现了连续的1, 直接返回res
                preBit = 1; // 将preBit更新为当前digit 1, 为下一轮迭代做准备
            }
            else preBit = 0;

            --k;
        }
        return res + 1; // 算上 num 本身
    }
    int getF(int k) /* 计算f(k) */
    {
        int f_i_1 = 1, f_i_2 = 2, f_i_3 = 3;
        if (k == 0) return f_i_1;
        if (k == 1) return f_i_2;      
        for (int i = 2; i <= k; i++)  /* 已知f1, 求fn总共需要迭代n-1+1-maxIndexGap(2) = n-2 次 */
        {
            // f_n = f_n-1 + f_n-2
            f_i_3 = f_i_2 + f_i_1;
            f_i_1 = f_i_2;
            f_i_2 = f_i_3;
        }
        return f_i_3;         
    }
};
```

#### 运行结果:

![image.png](https://pic.leetcode-cn.com/1631339976-egwFto-image.png)

---

大家好，我是**极客学长**，点击[我的头像](https://github.com/yanglr/leetcode-ac)，查看力扣详细刷题攻略，你会发现相见恨晚！

**如果感觉题解对你有帮助，不要吝啬给一个👍吧！**

<br />

好了，**AC一时爽，一直AC一直爽**！

**ps:** 仓库的代码中可以直接拿来本地调试喔，框架已搭好，根据自己的需求调整 test case即可~

<br />

**参考:**
C++, Non-DP, O(32) Fibonacci solution
https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/discuss/103754/C%2B%2B-Non-DP-O(32)-Fibonacci-solution

https://www.bilibili.com/video/BV1bb4y1X7ZL - 郭郭

