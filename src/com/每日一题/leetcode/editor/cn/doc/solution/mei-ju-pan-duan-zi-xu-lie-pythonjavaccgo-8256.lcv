我们需要枚举每个字符串的**所有**子序列吗？

不需要，因为子序列越长，越不可能是其它字符串的子序列。所以只需要枚举字符串 $s=\textit{strs}[i]$，判断 $s$ 是否为其它字符串的子序列，如果不是，则用 $s$ 的长度更新答案的最大值。

如何判断 $s$ 是否为 $t$ 的子序列？见 [392. 判断子序列的题解](https://leetcode.cn/problems/is-subsequence/solution/jian-ji-xie-fa-pythonjavaccgojsrust-by-e-mz22/)

## 写法一

* [sol-Python3]

```py
class Solution:
    def findLUSlength(self, strs: List[str]) -> int:
        # 判断 s 是否为 t 的子序列
        def is_subseq(s: str, t: str) -> bool:
            i = 0
            for c in t:
                if s[i] == c:
                    i += 1
                    if i == len(s):  # 所有字符匹配完毕
                        return True  # s 是 t 的子序列
            return False

        ans = -1
        for i, s in enumerate(strs):
            if len(s) > ans and \
               all(j == i or not is_subseq(s, t) for j, t in enumerate(strs)):
                ans = len(s)
        return ans
```

* [sol-Java]

```java
class Solution {
    public int findLUSlength(String[] strs) {
        int ans = -1;
        next:
        for (int i = 0; i < strs.length; i++) {
            if (strs[i].length() <= ans) { // 不会让 ans 变大
                continue;
            }
            for (int j = 0; j < strs.length; j++) {
                if (j != i && isSubseq(strs[i], strs[j])) {
                    continue next;
                }
            }
            ans = strs[i].length();
        }
        return ans;
    }

    // 判断 s 是否为 t 的子序列
    private boolean isSubseq(String s, String t) {
        int i = 0;
        for (char c : t.toCharArray()) {
            if (s.charAt(i) == c && ++i == s.length()) { // 所有字符匹配完毕
                return true; // s 是 t 的子序列
            }
        }
        return false;
    }
}
```

* [sol-C++]

```cpp
class Solution {
    // 判断 s 是否为 t 的子序列
    bool isSubseq(string& s, string& t) {
        int i = 0;
        for (char c : t) {
            if (s[i] == c && ++i == s.length()) { // 所有字符匹配完毕
                return true; // s 是 t 的子序列
            }
        }
        return false;
    }

public:
    int findLUSlength(vector<string>& strs) {
        int ans = -1;
        for (int i = 0; i < strs.size(); i++) {
            if ((int) strs[i].length() <= ans) { // 不会让 ans 变大
                continue;
            }
            for (int j = 0; j < strs.size(); j++) {
                if (j != i && isSubseq(strs[i], strs[j])) {
                    goto next;
                }
            }
            ans = strs[i].length();
            next:;
        }
        return ans;
    }
};
```

* [sol-C]

```c
// 返回 s 是否为 t 的子序列
bool isSubseq(const char* s, const char* t) {
    int i = 0;
    for (int j = 0; t[j]; j++) {
        if (s[i] == t[j] && !s[++i]) { // 所有字符匹配完毕
            return true; // s 是 t 的子序列
        }
    }
    return false;
}

int findLUSlength(char** strs, int strsSize) {
    int ans = -1;
    for (int i = 0; i < strsSize; i++) {
        int m = strlen(strs[i]);
        if (m <= ans) { // 不会让 ans 变大
            continue;
        }
        for (int j = 0; j < strsSize; j++) {
            if (j != i && isSubseq(strs[i], strs[j])) {
                goto next;
            }
        }
        ans = m;
        next:;
    }
    return ans;
}
```

* [sol-Go]

```go
// 返回 s 是否为 t 的子序列
func isSubseq(s, t string) bool {
    i := 0
    for _, c := range t {
        if s[i] == byte(c) {
            i++
            if i == len(s) { // 所有字符匹配完毕
                return true // s 是 t 的子序列
            }
        }
    }
    return false
}

func findLUSlength(strs []string) int {
    ans := -1
next:
    for i, s := range strs {
        if len(s) <= ans { // 不会让 ans 变大
            continue
        }
        for j, t := range strs {
            if j != i && isSubseq(s, t) {
                continue next
            }
        }
        ans = len(strs[i])
    }
    return ans
}
```

* [sol-JavaScript]

```js
// 返回 s 是否为 t 的子序列
var isSubseq = function(s, t) {
    let i = 0;
    for (const c of t) {
        if (s[i] === c && ++i === s.length) { // 所有字符匹配完毕
            return true; // s 是 t 的子序列
        }
    }
    return false;
};

var findLUSlength = function(strs) {
    let ans = -1;
    next: for (let i = 0; i < strs.length; i++) {
        const s = strs[i];
        if (s.length <= ans) { // 不会让 ans 变大
            continue;
        }
        for (let j = 0; j < strs.length; j++) {
            if (j !== i && isSubseq(s, strs[j])) {
                continue next;
            }
        }
        ans = s.length;
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    // 返回 s 是否为 t 的子序列
    fn is_subseq(s: &[u8], t: &str) -> bool {
        let mut i = 0;
        for c in t.bytes() {
            if s[i] == c {
                i += 1;
                if i == s.len() { // 所有字符匹配完毕
                    return true; // s 是 t 的子序列
                }
            }
        }
        false
    }

    pub fn find_lu_slength(strs: Vec<String>) -> i32 {
        let mut ans = -1;
        'next:
        for (i, s) in strs.iter().enumerate() {
            if s.len() as i32 <= ans { // 不会让 ans 变大
                continue;
            }
            let s = s.as_bytes();
            for (j, t) in strs.iter().enumerate() {
                if j != i && Self::is_subseq(s, t) {
                    continue 'next;
                }
            }
            ans = s.len() as i32;
        }
        ans
    }
}
```

## 写法二

也可以先把 $\textit{strs}$ 按照长度从大到小排序。一旦枚举到符合要求的字符串，就立刻返回其长度。如果没有符合要求的字符串，返回 $-1$。

* [sol-Python3]

```py
class Solution:
    def findLUSlength(self, strs: List[str]) -> int:
        # 判断 s 是否为 t 的子序列
        def is_subseq(s: str, t: str) -> bool:
            i = 0
            for c in t:
                if s[i] == c:
                    i += 1
                    if i == len(s):  # 所有字符匹配完毕
                        return True  # s 是 t 的子序列
            return False

        strs.sort(key=lambda s: -len(s))
        for i, s in enumerate(strs):
            if all(j == i or not is_subseq(s, t) for j, t in enumerate(strs)):
                return len(s)
        return -1
```

* [sol-Java]

```java
class Solution {
    public int findLUSlength(String[] strs) {
        Arrays.sort(strs, (a, b) -> b.length() - a.length());
        next:
        for (int i = 0; i < strs.length; i++) {
            for (int j = 0; j < strs.length; j++) {
                if (j != i && isSubseq(strs[i], strs[j])) {
                    continue next;
                }
            }
            return strs[i].length();
        }
        return -1;
    }

    // 返回 s 是否为 t 的子序列
    private boolean isSubseq(String s, String t) {
        int i = 0;
        for (char c : t.toCharArray()) {
            if (s.charAt(i) == c && ++i == s.length()) { // 所有字符匹配完毕
                return true; // s 是 t 的子序列
            }
        }
        return false;
    }
}
```

* [sol-C++]

```cpp
class Solution {
    // 判断 s 是否为 t 的子序列
    bool isSubseq(string& s, string& t) {
        int i = 0;
        for (char c : t) {
            if (s[i] == c && ++i == s.length()) { // 所有字符匹配完毕
                return true; // s 是 t 的子序列
            }
        }
        return false;
    }

public:
    int findLUSlength(vector<string>& strs) {
        ranges::sort(strs, {}, [](const auto& s) { return -s.length(); });
        for (int i = 0; i < strs.size(); i++) {
            for (int j = 0; j < strs.size(); j++) {
                if (j != i && isSubseq(strs[i], strs[j])) {
                    goto next;
                }
            }
            return strs[i].length();
            next:;
        }
        return -1;
    }
};
```

* [sol-C]

```c
int compare(const void* a, const void* b) {
    return strlen(*(char**) b) - strlen(*(char**) a);
}

// 返回 s 是否为 t 的子序列
bool isSubseq(const char* s, const char* t) {
    int i = 0;
    for (int j = 0; t[j]; j++) {
        if (s[i] == t[j] && !s[++i]) { // 所有字符匹配完毕
            return true; // s 是 t 的子序列
        }
    }
    return false;
}

int findLUSlength(char** strs, int strsSize) {
    qsort(strs, strsSize, sizeof(char*), compare);
    for (int i = 0; i < strsSize; i++) {
        for (int j = 0; j < strsSize; j++) {
            if (j != i && isSubseq(strs[i], strs[j])) {
                goto next;
            }
        }
        return strlen(strs[i]);
        next:;
    }
    return -1;
}
```

* [sol-Go]

```go
// 返回 s 是否为 t 的子序列
func isSubseq(s, t string) bool {
    i := 0
    for _, c := range t {
        if s[i] == byte(c) {
            i++
            if i == len(s) { // 所有字符匹配完毕
                return true // s 是 t 的子序列
            }
        }
    }
    return false
}

func findLUSlength(strs []string) int {
    slices.SortFunc(strs, func(s, t string) int { return len(t) - len(s) })
next:
    for i, s := range strs {
        for j, t := range strs {
            if j != i && isSubseq(s, t) {
                continue next
            }
        }
        return len(strs[i])
    }
    return -1
}
```

* [sol-JavaScript]

```js
// 返回 s 是否为 t 的子序列
var isSubseq = function(s, t) {
    let i = 0;
    for (const c of t) {
        if (s[i] === c && ++i === s.length) { // 所有字符匹配完毕
            return true; // s 是 t 的子序列
        }
    }
    return false;
};

var findLUSlength = function(strs) {
    strs.sort((a, b) => b.length - a.length);
    next: for (let i = 0; i < strs.length; i++) {
        const s = strs[i];
        for (let j = 0; j < strs.length; j++) {
            if (j !== i && isSubseq(s, strs[j])) {
                continue next;
            }
        }
        return s.length;
    }
    return -1;
};
```

* [sol-Rust]

```rust
impl Solution {
    // 返回 s 是否为 t 的子序列
    fn is_subseq(s: &[u8], t: &str) -> bool {
        let mut i = 0;
        for c in t.bytes() {
            if s[i] == c {
                i += 1;
                if i == s.len() { // 所有字符匹配完毕
                    return true; // s 是 t 的子序列
                }
            }
        }
        false
    }

    pub fn find_lu_slength(mut strs: Vec<String>) -> i32 {
        strs.sort_unstable_by(|a, b| b.len().cmp(&a.len()));
        'next:
        for (i, s) in strs.iter().enumerate() {
            let s = s.as_bytes();
            for (j, t) in strs.iter().enumerate() {
                if j != i && Self::is_subseq(s, t) {
                    continue 'next;
                }
            }
            return s.len() as _;
        }
        -1
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^2m)$，其中 $n$ 是 $\textit{strs}$ 的长度，$m$ 是 $\textit{strs}[i]$ 的最大长度。最坏情况下，所有字符串长度均为 $m$，需要枚举 $\mathcal{O}(n^2)$ 对字符串，每对需要 $\mathcal{O}(m)$ 的时间判断，所以时间复杂度为 $\mathcal{O}(n^2m)$。
- 空间复杂度：$\mathcal{O}(1)$。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
