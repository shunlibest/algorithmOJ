首先解释下示例 1 是怎么算的：

![](https://pic.leetcode.cn/1698390707-pOslZf-lc274-c.png)

**题意**：给你一个数组，求一个最大的 $h$，使得数组中有至少 $h$ 个数都大于等于 $h$。

本题可以做到 $\mathcal{O}(n)$ 时间。

设 $n$ 为 $\textit{citations}$ 的长度，即这名研究者发表的论文数。根据题意，$h$ 不可能超过 $n$，所以对于引用次数大于 $n$ 的论文，我们在统计的时候，可以看成是引用次数等于 $n$ 的论文。例如 $n=5$，假设 $h$ 是 $5$，那么无论引用次数是 $6$ 还是 $5$，都满足 $\ge 5$，所以 $6$ 可以看成是 $5$，毕竟我们只需要统计有多少个数字是 $\ge 5$ 的。

所以，创建一个长为 $n+1$ 的 $\textit{cnt}$ 数组，统计 $\min(\textit{citations}[i], n)$ 的出现次数。

设 $s$ 为引用次数 $\ge i$ 的论文数，我们需要算出满足 $s\ge i$ 的最大的 $i$。

为了快速算出有多少论文的引用次数 $\ge i$，我们可以从 $i=n$ 开始倒序循环，每次循环，把 $\textit{cnt}[i]$ 加到 $s$ 中。由于我们是倒序循环的，只要 $s\ge i$ 成立，此时的 $i$ 就是满足 $s\ge i$ 的最大的 $i$，直接返回 $i$ 作为答案。

例如示例 1，从 $i=5$ 开始：

1. $i=5$，现在 $s=2<i$，继续循环。
2. $i=4$，现在 $s=2<i$，继续循环。
3. $i=3$，现在 $s=3\ge i$，返回 $3$。

* [sol-Python3]

```py
class Solution:
    def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        cnt = [0] * (n + 1)
        for c in citations:
            cnt[min(c, n)] += 1  # 引用次数 > n，等价于引用次数为 n
        s = 0
        for i in range(n, -1, -1):  # i=0 的时候，s>=i 一定成立
            s += cnt[i]
            if s >= i:  # 说明有至少 i 篇论文的引用次数至少为 i
                return i
```

* [sol-Java]

```java
class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length;
        int[] cnt = new int[n + 1];
        for (int c : citations) {
            cnt[Math.min(c, n)]++; // 引用次数 > n，等价于引用次数为 n
        }
        int s = 0;
        for (int i = n; ; i--) { // i=0 的时候，s>=i 一定成立
            s += cnt[i];
            if (s >= i) { // 说明有至少 i 篇论文的引用次数至少为 i
                return i;
            }
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int hIndex(vector<int>& citations) {
        int n = citations.size();
        vector<int> cnt(n + 1);
        for (int c : citations) {
            cnt[min(c, n)]++; // 引用次数 > n，等价于引用次数为 n
        }
        int s = 0;
        for (int i = n; ; i--) { // i=0 的时候，s>=i 一定成立
            s += cnt[i];
            if (s >= i) { // 说明有至少 i 篇论文的引用次数至少为 i
                return i;
            }
        }
    }
};
```

* [sol-Go]

```go
func hIndex(citations []int) int {
    n := len(citations)
    cnt := make([]int, n+1)
    for _, c := range citations {
        cnt[min(c, n)]++ // 引用次数 > n，等价于引用次数为 n
    }
    s := 0
    for i := n; ; i-- { // i=0 的时候，s>=i 一定成立
        s += cnt[i]
        if s >= i { // 说明有至少 i 篇论文的引用次数至少为 i
            return i
        }
    }
}
```

* [sol-JavaScript]

```js
var hIndex = function(citations) {
    const n = citations.length;
    const cnt = Array(n + 1).fill(0);
    for (const c of citations) {
        cnt[Math.min(c, n)]++; // 引用次数 > n，等价于引用次数为 n
    }
    let s = 0;
    for (let i = n; ; i--) { // i=0 的时候，s>=i 一定成立
        s += cnt[i];
        if (s >= i) { // 说明有至少 i 篇论文的引用次数至少为 i
            return i;
        }
    }
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn h_index(citations: Vec<i32>) -> i32 {
        let n = citations.len();
        let mut cnt = vec![0; n + 1];
        for c in citations {
            cnt[n.min(c as usize)] += 1; // 引用次数 > n，等价于引用次数为 n
        }
        let mut s = 0;
        for (i, &c) in cnt.iter().enumerate().rev() {
            s += c;
            if s >= i { // 说明有至少 i 篇论文的引用次数至少为 i
                return i as _;
            }
        }
        unreachable!()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{citations}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

## 思考题

如果数组是有序的，你能想出一个更快的做法吗？

这题是 [275. H 指数 II](https://leetcode.cn/problems/h-index-ii/)

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
