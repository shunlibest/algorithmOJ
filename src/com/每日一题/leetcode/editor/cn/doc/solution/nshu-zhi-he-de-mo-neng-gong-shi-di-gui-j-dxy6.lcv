* java

```java
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        return nSumTarget(nums, 4, 0, target);
    }

    private List<List<Integer>> nSumTarget(int[] nums, int n, int start, int target) {
        int size = nums.length;
        List<List<Integer>> result = new ArrayList<>();
        if (n < 2 || size < n) {
            // 2Sum是base问题
            return result;
        }
        if (n == 2) {
            // 2Sum的问题
            int lo = start;
            int li = size - 1;
            while (lo < li) {
                int sum = nums[lo] + nums[li];
                if (sum < target) {
                    while (lo < li && nums[lo] == nums[++lo]) {
                    }
                } else if (sum > target) {
                    while (lo < li && nums[li] == nums[--li]) {
                    }
                } else {
                    result.add(new ArrayList<>(Arrays.asList(nums[lo], nums[li])));
                    while (lo < li && nums[lo] == nums[++lo]) {
                    }
                    while (lo < li && nums[li] == nums[--li]) {
                    }
                }
            }
        } else {
            // nSum问题，n>2时，递归计算(n - 1)Sum问题
            for (int i = start; i < size; i++) {
                List<List<Integer>> lists = nSumTarget(nums, n - 1, i + 1, target - nums[i]);
                for (List<Integer> list : lists) {
                    list.add(nums[i]);
                    result.add(list);
                }
                while (i < size - 1 && nums[i] == nums[i + 1]) {
                    // 如果这里的条件不满足，那么就交由外部的i++进行自增
                    i++;
                }
            }
        }
        return result;
    }
}
```

