* 

```
class Solution {
public:
    int minOperations(string s1, string s2, int x) {
        int n = s1.size();
        vector<vector<int>> dp(4, vector<int>(n, INT32_MAX/2));
        /*
        dp[0][i]:0~i全相等
        dp[1][i]:0~i-1相等，i不相等
        dp[2][i]:0~i-1有一个不等，i相等
        dp[3][i]:0~i-1有一个不等，i不相等
        */
        if(s1[0] == s2[0])
            dp[0][0] = 0;
        else
            dp[1][0] = 0;
        
        for(int i = 1; i < n; ++i)
        {
            if(s1[i] == s2[i]) {
                dp[0][i] = dp[0][i-1];
                
                dp[1][i] = min(dp[1][i-1]+1 , dp[2][i-1]+x);
                
                dp[2][i] = min(dp[1][i-1], dp[2][i-1]);
                
                dp[3][i] = min(dp[3][i-1]+1, dp[0][i-1]+1);
            } else {
                dp[0][i] = min(dp[1][i-1]+1, dp[2][i-1]+x);
                
                dp[1][i] = dp[0][i-1];
                
                dp[2][i] =  min(dp[3][i-1]+1,dp[0][i-1]+1);
                
                dp[3][i] = min(dp[1][i-1], dp[2][i-1]);
            }
        }
        return dp[0][n-1] >= INT32_MAX/2 ? -1 : dp[0][n-1];
    }
};
```

