## 解法：排序 & DP

我们计算以每个位置为终点，最多能跳几步。

因为只能往严格大于当前单元格的值跳，所以我们按 $a_{i, j}$ 从小到大的顺序考虑每个位置 $(i, j)$。

因为同一行或者同一列的位置都可以跳，因此我们只关心同一行或同一列中，$a_{i, j}$ 严格小于当前值的所有位置里（即之前考虑过的位置里），以哪个位置为终点，能跳的步数最多。

因此维护 $R(i)$ 表示之前考虑过的所有位置里，位于第 $i$ 行的位置的最大答案；以及维护 $C(j)$ 表示之前考虑过的所有位置里，位于第 $j$ 列的位置的最大答案。那么位置 $(i, j)$ 的答案就是 $\max(R(i) + 1, C(j) + 1)$。

取最大答案为总体答案即可。复杂度 $\mathcal{O}(n\log n)$，主要是排序的复杂度。实现上有一定细节，请看参考代码的注释。

## 参考代码（c++）

* c++

```c++
class Solution {
public:
    int maxIncreasingCells(vector<vector<int>>& mat) {
        int n = mat.size(), m = mat[0].size();
        const int INF = 1e9;
        int R[n], C[m];
        for (int i = 0; i < n; i++) R[i] = -INF;
        for (int j = 0; j < m; j++) C[j] = -INF;

        typedef pair<int, int> pii;
        // mp[x] 表示值为 x 的所有位置
        map<int, vector<pii>> mp;
        for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) mp[mat[i][j]].push_back(pii(i, j));

        int ans = 0;
        // 按值从小到大枚举每个位置
        for (auto &entry : mp) {
            // 这里用来临时存放当前值对 R 和 C 数组的更新
            // 必须把当前值所有位置都处理完以后，才能更新到 R 和 C 数组里
            vector<pii> vecR, vecC;
            // 计算当前值每个位置的答案
            for (pii p : entry.second) {
                int t = max({1, R[p.first] + 1, C[p.second] + 1});
                ans = max(ans, t);
                vecR.push_back(pii(p.first, t));
                vecC.push_back(pii(p.second, t));
            }
            // 把临时存放的影响更新到 R 和 C 数组里
            for (pii p : vecR) R[p.first] = max(R[p.first], p.second);
            for (pii p : vecC) C[p.first] = max(C[p.first], p.second);
        }
        return ans;
    }
};
```

