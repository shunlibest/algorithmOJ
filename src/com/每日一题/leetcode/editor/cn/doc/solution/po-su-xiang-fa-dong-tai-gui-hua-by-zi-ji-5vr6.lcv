### 1105. 填充书架

> 关键词：动态规划、线性dp

问题来源：[1105. 填充书架 - 力扣（Leetcode）](https://leetcode.cn/problems/filling-bookcase-shelves/)

#### 问题描述

* TAG

```TAG
T动态规划
T线性DP
```

给定一个数组 `books` ，其中 `books[i] = [thicknessi, heighti]` 表示第 `i` 本书的厚度和高度。你也会得到一个整数 `shelfWidth` 。

**按顺序** 将这些书摆放到总宽度为 `shelfWidth` 的书架上。

先选几本书放在书架上（它们的厚度之和小于等于书架的宽度 `shelfWidth` ），然后再建一层书架。重复这个过程，直到把所有的书都放在书架上。

需要注意的是，在上述过程的每个步骤中，**摆放书的顺序与你整理好的顺序相同**。

- 例如，如果这里有 5 本书，那么可能的一种摆放情况是：第一和第二本书放在第一层书架上，第三本书放在第二层书架上，第四和第五本书放在最后一层书架上。

每一层所摆放的书的最大高度就是这一层书架的层高，书架整体的高度为各层高之和。

以这种方式布置书架，返回书架整体可能的最小高度。

* 

```
输入：books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4
输出：6
解释：
3 层书架的高度和为 1 + 3 + 2 = 6 。
第 2 本书不必放在第一层书架上。
```

* 

```
输入: books = [[1,3],[2,4],[3,2]], shelfWidth = 6
输出: 4
```

* 

```
数据范围
1 <= books.length <= 1000
1 <= thicknessi <= shelfWidth <= 1000
1 <= heighti <= 1000
```

#### 问题分析

考虑最后一层，设最后一本书为i，最后一层的书为[j..i]，于是有

- 总体摆放的高度=前j-1本书摆放的高度+[j..i]中高度的最大值

由于j是可以变动的，所以有

- 总体摆放的最小高度=min( 前j-1本书摆放的最小高度+[j..i]中高度的最大值 )，[j..i]厚度不超过层宽即可

前j-1本书摆放的最小高度显然是一个与原问题相似的且规模更小的子问题，自然就想到使用动态规划求解。

整理一下思路，设f(i)=前i本数摆放的最小高度，于是，f(i)=min( f(j)+max([j..i]) )

时间复杂度：O(n^2)

空间复杂度：O(n)

#### 代码实现

* c++

```c++
int minHeightShelves(vector<vector<int>> &books, int shelfWidth) {
    int n = books.size(), f[n + 1];
    memset(f, 0x3f, sizeof f);
    f[0] = 0;

    for (int i = 1; i <= n; i++) {
        // [j..i]的高度最大值和总厚度
        int maxHgt = 0, sumTik = 0;
        for (int j = i; j; j--) {
            // 求[j..i]的高度最大值和总厚度
            maxHgt = max(books[j - 1][1], maxHgt), sumTik += books[j - 1][0];
            // 总厚度超过层宽
            if (sumTik > shelfWidth)break;
            // 更新f
            f[i] = min(f[j - 1] + maxHgt, f[i]);
        }
    }
    return f[n];
}
```

