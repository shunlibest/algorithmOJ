#### 方法一：模拟

**思路与算法**

由于题目求数组中所有出现两次数字的按位 $\text{XOR}$ 值，此时我们用哈希表检测当前数字出现的次数是否超过 $1$ 次，依次将出现次数超过 $1$ 次的数字进行异或即可得到结果。
由于数组中每个元素的大小范围为 $[1,50]$，实际可以使用一个 $64$ 位的二进制掩码 $\text{mask}$ 代替哈希表。如果 $x$ 已经出现过，则将对应掩码 $\text{mask}$ 的第 $x$ 位置为 $1$，如果未出现过，则掩码 $\text{mask}$ 的第 $x$ 位置为 $0$。使用二进制掩码可以有效节省空间。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    int duplicateNumbersXOR(vector<int>& nums) {
        unordered_set<int> cnt;
        int res = 0;
        for (int num : nums) {
            if (cnt.find(num) != cnt.end()) {
                res ^= num;
            } else {
                cnt.emplace(num);
            }
        }
        return res;
    }
};
```

* [sol1-Java]

```Java
class Solution {
    public int duplicateNumbersXOR(int[] nums) {
        Set<Integer> cnt = new HashSet<>();
        int res = 0;
        for (int num : nums) {
            if (cnt.contains(num)) {
                res ^= num;
            } else {
                cnt.add(num);
            }
        }
        return res;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int DuplicateNumbersXOR(int[] nums) {
        HashSet<int> cnt = new HashSet<int>();
        int res = 0;
        foreach (int num in nums) {
            if (cnt.Contains(num)) {
                res ^= num;
            } else {
                cnt.Add(num);
            }
        }
        return res;
    }
}
```

* [sol1-Go]

```Go
func duplicateNumbersXOR(nums []int) int {
    cnt := make(map[int]bool)
    res := 0
    for _, num := range nums {
        if _, found := cnt[num]; found {
            res ^= num
        } else {
            cnt[num] = true
        }
    } 
    return res
}
```

* [sol1-Python]

```Python
class Solution:
    def duplicateNumbersXOR(self, nums: List[int]) -> int:
        cnt = set()
        res = 0    
        for num in nums:
            if num in cnt:
                res ^= num
            else:
                cnt.add(num)
        return res
```

* [sol1-C]

```C
#define MAX_NUM 64

int duplicateNumbersXOR(int* nums, int numsSize) {
    int cnt[MAX_NUM] = {0};
    int res = 0;
    for (int i = 0; i < numsSize; ++i) {
        if (cnt[nums[i]] == 1) {
            res ^= nums[i];
        } else {
            cnt[nums[i]] = 1;
        }
    }
    return res;
}
```

* [sol1-JavaScript]

```JavaScript
var duplicateNumbersXOR = function(nums) {
    const cnt = new Set();
    let res = 0;
    for (const num of nums) {
        if (cnt.has(num)) {
            res ^= num;
        } else {
            cnt.add(num);
        }
    }
    return res;
};
```

* [sol1-TypeScript]

```TypeScript
function duplicateNumbersXOR(nums: number[]): number {
    const cnt = new Set<number>();
    let res = 0;
    for (const num of nums) {
        if (cnt.has(num)) {
            res ^= num;
        } else {
            cnt.add(num);
        }
    }
    return res;
};
```

* [sol1-Rust]

```Rust
use std::collections::HashSet;

impl Solution {
    pub fn duplicate_numbers_xor(nums: Vec<i32>) -> i32 {
        let mut cnt = HashSet::new();
        let mut res = 0;
        
        for num in nums {
            if cnt.contains(&num) {
                res ^= num;
            } else {
                cnt.insert(num);
            }
        }
        res
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 表示给定数组的长度。只需要遍历一遍数组即可。

- 空间复杂度：$O(n)$，其中 $n$ 表示给定数组的长度。需要用哈希表记录数组中出现的数字，需要的空间为 $O(n)$。

