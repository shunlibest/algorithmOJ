### 废话几句

周赛的时候使用BFS来做，结果超时了。原因是对查询集合中的每一个数据都进行了bfs查找，看是否满足条件。但按照这个数据规模指定爆照，加上困意满满脑子一团浆糊，最后还是没有A掉。

白天看了一下别人的答案，学习了一下Floyd方法，Floyd本身是求最短路径的，也可以被用作求类似于本题的传递关系，因为他本身是一种动态规划的思想。但是对于Floyd的三重循环，可能会被搞蒙，如果你中奖了，推荐你去看一下Floyd算法，以及k为什么在最外层。

那么这里的话，我给一个相对好理解的方法。
就是单纯的bfs。

### 思路（建议结合代码看，代码我分了块，比较清楚）

1. 首先求传递关系的话，比如说求0这节课，到其他课程所有的可达关系，直观的感受就是如果能形成一个链或者一个树（或图）就好了，然后扫描一遍就可以得出“起始节点”都能到达哪些节点。

2. 那么我们就构建一个图，这里我用了一个HashMap构建了一个图，HashMap里面是一个HashSet，比如说如果有一个键值对是这样的`{key:0,value:{1,3,4}}` 代表了0这个课程，可以到达`1，3，4`这三个课程，说白了这其实就是个邻接表的形式，只不过没有用链表而已。

3. 有了图之后，我们可以选择一种方式进行遍历访问，这里bfs或者dfs都可，我选择我比较擅长的bfs，对于遍历结果需要都记录下来，这里我用一个HashSet保存最终结果，方便最终查询。（BFS详见文中图）

4. 重要的一点是我们需要对n节课都进行遍历的，因为n的规模相对较小，所以我们可以选择对他暴力bfs，而如果你选择对查询集合进行暴力bfs就直接爆炸了，数据规模相当大。

5. 接下来就方便了，可达的组合都在HashSet里了，直接访问填答案就行了。

--------------------------------------

那么我们的BFS是怎么实现呢？
其实BFS相对来说简单，套模板就可以了，关键的部分：`队列，访问数组` 都在里面了。
对于出队的值，查找他的HashSet，他的HashSet里的值都是可达的，没有任何其他额外元素。访问过的元素我们给他标记一下，保证不会重复访问，然后可达的元素我们加入到刚才提到的结果集里。

> 补BFS的过程
> 正如下图所示，我们最终构建出来的将是一张图（这里拿比较特殊的树结构举例子）
> 如果求0这节课的可达关系，就是对以0为根节点的这棵树进行遍历，因为是遍历，所以图中每个节点都肯定能访问到，这样也方便了我们记录0的可达情况，当然如果遇到了环我们也可以用访问标识数组来防止陷入死循环（在本题目中已注明不会存在环，所以不用访问标识数组也不会导致死循环，但会产生一些重复的访问影响效率，所以建议加上。  ***感谢评论区@wwtj指正***）。

> 那么对于1为根节点的这棵树，也是如此。 2也是……n也是。
> 最终我们将计算出所有的可达关系。

![image.png](https://pic.leetcode-cn.com/94cbdc4966988c0035d3a8432bccf96f6b7f957b7a20fd37a5a0c96ac26a2b8c-image.png)

下面上代码。

### 代码

* 

```
  public List<Boolean> checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {
        //构建一个可达的map表，留着一会bfs用
        HashMap<Integer, HashSet<Integer>> map = new HashMap<>();
        for (int[] val : prerequisites) {
            HashSet<Integer> set = map.containsKey(val[0]) ? map.get(val[0]) : new HashSet<>();
            set.add(val[1]);
            map.put(val[0], set);
        }

        //创建一个结果集，里面存放所有可达关系
        HashSet<String> res = new HashSet<>();
        for (int i = 0; i < n; i++) {
            bfser(map, i, n, res);
        }

        //统计答案
        List<Boolean> ans = new ArrayList<>();
        for (int[] val : queries) {
            ans.add(res.contains(val[0] + "_" + val[1]));
        }
        return ans;
    }

    private void bfser(HashMap<Integer, HashSet<Integer>> map, int i, int n, HashSet<String> res) {
        LinkedList<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n];
        //如果这个值在map中不存在，说明他到其他课程没有可达关系
        if (!map.containsKey(i)) return;
        queue.offerLast(i);
        //我们的目标就是求root到其他点的可达关系，所以在bfs过程中，记录下这个可达关系，放在set里，这里
        //我用 a_b 这种字符串形式来记录了。
        visited[i] = true;
        while (!queue.isEmpty()) {
            HashSet<Integer> data = map.get(queue.pollFirst());
            if (data != null) {
                for (Integer d : data) {
                    if (!visited[d]) {
                        res.add(i + "_" + d);
                        queue.offerLast(d);
                        visited[d] = true;
                    }
                }
            }
        }
        //遍历结束后，所有可达的线都可以记录下来，求完所有的课程即可形成一个最终的统计集合，就可以遍历一遍查询数据
        //来返回结果了。
    }
```

这个题目看起来还挺巧妙的，同样 [5426. 重新规划路线](https://leetcode-cn.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/) 这个题目也可以用类似的BFS思路来求解，这个题目也是周赛的题目，可以尝试一下。
