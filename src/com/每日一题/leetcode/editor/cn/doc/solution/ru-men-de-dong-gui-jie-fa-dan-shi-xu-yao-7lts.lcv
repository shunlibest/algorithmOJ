> Problem: [8028. 执行操作使两个字符串相等](https://leetcode.cn/problems/apply-operations-to-make-two-strings-equal/description/)

[TOC]

# 思路

> [第一次写力扣题解，居然有模板哎]
> 那个啥，思路很简单，就是你去找两个字符串有多少个位置是不一样的
> 如果有奇数个不同，那说明就没有解，偶数个不同一定有解
> 假设你有x个不同，我们把这x个不同的下标提取出来单独存成一个数组
> 这个题就抽象成了————如何以最小代价消除这个数组，操作1是任选两个数字消除，代价是x,操作2是选择相邻两个数字消除，代价是这两个数字之差
> 这个问题我想了一下不能简单的贪心，就简单写了一下动归方程

# 解题方法

> 我们令dp[i][j]表示前i个数字，有j个数字没有被操作2消除所需要的最小代价（因为操作1可以任意消除，所以不需要写入动归方程增加其复杂程度）
> 首先是边界条件dp[1][1] = 0 dp[0][0] = 0
> 其次是转移方程：

    dp[i][j] = dp[i-1][j-1](表示第i个数字没有被操作2消除)
    dp[i][j] = dp[i-2][j] + arr[i]-arr[i-1](表示第i个数字与第i-1个数字一起被操作2消除)

> 所以最终答案就是 max(dp[n][j] + (j/2) * x) 【0<=j<=n 且 j为偶数】

# 复杂度

- 时间复杂度: O(n ^ 2)

- 空间复杂度: O(n ^ 2)
  (其实数据可以更极限一点，这里的n太小了才500)

# Code

* []

```C++

class Solution {
public:
  int n, arr[510], dp[510][510];
  int ans = 1e9;
  int minOperations(string s1, string s2, int x) {
      for(int i = 0; i < s1.length(); ++i)
          if(s1[i] != s2[i])
              arr[++n] = i;
      if(n & 1)return -1;
      memset(dp, 0x3f, sizeof(dp));
      dp[0][0] = 0;
      dp[1][1] = 0;
      for(int i = 2; i <= n; ++i){
          dp[i][0] = dp[i - 2][0] + arr[i] - arr[i - 1];
          for(int j = 1; j <= i; ++j)
              dp[i][j] = min(dp[i - 1][j - 1], dp[i - 2][j] + arr[i] - arr[i - 1]);
      }
      for(int j = 0; j <= n; ++j)
          if(j & 1)
              continue;
          else ans = min(ans, dp[n][j] + x * (j >> 1));
      return ans;
  }
};
```

