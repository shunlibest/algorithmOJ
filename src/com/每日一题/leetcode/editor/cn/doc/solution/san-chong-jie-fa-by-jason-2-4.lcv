[**leetcode 数据库题目全部题解**](https://leetcode-cn.com/circle/article/vGr1Mc/)

# 解法一 深度优先搜索

深度优先搜索的特点，通过递归，构造偏序关系或者拓扑关系。在本题中，其能构造一个高度的偏序关系，高度最低的位置在偏序关系的起点。

而且一定是高度最低的位置先算路径长度，然后逐步更新偏序关系之后的位置的长度。如此一定能得到正确值。

求以位置(x,y)为结尾的最长路径。其最小值为1。

可以先求出以其上下左右位置为止的最大路径长度。那么位置(x,y)的高度要么为1，要么是哪些比其矮的位置的最大路径长度的最大值+1.

例如，设 上下左右位置 中，比位置(x,y)矮的位置有上，左，右。它们的最大路径长度为a,b,c。那么(x,y)的最大路径长度为：max(1,max(a,b,c)+1)。

特别注意，只需递归到比其矮的相邻位置。同时，记录哪些已经遍历过的位置的最大路径长度，避免重复遍历。

* 

```
int R,C;
int longestIncreasingPath(vector<vector<int>>& matrix) {
    if(!(R=matrix.size()) || !(C=matrix[0].size())){
        return 0;
    }
    int ans = 0;
    vector<vector<int>> vis(R,vector<int>(C,0));
    for(int i=0;i<R;++i){
        for(int j=0;j<C;++j){
            ans = max(ans,dfs(matrix,vis,i,j));
        }
    }
    return ans;
}
int dfs(const vector<vector<int>>& grid,
         vector<vector<int>>& vis,
         int x,int y
        ){
    int& ans = vis[x][y];
    if(ans) return ans;
    const static int dx[4]={1,-1,0,0};
    const static int dy[4]={0,0,1,-1};
    for(int i=0;i<4;++i){
        const int nx = x + dx[i];
        const int ny = y + dy[i];
        if(in_grid(nx,ny) && grid[nx][ny] < grid[x][y]){
            ans = max(ans,1+dfs(grid,vis,nx,ny));
        }
    }
    ans = max(ans,1);
    return ans;
}
bool in_grid(int x,int y){
    return x>=0 && x < R && y>=0 && y<C;
}
```

# 解法二 广度优先搜索

广度优先则不能完整的构造偏序关系。能做的是当位置(i,j)的路径长度被增加后，那么其上下左右的位置，潜在的路径长度都可能被修改。

这些潜在的要修改的位置，可以存入队列。通过队列然后逐层更新路径长度。

例如

* 

```
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
```

算法的计算过程：

先访问位置(0,0)，值为9. 其长度为1. 其周围，没有要更新的位置。

位置(0,1),值为9， 其长度为1. 其周围，没有要更新的位置。

位置(0,2)值为4， 其长度为1。但是周围有位置(0,1)和位置(1,2)需要更新长度为2。但是 位置(0,1)和位置(1,2) 周围没有需要更新的位置。

位置(1,0)值为6，长度为1。 周围有位置(0,0)需要更新长度为2。

位置 (1,1)值为6，长度为1。 周围有 位置(0,1)和位置(1,2) 需要更新长度为2。

位置(1,2)值为8，长度为2。 周围没有需要更新的位置。

位置(2,0)值为2，长度为1。 周围有位置(1,0) 需要更新长度为2。 位置(1,0) 周围有位置(0,0)需要更新长度为3.

位置(2,1)值为1，长度为1。 周围有位置(2,0)和(1,1) 需要更新长度为2。 位置(1,0) ，(0,1)，(1,2)需要更新长度为3. 位置(0,0)更新长度为4.

逐层更新位置路径的最大长度。

用广度优先搜索，用队列，完成上述逐层更新的功能。

* 

```
int R,C; 
int longestIncreasingPath(vector<vector<int>>& matrix) {
    if(!(R=matrix.size()) || !(C=matrix[0].size())){
        return 0;
    }
    int ans = 0;
    vector<vector<int>> vis(R,vector<int>(C,0));
    for(int i=0;i<R;++i){
        for(int j=0;j<C;++j){
            if(!vis[i][j]){
                ans = max(ans,bfs(matrix,vis,i,j));
            }
        }
    }
    return ans;
}
int bfs(const vector<vector<int>>& grid,
         vector<vector<int>>& vis,
         int x,int y
        ){
    vis[x][y] = 1;
    int max_h = 0;
    const static int dx[4]={1,-1,0,0};
    const static int dy[4]={0,0,1,-1};        
    typedef pair<int,int> Pair;
    queue<Pair> Q;
    Q.push(make_pair(x,y));
    while(Q.size()){
        Pair p = Q.front();Q.pop();
        const int & _x = p.first;
        const int & _y = p.second;
        max_h = max(max_h,vis[_x][_y]);
        for(int i=0;i<4;++i){
            const int nx = _x + dx[i];
            const int ny = _y + dy[i];
            if(in_grid(nx,ny) && grid[nx][ny] > grid[_x][_y]){
                if(vis[_x][_y] + 1 > vis[nx][ny]){
                    vis[nx][ny] = vis[_x][_y] + 1;
                    Q.push(make_pair(nx,ny));
                }
            }
        } 
    }
    return max_h;
}
bool in_grid(int x,int y){
    return x>=0 && x < R && y>=0 && y<C;
}
```

# 解法三 动态规划算法

相邻位置，从高度矮的向高度高的画一条边。整个图成为一个DAG。问题就变成了DAG上的最长路径问题。用动态规划可以解决。

用动态规划也有两种方法。

## 第一种，以位置(i,j)为结束的最长路径

其前驱节点的路径长度都算出来了。

前驱节点就是其上下左右，且高度比其小的位置。

位置(i,j)的最长路径 = 1 + max(前驱节点最长路径）。

因此，要按照有向图的拓扑排序，更新值。本题的便利之处是按高度值递增排序，就是拓扑排序。无需单独计算拓扑排序。

用优先级队列，高度值小的优先级高，便可驱动计算。

* 

```
struct node{
    int h;
    int x;
    int y;
    node(int _h=0,int _x=0,int _y=0): h(_h),x(_x),y(_y){}
    bool operator<(const node& o)const{
        return h > o.h;
    }
};
int R,C; 
int longestIncreasingPath(vector<vector<int>>& matrix) {
    if(!(R=matrix.size()) || !(C=matrix[0].size())){
        return 0;
    }
    int ans = 0;
    priority_queue<node> Q;
    for(int i=0;i<R;++i){
        for(int j=0;j<C;++j){
            Q.push(node(matrix[i][j],i,j));
        }
    }
    const static int dx[4]={1,-1,0,0};
    const static int dy[4]={0,0,1,-1};             
    vector<vector<int>> vis(R,vector<int>(C,0));
    while(Q.size()){
        node p = Q.top();Q.pop();
        const int & _x = p.x;
        const int & _y = p.y;
        int& h = vis[_x][_y];
        for(int i=0;i<4;++i){
            const int nx = _x + dx[i];
            const int ny = _y + dy[i];
            if(in_grid(nx,ny) && matrix[nx][ny] < matrix[_x][_y]){
                h = max(h,vis[nx][ny] + 1);
            }
        }
        h = max(1,h);
        ans = max(ans,h);
    }
    return ans;
}
    bool in_grid(int x,int y){
    return x>=0 && x < R && y>=0 && y<C;
}
```

## 第二种，以位置(i,j)为开始的最长路径

与前一种方法类似。 可以从DAG路径的尾部向前更新位置的最长路径。

只是在更新时要注意方向。同样借助于优先级队列，高度高的优先级高，完成拓扑排序。

* 

```
struct node{
    int h;
    int x;
    int y;
    node(int _h=0,int _x=0,int _y=0): h(_h),x(_x),y(_y){}
    bool operator<(const node& o)const{
        return h < o.h;
    }
};
int R,C; 
int longestIncreasingPath(vector<vector<int>>& matrix) {
    if(!(R=matrix.size()) || !(C=matrix[0].size())){
        return 0;
    }
    int ans = 0;
    priority_queue<node> Q;
    for(int i=0;i<R;++i){
        for(int j=0;j<C;++j){
            Q.push(node(matrix[i][j],i,j));
        }
    }
    const static int dx[4]={1,-1,0,0};
    const static int dy[4]={0,0,1,-1};             
    vector<vector<int>> vis(R,vector<int>(C,0));
    while(Q.size()){
        node p = Q.top();Q.pop();
        const int & _x = p.x;
        const int & _y = p.y;
        int& h = vis[_x][_y];
        for(int i=0;i<4;++i){
            const int nx = _x + dx[i];
            const int ny = _y + dy[i];
            if(in_grid(nx,ny) && matrix[nx][ny] > matrix[_x][_y]){
                h = max(h,vis[nx][ny] + 1);
            }
        }
        h = max(1,h);
        ans = max(ans,h);
    }
    return ans;
}
    bool in_grid(int x,int y){
    return x>=0 && x < R && y>=0 && y<C;
}
```

