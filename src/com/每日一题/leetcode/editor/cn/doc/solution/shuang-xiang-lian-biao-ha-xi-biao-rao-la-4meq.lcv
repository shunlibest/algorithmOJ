### 解题思路

此处撰写解题思路

### 代码

* cpp

```cpp
struct Node{
    int key;
    int val;
    Node* pre,*next;
    Node(){}
    Node(int key,int val):key(key),val(val){}
};

class LRUCache {
    Node* head=new Node();
    Node* tail=new Node();
    int cap;
    unordered_map<int,Node*> h;
public:
    LRUCache(int capacity) {
        head->next=tail;
        tail->pre=head;
        this->cap=capacity;
    }
    
    int get(int key) {
        if(h.find(key)==h.end())
            return -1;
        if(head->next==h[key]){
            return h[key]->val;
        }
        h[key]->next->pre=h[key]->pre;
        h[key]->pre->next=h[key]->next;
        h[key]->next=head->next;
        head->next->pre=h[key];
        head->next=h[key];
        return h[key]->val;
    }
    
    void put(int key, int value) {
        if(h.find(key)==h.end()){
            Node* cur=new Node(key,value);
            h[key]=cur;
            cur->next=head->next;
            head->next->pre=cur;
            head->next=cur;
            cur->pre=head;
            if(h.size()>cap){
                Node* tmp=tail->pre;
                tail->pre=tail->pre->pre;
                tail->pre->next=tail;
                h.erase(tmp->key);
                delete tmp;
            }
        }
        else{
            h[key]->val=value;
            get(key);
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
```

