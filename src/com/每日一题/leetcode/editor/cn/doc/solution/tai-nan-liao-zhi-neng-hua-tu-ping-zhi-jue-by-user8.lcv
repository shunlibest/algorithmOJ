### 解题思路

至少对于我这种脑子来说，感觉贪心相关的题目都好难去严谨地证明或推论为什么要这么做，只能画画图，然后凭直觉去感觉，然后说“显然”要选xx的策略。。。

首先，题目给出的原数组 A 里元素的排序显然不影响结果，因此为了便于分析我们把原数组先排一下序，然后用下面的图表示题目给出的这个升序数组：
![截屏2020-02-19下午5.29.57.png](https://pic.leetcode-cn.com/9e4ccdf7359442c8b7707472541512e3f8a1e44ed0fb3d3f34ede92db99981ca-%E6%88%AA%E5%B1%8F2020-02-19%E4%B8%8B%E5%8D%885.29.57.png)

然后题目要求每个元素要么向上移动 K 的距离，要么向下移动 K 的距离，然后要求这个新数组的“最大最小值的距离尽可能地小”。此时我只能说，凭“直觉”，此时最优的策略是把这个数组拆成左右两半，把左边那一半上移，把右边那一半下移，也就是下图。黑色是原数组，红色是新数组：
![截屏2020-02-19下午4.47.08.png](https://pic.leetcode-cn.com/a4a7dd4ba6ee617e1c701a32edd71d8e2d592748f931f007bb870be4f4d095ed-%E6%88%AA%E5%B1%8F2020-02-19%E4%B8%8B%E5%8D%884.47.08.png)

为了更生动形象一点，我们多画几个图体会一下，当 K 很小的时候，就是下面的情况，显然红色的新数组里，最大值是 D，最小值是 A。
![截屏2020-02-19下午4.48.31.png](https://pic.leetcode-cn.com/0f17b59fdddc665851b53b58cd1ebb95b7bf997b80b8f2e3cbfe3e7addbac727-%E6%88%AA%E5%B1%8F2020-02-19%E4%B8%8B%E5%8D%884.48.31.png)

当 K 很大的时候，就是下面的情况，显然红色新数组里，最大值是 B，最小值是 C。
![截屏2020-02-19下午4.50.19.png](https://pic.leetcode-cn.com/b56e06b9728ab1e25352e82b6b6a6e8f3b606fac3570508dd47b1fe085ed9313-%E6%88%AA%E5%B1%8F2020-02-19%E4%B8%8B%E5%8D%884.50.19.png)

当我们选择在 i 这一点“切一刀”的时候，也就是 A[0] ~ A[i] 的元素都上移，A[i + 1] ~ A[A.length - 1] 的元素都下移。
此时 B 点的值是 A[i] + K，D 点的值是 A[A.length - 1] - K。
新数组的最大值要么是 B 点要么是 D 点，也就是说新数组的最大值是 Max(A[i] + K, A[A.length - 1] - K)。

同样道理，此时 A 点的值是 A[0] + K，C 点的值是 A[i + 1] - K。
新数组的最小值要么是 A 点要么是 C 点，也就是说新数组的最小值是 Min(A[0] + K, A[i + 1] - K)。

因此，题目需要的“新数组的最大值和最小值的差值”，就是 Max(A[i] + K, A[A.length - 1] - K) - Min(A[0] + K, A[i + 1] - K)。

K 的值是题目给出的固定值，因此如果我们想让上面这个算式的结果尽可能小的话，就要靠改变 i 的值，也就是思考究竟要在哪里“切这一刀”。因此我们挨个遍历一下所有可能的 i 的值，然后取上面算式的最小值即可。

### 代码

* javascript

```javascript
/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
var smallestRangeII = function(A, K) {
	A.sort(function(a, b){
		return a - b;
	});
	var len = A.length;
	// 注意这里有个特殊情况，就是我们压根“不切这一刀”，而是把整个数组全部上移或下移，这也是一种策略。这种策略下的差值是 A[len - 1] - A[0]
	var ans = A[len - 1] - A[0];
	for (var i = 0; i < len - 1; i++) {
		var max = Math.max(A[i] + K, A[len - 1] - K);
		var min = Math.min(A[0] + K, A[i + 1] - K);
		var diff = max - min;
		ans = Math.min(ans, diff);
	}
	return ans;
};
```

