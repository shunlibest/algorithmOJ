# [1287. 有序数组中出现次数超过25%的元素](https://leetcode.cn/problems/element-appearing-more-than-25-in-sorted-array/description/)

> **日期**：2025-02-17
> **所用时间**：2min

## 1. 统计每个元素出现的次数

使用 `Counter` 统计每个元素出现的次数，然后遍历 `Counter` 中的元素，如果出现次数大于 $\text{len}(arr) / 4$ ，则返回该元素。

- 时间复杂度: $O(n)$
- 空间复杂度: $O(n)$

* []

```python
class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        count = Counter(arr)
        for x, cnt in count.items():
            if cnt > len(arr) / 4:
                return x
```

## 2. 二分查找

使用 `bisect_left` 和 `bisect_right` 函数找到每个元素在数组中的左右边界，然后判断左右边界之间的元素个数是否大于等于 $\text{len}(arr) / 4$ ，如果是则返回该元素。

- 时间复杂度: $O(\log n)$
- 空间复杂度: $O(1)$

* []

```python
class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        n = len(arr)
        span = n // 4 + 1
        for i in range(0, n, span):
            if bisect_right(arr, arr[i]) - bisect_left(arr, arr[i]) >= span:
                return arr[i]
        return -1
```

