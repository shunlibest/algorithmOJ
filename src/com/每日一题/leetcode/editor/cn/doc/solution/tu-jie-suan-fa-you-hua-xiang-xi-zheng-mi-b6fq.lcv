![1691-2-4-cut.png](https://pic.leetcode.cn/1670597058-EzWyyA-1691-2-4-cut.png)

#### 答疑

**问**：为什么要对 $\textit{cuboids}$ 排序？

**答**：排序后，答案对应的长方体子序列可直接按照从左到右的顺序堆叠，从而保证了状态转移的正确性，即计算 $f[i]$ 时，可按照 $i$ 从小到大的顺序计算，且只用考虑 $j<i$ 的状态转移来源 $f[j]$。如果不排序，则无法保证这些。

**问**：为什么当 $A$ 可以堆在 $B$ 上时，可以直接把最长的边作为高？

**答**：我可以换一个角度来解释。把长方体看成盒子，把 $A$ **装进** $B$ 中（三条边短对短，中对中，长对长）。由于无论 $B$ 怎么旋转，$A$ 始终在 $B$ 中，那么直接把 $B$ 按照最长的边竖着放置，$A$ 也会按照最长的边竖着放置。

**问**：是否有时间复杂度比 $O(n^2)$ 更低的做法？

**答**：可以用动态开点二维线段树做到 $O(n\log^2 n)$。

* [sol1-Python3]

```py
class Solution:
    def maxHeight(self, cuboids: List[List[int]]) -> int:
        for c in cuboids:
            c.sort()
        cuboids.sort()
        f = [0] * len(cuboids)
        for i, (_, l2, h2) in enumerate(cuboids):
            for j, (_, l1, h1) in enumerate(cuboids[:i]):
                if l1 <= l2 and h1 <= h2:  # 排序后，w1 <= w2 恒成立
                    f[i] = max(f[i], f[j])  # cuboids[j] 可以堆在 cuboids[i] 上
            f[i] += h2
        return max(f)
```

* [sol1-Java]

```java
class Solution {
    public int maxHeight(int[][] cuboids) {
        for (int[] c : cuboids)
            Arrays.sort(c);
        Arrays.sort(cuboids, (a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] != b[1] ? a[1] - b[1] : a[2] - b[2]);
        int ans = 0, n = cuboids.length;
        int[] f = new int[n];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j)
                // 排序后，cuboids[j][0] <= cuboids[i][0] 恒成立
                if (cuboids[j][1] <= cuboids[i][1] && cuboids[j][2] <= cuboids[i][2])
                    f[i] = Math.max(f[i], f[j]); // cuboids[j] 可以堆在 cuboids[i] 上
            f[i] += cuboids[i][2];
            ans = Math.max(ans, f[i]);
        }
        return ans;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int maxHeight(vector<vector<int>> &cuboids) {
        for (auto &c : cuboids)
            sort(c.begin(), c.end());
        sort(cuboids.begin(), cuboids.end());
        int n = cuboids.size(), f[n];
        for (int i = 0; i < n; ++i) {
            f[i] = 0;
            for (int j = 0; j < i; ++j)
                // 排序后，cuboids[j][0] <= cuboids[i][0] 恒成立
                if (cuboids[j][1] <= cuboids[i][1] && cuboids[j][2] <= cuboids[i][2])
                    f[i] = max(f[i], f[j]); // cuboids[j] 可以堆在 cuboids[i] 上
            f[i] += cuboids[i][2];
        }
        return *max_element(f, f + n);
    }
};
```

* [sol1-Go]

```go
func maxHeight(cuboids [][]int) (ans int) {
    for _, c := range cuboids {
        sort.Ints(c)
    }
    sort.Slice(cuboids, func(i, j int) bool {
        a, b := cuboids[i], cuboids[j]
        return a[0] < b[0] || a[0] == b[0] && (a[1] < b[1] || a[1] == b[1] && a[2] < b[2])
    })
    f := make([]int, len(cuboids))
    for i, c2 := range cuboids {
        for j, c1 := range cuboids[:i] {
            if c1[1] <= c2[1] && c1[2] <= c2[2] { // 排序后，c1[0] <= c2[0] 恒成立
                f[i] = max(f[i], f[j]) // c1 可以堆在 c2 上
            }
        }
        f[i] += c2[2]
        ans = max(ans, f[i])
    }
    return
}

func max(a, b int) int { if b > a { return b }; return a }
```

#### 复杂度分析

- 时间复杂度：$O(n^2)$，其中 $n$ 为 $\textit{cuboids}$ 的长度。
- 空间复杂度：$O(n)$。

#### 相似题目

- [300. 最长递增子序列](https://leetcode.cn/problems/longest-increasing-subsequence/)
- [354. 俄罗斯套娃信封问题](https://leetcode.cn/problems/russian-doll-envelopes/)

如果想加深对 LIS 的理解，还可以做做 [2407. 最长递增子序列 II](https://leetcode.cn/problems/longest-increasing-subsequence-ii/)。

---

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)，最近正在连载 [【基础算法精讲】](https://www.bilibili.com/video/BV1AP41137w7/)，欢迎点赞~
