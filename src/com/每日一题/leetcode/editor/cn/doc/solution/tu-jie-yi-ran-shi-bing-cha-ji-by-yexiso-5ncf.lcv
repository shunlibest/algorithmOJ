## 方法一：并查集

### 1. 前言

如果您对【并查集】相关知识还不是太了解，可以看看我之前的题解[【详解并查集】](https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column/solution/tu-jie-bing-cha-ji-by-yexiso-nbcz/)

有问题欢迎留言交流！

### 2. 解题思路

本题的题意比较直观，思路也比较清晰，可以使用【并查集】来解决。

根据题意可知：

- **存在相同邮箱的账号一定属于同一个人**
- **名称相同的账户不一定属于同一个人**

### 3. 思路

由于名称相同无法判断为同`1`人，所以只能**使用邮箱是否相同来判断是否为同一人**。

这样建立并查集就比较简单了：

- 先初始化每个账户为`1`个连通分量
- 遍历每个账户下的邮箱，判断该邮箱是否在其他账户下出现
- 如果未出现，继续
- 如果`账户A、B`下出现了相同的邮箱`email`，那么将`账户A`和`账户B`两个连通分量进行合并
- 最后遍历并查集中每个连通分量，将所有连通分量内部账户的邮箱全部合并(相同的去重，不同的合并)
- 结束

针对具体的实现，大家可以看看代码

### 4. 举例

![image.png](https://pic.leetcode-cn.com/1610933889-CHKyWd-image.png)

### 5. 代码

* cpp

```cpp
class Djset {
public:
    vector<int> parent;  // 记录节点的根
    vector<int> rank;  // 记录根节点的深度（用于优化）
    Djset(int n): parent(vector<int>(n)), rank(vector<int>(n)) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    int find(int x) {
        // 压缩方式：直接指向根节点
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    void merge(int x, int y) {
        int rootx = find(x);
        int rooty = find(y);
        if (rootx != rooty) {
            if (rank[rootx] < rank[rooty]) {
                swap(rootx, rooty);
            }
            parent[rooty] = rootx;
            if (rank[rootx] == rank[rooty]) rank[rootx] += 1;
        }
    }
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& acc) {
        vector<vector<string> > res;
        // 作用：存储每个邮箱属于哪个账户 ，同时 在遍历邮箱时，判断邮箱是否出现过
        // 格式：<邮箱，账户id>
        unordered_map<string, int> um;
        int n = acc.size();
        Djset ds(n);
        for (int i = 0; i < n; i++) {
            int m = acc[i].size();
            for (int j = 1; j < m; j++) {
                string s = acc[i][j];
                if (um.find(s) == um.end()) {
                    um[s] = i;
                } else {
                    ds.merge(i, um[s]);
                }
            }
        }
        // 作用： 存储每个账户下的邮箱
        // 格式： <账户id, 邮箱列表> >
        // 注意：这里的key必须是账户id，不能是账户名称，名称可能相同，会造成覆盖
        unordered_map<int, vector<string> > umv;
        for (auto& [k, v] : um) umv[ds.find(v)].emplace_back(k);
        for (auto& [k, v] : umv){
            sort(v.begin(), v.end());
            vector<string> tmp(1, acc[k][0]);
            tmp.insert(tmp.end(), v.begin(), v.end());
            res.emplace_back(tmp);
        } 


        return res;
    }
};
```

### 6. 总结

官方这个月强推【并查集】，不学会都不行！

一般针对可以使用并查集的题目，都可以直接使用并查集的**模板**或者稍微加以改造，并查集部分的代码不应该成为瓶颈。

**普通的模板代码比较简单，但是一般效率比较低！**

所以通常都会采用`【路径压缩】`和`【按秩合并】`两种优化方式，【模板代码】如下：

* 

```
// 注意：使用该代码，并不能使得所有的元素都直接指向根节点，仍然存在间接指向
class Djset {
public:
    vector<int> parent;  // 记录节点的根
    vector<int> rank;    // 记录根节点的深度（用于优化）
    int count;           // 记录并查集的数量,某些情况下该成员非必要
    Djset(int n): parent(vector<int>(n)), rank(vector<int>(n)), count(n) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        // 压缩方式：直接指向根节点
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void merge(int x, int y) {
        // 找到根节点
        int rootx = find(x);
        int rooty = find(y);
        if (rootx != rooty) {
            // 按秩合并
            if (rank[rootx] < rank[rooty]) {
                swap(rootx, rooty);
            }
            parent[rooty] = rootx;
            count--;
            // 如果秩相等，将父节点rootx秩 + 1
            if (rank[rootx] == rank[rooty]) rank[rootx] += 1;
        }
    }
};
```

> 并查集的一些使用tips:
> - 一般不会将并查集使用得太复杂，内部结构如果过于复杂，也难以维护
> - 只负责维护连通性
> - 存在区间合并的题干，应当考虑使用并查集
> - 如果题干是拆分连通分量，反向思维，考虑逆向使用并查集

## 方法二：深度优先搜索/DFS

### 1. 解题思路

先对问题进行抽象，题目要求虽然是对账户进行合并，但终归结底是对**账户下的所有邮箱进行合并**。

另外题目也说了，相同账户的名称一定相同，所以用**邮箱**构建节点不会对账户造成任何影响。

所以比较简单的抽象方式是 **将每个邮箱当作一个节点来构建图（重复的邮箱算作同一个节点，这样避免最后输出重复），然后每个连通图表示一个账户，非连通图表示的是不同账户，也就是说，一个连通图里的所有节点（邮箱）属于同一个账户**

### 2. 步骤

1. 对数据进行预处理，给邮箱编号；
2. 构建无向图，采用邻接表进行存储；
3. 由于最后的结果图是由若干个**连通图**组成的**非连通图**，所以依次遍历每个连通图，同时输出该连通图里的所有邮箱。

### 3. 例子

![image.png](https://pic.leetcode-cn.com/1610950129-zgiHZM-image.png)

图构建完之后，最后进行dfs即可。
关于dfs的相关知识，这里不作过多赘述！具体请看代码：

### 4. 代码

这里感谢[@guoyuer](/u/guoyuer/)指出的问题，具体见代码！

* 

```
class Solution {
public:
    vector<vector<string> > res; // 结果集
    // map: 保存邮箱与编号的对应关系
    // 格式： <邮箱，编号>
    unordered_map<string, int> um; 
    // vector: 保存编号与邮箱的对应关系
    // 格式： <编号，邮箱>
    vector<string> mails; 

    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        // 数据预处理：生成邮箱与编号的对应关系
        for (auto ac : accounts) {
            for (int i = 1; i < ac.size(); i++) {
                if (um.find(ac[i]) != um.end()) continue;
                mails.emplace_back(ac[i]);
                um[ac[i]] = mails.size() - 1;
            }
        }

        // 建图，邻接矩阵，存储相邻的邮箱编号
        int m = mails.size();
        vector<vector<int> > g(m);
        for (auto& ac : accounts) {
            for (int i = 1; i < ac.size(); i++) {
                for (int j = i + 1; j < ac.size(); j++) {
                    int idxI = um[ac[i]], idxJ = um[ac[j]];
                    g[idxI].push_back(idxJ);
                    g[idxJ].push_back(idxI);
                }
            }
        }

        // dfs
        vector<bool> visited(m);
        for (auto& ac : accounts) {
            vector<string> cur(1, ac[0]);
            if (ac.size() < 1) continue;
            if (!visited[um[ac[1]]]) {
                dfs(g, um[ac[1]], visited, cur);
                // 名称不参与排序，感谢 郭遇尔 指出！
                // sort(cur.begin(), cur.end());
                sort(cur.begin() + 1, cur.end());
                res.emplace_back(cur);
            }
        }
        return res;
    }

    void dfs(vector<vector<int> >& g, int idx, vector<bool>& visited, vector<string>& cur) {
        visited[idx] = true;
        cur.emplace_back(mails[idx]);
        for (auto& nei : g[idx]) {
            if (!visited[nei]) dfs(g, nei, visited, cur);
        }
    }
};
```

> 感谢您的观看，如有任何问题，欢迎留言交流！
> 若对您有帮助，希望不吝一赞 &#x1f44d;                         $\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ - \  by \ \  \ yex➰$

