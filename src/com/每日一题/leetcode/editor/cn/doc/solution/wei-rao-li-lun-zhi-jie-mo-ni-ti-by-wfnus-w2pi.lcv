### 解题思路

今天感冒终于好很多了；题目意思很简单，直接模拟即可。
先看第一个单词是否大写
1. 小写 -> 则之后所有字母都必须是小写
2. 大写

- 所有字母都大写
- 只有第一个字母大写

循环遍历判断即可。

### 代码

* cpp

```cpp
class Solution {
public:
    bool isCap(char c) {
        return c >= 65 && c <= 90;
    }

    bool detectCapitalUse(string word) {
        if (word.size() == 0) return true;
        if (isCap(word[0])) {
            int i = 0;
            for (;i<word.size();i++) {
                if (!isCap(word[i])) break;
            }
            if (i == word.size()) return true;
            if (i != 1) return false;
            for (i = 1; i < word.size();i++) {
                if (isCap(word[i])) return false;
            }
        } else {
            for (int i = 0; i < word.size(); i++) {
                if (isCap(word[i])) return false;
            }
        }

        return true;
    }
};
```

### 代码2 ｜ 抽出相似逻辑

* cpp

```cpp
class Solution {
public:
    bool isCap(char c) {
        return c >= 65 && c <= 90;
    }

    // flag = true -> check if all upper case
    bool isCap(string& word, int start, int flag) {
        int i = start;
        for (; i < word.size(); i++) {
            if (flag) {
                if (!isCap(word[i])) break;
            } else {
                if (isCap(word[i])) break;
            }
        }
        return i == word.size();
    }

    bool detectCapitalUse(string word) {
        if (isCap(word, 0, true)) return true;
        if (isCap(word, 0, false)) return true;
        if (isCap(word[0])) {
            if (isCap(word, 1, false)) return true;
        }
        return false;
    }
};
```

### 代码3 ｜ 官解搬运

官解对规律的总结非常简洁； 搬运一下！

* cpp

```cpp
class Solution {
public:
    bool detectCapitalUse(string word) {
        // 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写
        if (word.size() >= 2 && islower(word[0]) && isupper(word[1])) {
            return false;
        }
        
        // 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同
        for (int i = 2; i < word.size(); ++i) {
            if (islower(word[i]) ^ islower(word[1])) {
                return false;
            }
        }
        return true;
    }
};
```

### 关于我

大家好，我是微扰酱。现在是五道口【悖论13】剧本杀的股东之一，点评搜索即可，欢迎大家来探店。
微扰酱18年毕业于上海交通大学，是一个在阿里、字节、腾讯都工作过的工程师，有丰富的面试经验。从 2021.4 开始在emqx从事存储研发，希望在今年多多输出。

最后，如果对你有帮助，**可以点个赞支持一下我哦** 也欢迎在leetcode上[关注我](https://leetcode-cn.com/u/wfnuser/)。

欢迎留言预定配图！ 今天是**龙猫**，可可爱爱～
![image.png](https://pic.leetcode-cn.com/1636427042-UyEoGN-image.png)

### 周赛冲冲冲

「微扰酱」最近周赛进步还是有一些的；欢迎大家围观哦～ 期待早日拿到guardian！
![image.png](https://pic.leetcode-cn.com/1636275082-frnFWw-image.png)

[【周赛266 Q4】DFS](https://leetcode-cn.com/problems/maximum-path-quality-of-a-graph/solution/wei-rao-li-lun-dfsde-shi-hou-ba-jing-guo-xrja/)
[【周赛266 Q3】 二分搜索](https://leetcode-cn.com/problems/minimized-maximum-of-products-distributed-to-any-store/solution/wei-rao-li-lun-jia-she-jian-yan-xing-er-nn4p0/)
