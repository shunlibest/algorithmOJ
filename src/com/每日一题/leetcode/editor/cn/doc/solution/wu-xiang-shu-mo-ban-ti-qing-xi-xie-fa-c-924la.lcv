# 思路

我们可以通过在一遍 DFS 中枚举节点，令 DFS 返回每个子树的节点总数。如果子树的节点总数均相同，即令待返回的 `ans` 加一。

如果读者还未掌握基础的递归和图论知识，可参考我写的 [《图论入门》](https://leetcode.cn/leetbook/detail/introduction-to-graph/)。

# 代码

* []

```C++
class Solution {
public:
    int countGoodNodes(vector<vector<int>>& edges) {
        int n = edges.size() + 1; // 节点数

        // 构建邻接表
        vector<vector<int>> adj(n);
        for (const auto& edge : edges) {
            int u = edge[0], v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        int ans = 0;
        
        // parent 为父节点
        function<int(int, int)> dfs = [&](int u, int parent) -> int {
            int cnt_sum = 1; // 节点总数，先计入自身
            int single_cnt = 0;
            bool valid = true;

            for (int v : adj[u]) {
                // 规避邻接点中已访问过的父节点，不需要 visited 数组。
                if (v == parent) continue;

                int cnt = dfs(v, u);
                cnt_sum += cnt;
                // 检测子树的节点数量是否相同
                if (single_cnt == 0)
                    single_cnt = cnt;
                else if (single_cnt != cnt)
                    valid = false;
            }
            ans += valid;
            return cnt_sum;
        };

        dfs(0, -1); // -1 即不存在父节点
        return ans;
    }
};
```

* []

```Python
class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        n = len(edges) + 1 # 节点数

        # 构建邻接表
        adj = [[] for _ in range(n)]
        for u, v in edges:
            adj[u].append(v)
            adj[v].append(u)
        
        ans = 0
        
        # parent 为父节点
        def dfs(u: int, parent: int) -> int:
            cnt_sum = 1 # 节点总数，先计入自身
            single_cnt = 0
            valid = True

            for v in adj[u]:
                # 规避邻接点中已访问过的父节点，不需要 visited 数组。
                if v == parent:
                    continue

                cnt = dfs(v, u)
                cnt_sum += cnt
                # 检测子树的节点数量是否相同
                if single_cnt == 0:
                    single_cnt = cnt
                elif single_cnt != cnt:
                    valid = False
                    
            nonlocal ans
            ans += valid
            return cnt_sum

        dfs(0, -1) # -1 即不存在父节点
        return ans
```

* []

```Python3语法糖
class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        n = len(edges) + 1
        adj = [[] for _ in range(n)]

        for u, v in edges:
            adj[u].append(v)
            adj[v].append(u)
        
        ans = 0
        
        def dfs(u: int, parent: int) -> int:
            counts = [dfs(v, u) for v in adj[u] if v != parent]
            nonlocal ans
            if len(set(counts)) <= 1: # 考虑 adj[u] 为空对应的 len(set(counts)) == 0  
                ans += 1
            return sum(counts) + 1
        
        dfs(0, -1)
        return ans
```

* []

```Java
class Solution {
    public int countGoodNodes(int[][] edges) {
        int n = edges.length + 1; // 节点数
        // 构建邻接表
        List<List<Integer>> adj = new ArrayList<>(n);
        for (int i = 0; i < n; ++i) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        int[] ans = {0};
        
        dfs(0, -1, adj, ans);
        return ans[0];
    }

    // parent 为父节点
    private int dfs(int u, int parent, List<List<Integer>> adj, int[] ans) {
        int cntSum = 1; // 节点总数，先计入自身
        int singleCnt = 0;
        boolean valid = true;

        for (int v : adj.get(u)) {
            // 规避邻接点中已访问过的父节点，不需要 visited 数组。
            if (v == parent) continue; 

            int cnt = dfs(v, u, adj, ans);
            cntSum += cnt;
            // 检测子树的节点数量是否相同
            if (singleCnt == 0)
                singleCnt = cnt;
            else if (singleCnt != cnt)
                valid = false;
        }
        if (valid) ans[0]++; // -1 即不存在父节点
        return cntSum;
    }
}
```

* []

```Kotlin
class Solution {
    fun countGoodNodes(edges: Array<IntArray>): Int {
        val n = edges.size + 1 // 节点数

        // 构建邻接表
        val adj = Array(n){ mutableListOf<Int>() }
        for((u, v) in edges){
            adj[u] += v 
            adj[v] += u 
        }
        
        var ans = 0 
        
        // parent 为父节点
        fun dfs(u: Int, parent: Int): Int{
            var cntSum = 1 // 节点总数，先计入自身
            var singleCnt = 0 
            var valid = true 

            for(v in adj[u]){
                // 规避邻接点中已访问过的父节点，不需要 visited 数组。
                if(v == parent) continue 

                val cnt = dfs(v, u)
                cntSum += cnt 
                // 检测子树的节点数量是否相同
                when{
                    singleCnt == 0 -> singleCnt = cnt 
                    singleCnt != cnt -> valid = false 
                }
            }
            if(valid) ans++
            return cntSum
        }

        dfs(0, -1) // -1 即不存在父节点
        return ans
    }
}
```

* []

```Kotlin语法糖
class Solution {
    fun countGoodNodes(edges: Array<IntArray>): Int {
        val n = edges.size + 1 
        val adj = Array(n){ mutableListOf<Int>() }

        for((u, v) in edges){
            adj[u] += v 
            adj[v] += u 
        }
        
        var ans = 0 
        
        fun dfs(u: Int, parent: Int): Int{
            val counts = adj[u].filter{ it != parent }
                .map{ dfs(it, u) }
            
            // 考虑 adj[u] 为空对应的 counts.toSet().size == 0
            if(counts.toSet().size <= 1) ans++
            return counts.sum() + 1
        }

        dfs(0, -1)
        return ans
    }
}
```

# 复杂度

- 时间：$\Theta(m)$
- 空间：$\Theta(m)$

$m$ 为边数，无向树也是生成树，在本题中边数比点数少 1。

# 推广

以下皆为个人所著，兼顾了职场面试和本硕阶段的学术考试。
- [不同层次的面试算法学习规划](https://leetcode.cn/circle/discuss/xV68NV/)
- [附个人题解的双指针题单](https://leetcode.cn/circle/discuss/BI95fj/)
- [图论入门](https://leetcode.cn/leetbook/detail/introduction-to-graph/)
- [图论进阶](https://leetcode.cn/leetbook/detail/advanced-graph-theory/)

点赞关注不迷路。祝君早日上岸，飞黄腾达！
