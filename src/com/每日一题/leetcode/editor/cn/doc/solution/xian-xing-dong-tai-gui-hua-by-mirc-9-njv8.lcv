> Problem: [1567. 乘积为正数的最长子数组长度](https://leetcode.cn/problems/maximum-length-of-subarray-with-positive-product/description/)

[TOC]

# 思路

> 线性动态规划

# 解题过程

> 根据经验可设dp表f，f[i]表示以i位置为结尾的最长正积子数组
> g,g[i]表示以i位置为结尾的最长负积子数组
> 当nums[i]>0时，f[i]=f[i-1]+1,当nums[i]<0时，f[i]=g[i-1]==0?0:g[i-1]+1
> 不要忘记条件判断，因为当g[i-1]为0时，说明i-1为结尾的子数组中找不到乘积为负的,g表状态方程同理

# 复杂度

- 时间复杂度: $O(N)$
- 空间复杂度: $O(N)$

# Code

* []

```C++
class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int n=nums.size();
        vector<int> f(n); //f[i]表示以i为结尾的正积最长子数组长度
        auto g=f;       //g[i]表示以i为结尾的负积最长子数组长度

        f[0]=nums[0]>0?1:0;
        g[0]=nums[0]<0?1:0;

        for(int i=1;i<n;++i)
        {
            if(nums[i]>0)
            {
                f[i]=f[i-1]+1;
                g[i]=g[i-1]==0?0:g[i-1]+1;
                //g[i-1]为0时无法凑出以i为结尾的负积子数组
            }
            else if(nums[i]<0)
            {
                f[i]=g[i-1]==0?0:g[i-1]+1;
                g[i]=f[i-1]+1;
            }
            else f[i]=0;
        }

        return *(max_element(f.begin(),f.end()));
    }
};
```

