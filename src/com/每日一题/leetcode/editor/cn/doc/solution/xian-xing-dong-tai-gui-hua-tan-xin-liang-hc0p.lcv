# 解法一：动态规划

**解题思路：**
和题目[152. 乘积最大子数组](https://leetcode.cn/problems/maximum-product-subarray/) 解法类似，
定义 $max[i]$ 为到 $i$ 为止，选出的非空小组最大实力值；
定义 $min[i]$ 为到 $i$ 为止，选出的非空小组最小实力值；
如何计算$max[i]$，由如下四种情况：
1. 前面 $[0,i-1]$ 里面的数一个都不要，只取$nums[i]$，就有$max[i] = nums[i]$ ；
2. 不取$nums[i]$，这时候就是 $max[i] = max[i-1]$；
3. $nums[i]$是个正数，并且和$[0,i-1]$最大值相乘，就有 $max[i] = nums[i] \times max[i-1]$;
4. $nums[i]$是个负数，并且和$[0,i-1]$最小值相乘，就有 $max[i] = nums[i] \times min[i-1]$。
   对上述四种情况求最大值保存在$max[i]$。
   同样的规则计算$min[i]$，只是把最大值改成最小值。
   最后返回$max[n-1]$即为最后结果，可以压缩状态，把额外空间从 $O(n)$ 压缩成 $O(1)$，一次遍历，时间复杂度是 $O(n)$。

**Java代码**

* Java

```Java
class Solution {
    public long maxStrength(int[] nums) {
        long max = nums[0];
        long min = nums[0];
        for (int i = 1; i < nums.length; i++) {
            long tempMax = Math.max(nums[i],Math.max(nums[i]*max,nums[i]*min));
            long tempMin = Math.min(nums[i],Math.min(nums[i]*max,nums[i]*min));
            max = Math.max(max,tempMax);
            min = Math.min(min,tempMin);
        }
        return max;
    }
}
```

# 解法二：贪心

**解题思路：**
我们要求最大实力值，那么所有的正数是一定都要用起来，我们记为 $positive$，如果$positive$的值是$0$,说明没正数。
负数如何处理？
我们知道负负得正，因此如果有偶数个负数，一定是正数，因此我们所有的负数中，取出“最多偶数个”最小的负数，乘起来就可以了。我们把乘积记为 $negative$。
具体的：
如果是$1$个负数，不取，$negative = 0$；
如果是$2$个负数，这两个负数都取了，乘起来；
如果是$3$个负数，取最小的两个负数，把最大的舍弃。
如果是$4$个负数，这四个负数都取了，乘起来；
如果是$5$个负数，把最小的四个负数都取了，把最大的舍弃；依次类推。
为了把时间复杂度控制 $O(n)$，我们不会对所有的负数排序，而是保存最大的负数，因此：
当有奇数个负数，$positive$ = 所有负数乘积 $\div$ 最大的负数；
当有偶数个负数，$positive$ = 所有负数乘积。
注意这里有一种特殊情况，即整个数组有且仅有一个负数，这时候不能把这个负数舍弃，因此如果数组长度$=1$要特殊处理。

**Java代码**

* Java

```Java
class Solution {
    public long maxStrength(int[] nums) {
        if (nums.length == 1) return nums[0];
        long positive = 0;
        long negative = 1;
        long a = 1;
        int negCount = 0;
        int maxNeg = Integer.MIN_VALUE;
        for (int v : nums) {
            if (v > 0){
                a = a * v;
                positive = a;
            }else if (v < 0){
                negCount++;
                maxNeg = Math.max(maxNeg,v);
                negative = negative * v;
            }
        }

        if (negCount <= 1) negative = 0;
        else if ((negCount&1) == 1) negative = negative/maxNeg;

        if (positive == 0) return negative;
        else if (negative == 0) return positive;
        else return negative * positive;
    }
}
```

