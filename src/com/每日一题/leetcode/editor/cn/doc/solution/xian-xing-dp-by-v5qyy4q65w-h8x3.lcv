比赛时候没看清是“子数组”，误以为可以不连续划分，坐牢了15分钟，等发现事情不对后太急于通过，第一次返回了int爆了个WA，排名惨不忍睹，小号上分算是彻底失败了……
（不过现在参赛人数确实多了，我这次都国服500开外了，从rating-predictor上看，表现分还能踩着国服蓝牌线）

这题的题材很难不让人联想啊，3个条件这不就对应着麻将的将牌，刻子和顺子吗~ LC的题目是美国出的，难不成国内主流麻将玩法传到美国了么（宝开和其他小游戏公司倒是有不少麻将题材，但是基本都是连连看，没见过4人对战式的）~

设dp[j]表示nums[:j+1]即从0到j的连续子数组能否进行划分。由于每次可以切出2个或3个，因此dp[j]只能由dp[j-2]或dp[j-3]转移而来。dp[j]可以由dp[j-2]转移而来的条件是切出的2个是一对，即nums[j]==nums[j-1]，dp[j]可以由dp[j-3]转移而来的条件是切出的3个是一组刻子或一组顺子，即nums[j]==nums[j-1]==nums[j-2]或nums[j]==nums[j-1]+1==nums[j-2]+2这两个条件任意满足一个。

边界条件是空数组视为有效，Python实现时可以利用-1下标表示最后一个，用dp[-1]=True做边界条件。

* 

```
class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        
        dp = [False]*len(nums)+[True]
        for j in range(len(nums)):
            if (j and dp[j-2] and nums[j]==nums[j-1]) or (j>1 and dp[j-3] and nums[j]==nums[j-1]==nums[j-2]) or (j>1 and dp[j-3] and nums[j]==nums[j-1]+1==nums[j-2]+2):
                dp[j]=True
        return dp[-2] #最后一个是边界条件，倒数第二个表示整个数组
```

时空复杂度：O(n)，n为数组长度，这道题的空间复杂度可以优化到O(1)，但这样写出的代码可读性会很差，所以这里不提供。
