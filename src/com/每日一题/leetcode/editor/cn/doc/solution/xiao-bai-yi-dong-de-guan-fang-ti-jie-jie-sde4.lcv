其实本题的难点不在二分，而在于如何将问题转化为“给定`maxOperations` 次操作次数，能否可以使得单个袋子里球数目的最大值不超过y”。

初看本题，首先想到的方向很可能是“如何分袋子能使袋子的最大值最小？”。

为了减小最大值，在分袋子时自然会选择球最多的袋子，而且要尽可能平均分才能使分开后的最大值更小。

在思考过后会发现，在只有“操作至多`maxOperations`次”这么一个条件的限制下，要解决“如何分袋子能使袋子的最大值最小？”这个问题并没有十分有效的算法，因为我们很难把握每次分袋子时把袋子平均分成几份才是最好的，除非我们在分每一次袋子时都枚举一遍所有可能性，但这样时间复杂度将十分恐怖。

与其在每一次分袋子时都枚举一遍分成的份数，不如直接枚举`maxOperations`次操作后的开销是否可能是y。所有所以我们考虑人为增加一个条件，即“每个袋子至多有y个球”，此时问题便转化成了“给定`maxOperations` 次操作次数，能否可以使得单个袋子里球数目的最大值不超过y”。

但是枚举y的时间复杂度依然不低。考虑到我们需要找的y是“分界点”，即小于y的值不可能在`maxOperations`次操作后成为最大值，而大于等于y的值可能成为最大值。像这种寻找两个区间分界点的问题正是二分擅长解决的问题，所以我们考虑二分。

如何二分？从1和`nums`数组的最大值之间二分。如果y可以实现，我们尝试继续压低y，即将right更新为y-1，然后继续二分；如果y不能实现，我们将y提高，即将此时left更新为y+1，然后继续二分。

转化后的问题很容易解决，只需要把所有球数大于y的袋子都分成多个球数为y的袋子，余下的球也放在一个袋子。那么如何计算出具体的操作次数呢？

事实上，在分袋子时，我们并不需要关心过程如何，只需要关心分完后有几个袋子。每次分袋子会多一个袋子，所以最终多出几个袋子，就需要分多少次。

可以得到`ny<nums[i]<=(n+1)y`时，我们需要分成n+1份，也就是n次操作。但是此时有个问题，就是在求操作次数时，`num[i]/y`在`ny<nums[i]<(n+1)y`和`nums[i]==(n+1)y`这两种情况的值是不一样的，而我们是需要让它们一样的。此时我们可以使用一步if-else区分情况，也可以使用`(nums[i]-1)/y`。

最后是官方题解代码：

* 

```
class Solution {
public:
    int minimumSize(vector<int>& nums, int maxOperations) {
        int left = 1, right = *max_element(nums.begin(), nums.end());
        int ans = 0;
        while (left <= right) {
            int y = (left + right) / 2;
            long long ops = 0;
            for (int x: nums) {
                ops += (x - 1) / y;
            }
            if (ops <= maxOperations) {
                ans = y;
                right = y - 1;
            }
            else {
                left = y + 1;
            }
        }
        return ans;
    }
};

作者：力扣官方题解
链接：https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag/solutions/2025611/dai-zi-li-zui-shao-shu-mu-de-qiu-by-leet-boay/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
```

