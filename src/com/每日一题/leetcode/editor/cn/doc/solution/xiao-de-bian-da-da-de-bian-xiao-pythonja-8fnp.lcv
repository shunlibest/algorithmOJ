![lc910-c.png](https://pic.leetcode.cn/1727165884-AiuZzx-lc910-c.png)

为了方便枚举，先把 $\textit{nums}$ 从小到大排序。

答案初始化为 $\textit{nums}[n-1] - \textit{nums}[0]$，对应着把所有数都变大或者变小的情况。

考虑把 $\textit{nums}[0]$ 到 $\textit{nums}[i-1]$ 都变大 $k$，把 $\textit{nums}[i]$ 到 $\textit{nums}[n-1]$ 都变小 $k$。

如此变化后，数组的最大值要么是 $\textit{nums}[i-1]+k$，要么是 $\textit{nums}[n-1]-k$，即

$$
\max(\textit{nums}[i-1]+k,\textit{nums}[n-1]-k)
$$

数组的最小值要么是 $\textit{nums}[0]+k$，要么是 $\textit{nums}[i]-k$，即

$$
\min(\textit{nums}[0]+k,\textit{nums}[i]-k)
$$

最大值最小值之差为

$$
\max(\textit{nums}[i-1]+k,\textit{nums}[n-1]-k) - \min(\textit{nums}[0]+k,\textit{nums}[i]-k)
$$

枚举 $i=1,2,3,\cdots,n-1$，用上式更新答案的最小值。

* [sol-Python3]

```py
class Solution:
    def smallestRangeII(self, nums: List[int], k: int) -> int:
        nums.sort()
        ans = nums[-1] - nums[0]
        for x, y in pairwise(nums):
            mx = max(x + k, nums[-1] - k)
            mn = min(nums[0] + k, y - k)
            ans = min(ans, mx - mn)
        return ans
```

* [sol-Java]

```java
class Solution {
    public int smallestRangeII(int[] nums, int k) {
        Arrays.sort(nums);
        int n = nums.length;
        int ans = nums[n - 1] - nums[0];
        for (int i = 1; i < n; i++) {
            int mx = Math.max(nums[i - 1] + k, nums[n - 1] - k);
            int mn = Math.min(nums[0] + k, nums[i] - k);
            ans = Math.min(ans, mx - mn);
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int smallestRangeII(vector<int>& nums, int k) {
        ranges::sort(nums);
        int ans = nums.back() - nums[0];
        for (int i = 1; i < nums.size(); i++) {
            int mx = max(nums[i - 1] + k, nums.back() - k);
            int mn = min(nums[0] + k, nums[i] - k);
            ans = min(ans, mx - mn);
        }
        return ans;
    }
};
```

* [sol-C]

```c
#define MAX(a, b) ((b) > (a) ? (b) : (a))
#define MIN(a, b) ((b) < (a) ? (b) : (a))

int cmp(const void* a, const void* b) {
    return *(int*)a - *(int*)b;
}

int smallestRangeII(int* nums, int n, int k) {
    qsort(nums, n, sizeof(int), cmp);
    int ans = nums[n - 1] - nums[0];
    for (int i = 1; i < n; i++) {
        int mx = MAX(nums[i - 1] + k, nums[n - 1] - k);
        int mn = MIN(nums[0] + k, nums[i] - k);
        ans = MIN(ans, mx - mn);
    }
    return ans;
}
```

* [sol-Go]

```go
func smallestRangeII(nums []int, k int) int {
    slices.Sort(nums)
    n := len(nums)
    ans := nums[n-1] - nums[0]
    for i := 1; i < n; i++ {
        mx := max(nums[i-1]+k, nums[n-1]-k)
        mn := min(nums[0]+k, nums[i]-k)
        ans = min(ans, mx-mn)
    }
    return ans
}
```

* [sol-JavaScript]

```js
var smallestRangeII = function(nums, k) {
    nums.sort((a, b) => a - b);
    const n = nums.length;
    let ans = nums[n - 1] - nums[0];
    for (let i = 1; i < n; i++) {
        const mx = Math.max(nums[i - 1] + k, nums[n - 1] - k);
        const mn = Math.min(nums[0] + k, nums[i] - k);
        ans = Math.min(ans, mx - mn);
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn smallest_range_ii(mut nums: Vec<i32>, k: i32) -> i32 {
        nums.sort_unstable();
        let n = nums.len();
        let mut ans = nums[n - 1] - nums[0];
        for i in 1..n {
            let mx = (nums[i - 1] + k).max(nums[n - 1] - k);
            let mn = (nums[0] + k).min(nums[i] - k);
            ans = ans.min(mx - mn);
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n\log n)$，其中 $n$ 是 $\textit{nums}$ 的长度。瓶颈在排序上。
- 空间复杂度：$\mathcal{O}(1)$。忽略排序的栈开销。

## 思考题

额外输入一个整数 $m$。如果要求恰好修改 $m$ 个元素，答案是多少？本题相当于恰好修改 $n$ 个元素。

欢迎在评论区分享你的思路/代码。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
