### 解题思路

    dp[i]定义在0:i+1之间满足要求的序列长度。维护两个dp列表，对应序列结尾2个数字是上升趋势还是下降趋势，。一个记录升序，一个记录降序。
    相邻3个数字可能是2->3,3->2,2->2,一共3个场景。分别写出对应的转移方程，
    要特别注意摆动这一性质带来的这一特殊转换形态：
        dpup[i] = dpdown[i-1] + 1；
        dpdown[i] = dpup[i-1] + 1

### 代码

* python3

```python
class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if len(nums)==1:return 1
        #一个记录生序，一个记录降序。定义在0:i+1之间序列结尾2个数字是上升趋势和下降趋势的列表。
        dpup = [1 for i in range(1,1+len(nums))]
        dpdown = [1 for i in range(1,1+len(nums))]
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]:
                dpup[i] = dpdown[i-1] + 1
                dpdown[i] = dpdown[i-1]
            elif nums[i] < nums[i-1]:
                dpup[i] = dpup[i-1]
                dpdown[i] = dpup[i-1] + 1
            else:
                dpup[i] = dpup[i - 1]
                dpdown[i] = dpdown[i - 1]
        return max(max(dpup), max(dpdown))

```

