### 方法一：遍历

由于数组 `arr` 已经有序，那么相同的数在 `arr` 中出现的位置也是连续的。因此我们可以对数组进行一次遍历，并统计每个数出现的次数。只要发现某个数出现的次数超过数组 `arr` 长度的 25%，那么这个数即为答案。

在计算数组 `arr` 长度的 25% 时，会涉及到浮点数。我们可以用整数运算 `count * 4 > arr.length` 代替浮点数运算 `count > arr.length * 25%`，减少精度误差。

* [sol1-C++]

```C++
class Solution {
public:
    int findSpecialInteger(vector<int>& arr) {
        int n = arr.size();
        int cur = arr[0], cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (arr[i] == cur) {
                ++cnt;
                if (cnt * 4 > n) {
                    return cur;
                }
            }
            else {
                cur = arr[i];
                cnt = 1;
            }
        }
        return -1;
    }
};
```

* [sol1-Python3]

```Python
class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        n = len(arr)
        cur, cnt = arr[0], 0
        for i in range(n):
            if arr[i] == cur:
                cnt += 1
                if cnt * 4 > n:
                    return cur
            else:
                cur, cnt = arr[i], 1
        return -1
```

* [sol1-Java]

```Java
class Solution {
    public int findSpecialInteger(int[] arr) {
        int n = arr.length;
        int cur = arr[0], cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (arr[i] == cur) {
                ++cnt;
                if (cnt * 4 > n) {
                    return cur;
                }
            } else {
                cur = arr[i];
                cnt = 1;
            }
        }
        return -1;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int FindSpecialInteger(int[] arr) {
        int n = arr.Length;
        int cur = arr[0], cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (arr[i] == cur) {
                ++cnt;
                if (cnt * 4 > n) {
                    return cur;
                }
            } else {
                cur = arr[i];
                cnt = 1;
            }
        }
        return -1;
    }
}
```

* [sol1-Go]

```Go
func findSpecialInteger(arr []int) int {
    n := len(arr)
    cur := arr[0]
    cnt := 0
    for i := 0; i < n; i++ {
        if arr[i] == cur {
            cnt++
            if cnt*4 > n {
                return cur
            }
        } else {
            cur = arr[i]
            cnt = 1
        }
    }
    return -1
}
```

* [sol1-C]

```C
int findSpecialInteger(int* arr, int arrSize) {
    int cur = arr[0], cnt = 0;
    for (int i = 0; i < arrSize; ++i) {
        if (arr[i] == cur) {
            ++cnt;
            if (cnt * 4 > arrSize) {
                return cur;
            }
        } else {
            cur = arr[i];
            cnt = 1;
        }
    }
    return -1;
}
```

* [sol1-JavaScript]

```JavaScript
var findSpecialInteger = function(arr) {
    let n = arr.length;
    let cur = arr[0], cnt = 0;
    for (let i = 0; i < n; ++i) {
        if (arr[i] === cur) {
            ++cnt;
            if (cnt * 4 > n) {
                return cur;
            }
        } else {
            cur = arr[i];
            cnt = 1;
        }
    }
    return -1;
};
```

* [sol1-TypeScript]

```TypeScript
function findSpecialInteger(arr: number[]): number {
    let n: number = arr.length;
    let cur: number = arr[0], cnt: number = 0;
    for (let i: number = 0; i < n; ++i) {
        if (arr[i] === cur) {
            ++cnt;
            if (cnt * 4 > n) {
                return cur;
            }
        } else {
            cur = arr[i];
            cnt = 1;
        }
    }
    return -1;
};
```

* [sol1-Rust]

```Rust
impl Solution {
    pub fn find_special_integer(arr: Vec<i32>) -> i32 {
        let n = arr.len();
        let mut cur = arr[0];
        let mut cnt = 0;
        for &item in arr.iter() {
            if item == cur {
                cnt += 1;
                if cnt * 4 > n {
                    return cur;
                }
            } else {
                cur = item;
                cnt = 1;
            }
        }
        -1
    }
}
```

**复杂度分析**

- 时间复杂度：$O(N)$，其中 $N$ 是数组 `arr` 的长度。

- 空间复杂度：$O(1)$。

### 方法二：二分查找

根据题目要求，满足条件的整数 `x` 至少在数组 `arr` 中出现了 `span = arr.length / 4 + 1` 次，那么我们可以断定：数组 `arr` 中的元素 `arr[0], arr[span], arr[span * 2], ...` 一定包含 `x`。

我们可以使用反证法证明上述的结论。假设 `arr[0], arr[span], arr[span * 2], ...` 均不为 `x`，由于数组 `arr` 已经有序，那么 `x` 只会连续地出现在 `arr[0], arr[span], arr[span * 2], ...` 中某两个相邻元素的间隔中，因此其出现的次数最多为 `span - 1` 次，这与它至少出现 `span` 次相矛盾。

有了上述的结论，我们就可以依次枚举 `arr[0], arr[span], arr[span * 2], ...` 中的元素，并将每个元素在数组 `arr` 上进行二分查找，得到其在 `arr` 中出现的位置区间。如果该区间的长度至少为 `span`，那么我们就得到了答案。

* [sol2-C++]

```C++
class Solution {
public:
    int findSpecialInteger(vector<int>& arr) {
        int n = arr.size();
        int span = n / 4 + 1;
        for (int i = 0; i < n; i += span) {
            auto iter_l = lower_bound(arr.begin(), arr.end(), arr[i]);
            auto iter_r = upper_bound(arr.begin(), arr.end(), arr[i]);
            if (iter_r - iter_l >= span) {
                return arr[i];
            }
        }
        return -1;
    }
};
```

* [sol2-C++17]

```C++
class Solution {
public:
    int findSpecialInteger(vector<int>& arr) {
        int n = arr.size();
        int span = n / 4 + 1;
        for (int i = 0; i < n; i += span) {
            auto [iter_l, iter_r] = equal_range(arr.begin(), arr.end(), arr[i]);
            if (iter_r - iter_l >= span) {
                return arr[i];
            }
        }
        return -1;
    }
};
```

* [sol2-Python3]

```Python
class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        n = len(arr)
        span = n // 4 + 1
        for i in range(0, n, span):
            iter_l = bisect.bisect_left(arr, arr[i])
            iter_r = bisect.bisect_right(arr, arr[i])
            if iter_r - iter_l >= span:
                return arr[i]
        return -1
```

* [sol2-Java]

```Java
class Solution {
    public int findSpecialInteger(int[] arr) {
        int n = arr.length;
        int span = n / 4 + 1;
        for (int i = 0; i < n; i += span) {
            int start = binarySearch(arr, arr[i]);
            int end = binarySearch(arr, arr[i] + 1);
            if (end - start >= span) {
                return arr[i];
            }
        }
        return -1;
    }

    private int binarySearch(int[] arr, int target) {
        int lo = 0, hi = arr.length - 1;
        int res = arr.length;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (arr[mid] >= target) {
                res = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }

        return res;
    }
}
```

* [sol2-C#]

```C#
public class Solution {
    public int FindSpecialInteger(int[] arr) {
        int n = arr.Length;
        int span = n / 4 + 1;
        for (int i = 0; i < n; i += span) {
            int start = BinarySearch(arr, arr[i]);
            int end = BinarySearch(arr, arr[i] + 1);
            if (end - start >= span) {
                return arr[i];
            }
        }
        return -1;
    }

    private int BinarySearch(int[] arr, int target) {
        int lo = 0, hi = arr.Length - 1;
        int res = arr.Length;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (arr[mid] >= target) {
                res = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return res;
    }
}
```

* [sol2-Go]

```Go
func findSpecialInteger(arr []int) int {
    n := len(arr)
	span := n / 4 + 1
	for i := 0; i < n; i += span {
		start := binarySearch(arr, arr[i])
		end := binarySearch(arr, arr[i] + 1)
		if end - start >= span {
			return arr[i]
		}
	}
	return -1
}

func binarySearch(arr []int, target int) int {
	lo, hi := 0, len(arr) - 1
	res := len(arr)
	for lo <= hi {
		mid := (lo + hi) / 2
		if arr[mid] >= target {
			res = mid
			hi = mid - 1
		} else {
			lo = mid + 1
		}
	}
	return res
}
```

* [sol2-C]

```C
int binarySearch(int *arr, int length, int target) {
    int lo = 0, hi = length - 1;
    int res = length;
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        if (arr[mid] >= target) {
            res = mid;
            hi = mid - 1;
        } else {
            lo = mid + 1;
        }
    }
    return res;
}

int findSpecialInteger(int* arr, int arrSize) {
    int span = arrSize / 4 + 1;
    for (int i = 0; i < arrSize; i += span) {
        int start = binarySearch(arr, arrSize, arr[i]);
        int end = binarySearch(arr, arrSize, arr[i] + 1);
        if (end - start >= span) {
            return arr[i];
        }
    }
    return -1;
}
```

* [sol2-JavaScript]

```JavaScript
var findSpecialInteger = function(arr) {
    const n = arr.length;
    const span = Math.floor(n / 4) + 1;
    for (let i = 0; i < n; i += span) {
        const start = binarySearch(arr, arr[i]);
        const end = binarySearch(arr, arr[i] + 1);
        if (end - start >= span) {
            return arr[i];
        }
    }
    return -1;
};

const binarySearch = (arr, target) => {
    let lo = 0, hi = arr.length - 1;
    let res = arr.length;
    while (lo <= hi) {
        let mid = Math.floor((lo + hi) / 2);
        if (arr[mid] >= target) {
            res = mid;
            hi = mid - 1;
        } else {
            lo = mid + 1;
        }
    }
    return res;
}
```

* [sol2-TypeScript]

```TypeScript
function findSpecialInteger(arr: number[]): number {
    const n = arr.length;
    const span = Math.floor(n / 4) + 1;
    for (let i = 0; i < n; i += span) {
        const start = binarySearch(arr, arr[i]);
        const end = binarySearch(arr, arr[i] + 1);
        if (end - start >= span) {
            return arr[i];
        }
    }
    return -1;
};

function binarySearch(arr: number[], target: number): number {
    let lo: number = 0, hi: number = arr.length - 1;
    let res: number = arr.length;
    while (lo <= hi) {
        let mid: number = Math.floor((lo + hi) / 2);
        if (arr[mid] >= target) {
            res = mid;
            hi = mid - 1;
        } else {
            lo = mid + 1;
        }
    }
    return res;
}
```

* [sol2-Rust]

```Rust
impl Solution {
    pub fn find_special_integer(arr: Vec<i32>) -> i32 {
        let n = arr.len();
        let span = (n as f64 / 4.0).floor() as usize + 1;
        for i in (0..n).step_by(span) {
            let start = Self::binary_search(&arr, arr[i]);
            let end = Self::binary_search(&arr, arr[i] + 1);
            if end - start >= span as i32 {
                return arr[i];
            }
        }
        -1
    }

    fn binary_search(arr: &Vec<i32>, target: i32) -> i32 {
        let mut lo = 0 as i32;
        let mut hi = arr.len() as i32 - 1;
        let mut res = arr.len() as i32;
        while lo <= hi {
            let mid = (lo + hi) / 2;
            if arr[mid as usize] >= target {
                res = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        res
    }
}
```

**复杂度分析**

- 时间复杂度：$O(\log N)$，其中 $N$ 是数组 `arr` 的长度。我们枚举的元素个数为至多为 $4$ 个，可以视作 $O(1)$。对于每个元素，我们需要在数组 `arr` 上进行二分查找，时间复杂度为 $O(\log N)$。

- 空间复杂度：$O(1)$。

