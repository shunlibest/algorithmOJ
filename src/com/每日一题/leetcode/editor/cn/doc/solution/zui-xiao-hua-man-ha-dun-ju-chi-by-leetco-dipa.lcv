#### 方法一：枚举所有的点

**思路与算法**

题目要求移除一个点后，使得任意两点的曼哈顿的**最大**距离尽可能的**小**。根据题意分析，我们可以找到任意两点的曼哈顿距离的**最大值**，并记录构成**最大值**的点的集合 $S$，需要去掉的点一定存在于该集合 $S$ 中，依次尝试去掉集合 $S$ 中的某点，并计算剩余点构成的曼哈顿距离。由于需要计算任意两点的曼哈顿距离所需要的时间复杂度至少为 $O(n^2)$，因此该算法在题目给定的数量级下会超时，需要进行优化。

首先我们思考如何计算任意两点的最大距离，这里需要用到一些数学知识，可以参考「[曼哈顿距离与切比雪夫距离的相互转化](https://oi-wiki.org/geometry/distance/#%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%E4%B8%8E%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96)」。设两点 $A,B$ 分别为 $(x_1,y_1),(x_2,y_2)$，此时 $A,B$ 两点的曼哈顿距离为：
$$
\begin{aligned}
d(A,B) &= |x_1-x_2| + |y_1-y_2|  \\
&= \max(x_1-x_2 - (y_1-y_2), x_2-x_1 - (y_1-y_2), x_1-x_2 + (y_1-y_2), x_2 - x1 - (y_1 - y_2)) \\
&= \max(x_1-y_1- (x_2-y_2), x_2-y_2 - (x_1-y_1), x_1 + y_1-(x_2+y_2),x_2+y_2-(x_1 + y_1)) \\
\end{aligned}
$$

此时将前两项与后两项分开进行整理：
$$
\begin{aligned}
\max(x_1-y_1- (x_2-y_2), x_2-y_2 - (x_1-y_1)) = \max(\max(x_1-y_1, x_2-y_2) - \min(x_1-y_1,x_2-y_2)) = |(x_1-y_1)- (x_2-y_2)| \\

\max(x_1 + y_1-(x_2+y_2),x_2+y_2-(x_1 + y_1)) = \max(\max(x_1+y_1,x_2 + y_2)- \min(x_1+y_1,x_2 + y_2)) = |(x_1+y_1)- (x_2+y_2)| \\
\end{aligned}
$$

整理可得:
$d(A,B) = \max(|x_1-y_1- (x_2-y_2)|, |(x_1+y_1) - (x_2+y_2)|)$

回到本题，对于每个点 $(x,y)$，我们分别计算它的坐标之和与坐标之差 $x-y,x+y$，并用有序集合 $S_x,S_y$ 维护这些值，此时任意两点曼哈顿距离的最大值即为两个集合 $S_x,S_y$ 中的最大值与该集合本身的最小值之差中取最大值。每次枚举点 $(x',y')$，从集合 $S_x,S_y$ 中删除对应的 $(x'-y',x'+y')$，然后再次计算最大的曼哈顿距离，计算完成后再恢复，枚举完成后即可得到最小的曼哈顿距离。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    int minimumDistance(vector<vector<int>>& points) {
        multiset<int> sx, sy;
        for (auto & p : points) {
            sx.emplace(p[0] - p[1]);
            sy.emplace(p[0] + p[1]);
        }
        int res = INT_MAX;
        for (auto &p : points) {
            sx.erase(sx.find(p[0] - p[1]));
            sy.erase(sy.find(p[0] + p[1]));
            res = min(res, max(*sx.rbegin() - *sx.begin(), *sy.rbegin() - *sy.begin()));
            sx.emplace(p[0] - p[1]);
            sy.emplace(p[0] + p[1]);
        }
        return res;
    }
};
```

* [sol1-Java]

```Java
class Solution {
    public int minimumDistance(int[][] points) {
        TreeMap<Integer, Integer> sx = new TreeMap<Integer, Integer>();
        TreeMap<Integer, Integer> sy = new TreeMap<Integer, Integer>();
        for (int[] p : points) {
            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);
            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);
        }
        int res = Integer.MAX_VALUE;
        for (int[] p : points) {
            sx.put(p[0] - p[1], sx.get(p[0] - p[1]) - 1);
            if (sx.get(p[0] - p[1]) == 0) {
                sx.remove(p[0] - p[1]);
            }
            sy.put(p[0] + p[1], sy.get(p[0] + p[1]) - 1);
            if (sy.get(p[0] + p[1]) == 0) {
                sy.remove(p[0] + p[1]);
            }
            res = Math.min(res, Math.max(sx.lastKey() - sx.firstKey(), sy.lastKey() - sy.firstKey()));
            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);
            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);
        }
        return res;
    }
}
```

* [sol1-Python3]

```Python
from sortedcontainers import SortedList

class Solution:
    def minimumDistance(self, points: List[List[int]]) -> int:
        sx = SortedList(p[0] - p[1] for p in points)
        sy = SortedList(p[0] + p[1] for p in points)
        res = float('inf')
        for p in points:
            sx.remove(p[0] - p[1])
            sy.remove(p[0] + p[1])
            res = min(res, max(sx[-1] - sx[0], sy[-1] - sy[0]))
            sx.add(p[0] - p[1])
            sy.add(p[0] + p[1])
        return res
```

* [sol1-Go]

```Go
func minimumDistance(points [][]int) int {
    sx := redblacktree.New[int, int]()
	sy := redblacktree.New[int, int]()
	for _, p := range points {
		put(sx, p[0] - p[1])
		put(sy, p[0] + p[1])
	}
	res := math.MaxInt
	for _, p := range points {
		remove(sx, p[0] - p[1])
		remove(sy, p[0] + p[1])
		res = min(res, max(sx.Right().Key - sx.Left().Key, sy.Right().Key - sy.Left().Key))
		put(sx, p[0] - p[1])
		put(sy, p[0] + p[1])
	}
	return res
}


func put(t *redblacktree.Tree[int, int], v int) {
	c, _ := t.Get(v)
	t.Put(v, c+1)
}

func remove(t *redblacktree.Tree[int, int], v int) {
	c, _ := t.Get(v)
	if c == 1 {
		t.Remove(v)
	} else {
		t.Put(v, c-1)
	}
}
```

* [sol1-Rust]

```Rust
use std::collections::BTreeMap;

impl Solution {
    pub fn minimum_distance(points: Vec<Vec<i32>>) -> i32 {
        let mut sx: BTreeMap<i32, i32> = BTreeMap::new();
        let mut sy: BTreeMap<i32, i32> = BTreeMap::new();
        for p in &points {
            let sx_key = p[0] - p[1];
            let sy_key = p[0] + p[1];
            *sx.entry(sx_key).or_insert(0) += 1;
            *sy.entry(sy_key).or_insert(0) += 1;
        }
        
        let mut res = std::i32::MAX;
        for p in &points {
            let sx_key = p[0] - p[1];
            let sy_key = p[0] + p[1];
            let count_sx = sx.entry(sx_key).or_insert(0);
            *count_sx -= 1;
            if *count_sx == 0 {
                sx.remove(&sx_key);
            }
            let count_sy = sy.entry(sy_key).or_insert(0);
            *count_sy -= 1;
            if *count_sy == 0 {
                sy.remove(&sy_key);
            }
            if !sx.is_empty() && !sy.is_empty() {
                let max_sx = *sx.iter().rev().next().unwrap().0 - *sx.iter().next().unwrap().0;
                let max_sy = *sy.iter().rev().next().unwrap().0 - *sy.iter().next().unwrap().0;
                res = res.min(max_sx.max(max_sy));
            }
            *sx.entry(sx_key).or_insert(0) += 1;
            *sy.entry(sy_key).or_insert(0) += 1;
        }
        res
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n \log n)$，$n$ 表示给定的数组的长度。每次从有序集合中删除和插入元素需要的时间为 $O(\log n)$，一共需要枚举 $n$ 次，需要总的时间即为 $O(n \log n)$。

- 空间复杂度：$O(n)$，$n$ 表示给定的数组的长度。需要用有序集合存储每个点的横坐标与纵坐标的差与和，需要的空间为 $O(n)$。

#### 方法二：枚举最大值与最小值

**思路与算法**

根据方法一可以知道，假设目前已知构成最大曼哈顿距离的两点分别为 $A,B$，此时最有选择必然是去掉 $A$ 或者 $B$，此时再次计算去掉 $A$ 或者 $B$ 后的最大曼哈顿距离，取二者的最小值返回即可。

**代码**

* [sol2-C++]

```C++
class Solution {
public:
    int remove(vector<pair<int, int>> &arr, int i) {
        int n = arr.size();
        if (arr[0].second == i) {
            return arr[n - 1].first - arr[1].first;
        } else if (arr.back().second == i) {
            return arr[n - 2].first - arr[0].first;
        } else {
            return arr[n - 1].first - arr[0].first;
        }
    }
    
    int minimumDistance(vector<vector<int>>& points) {
        int n = points.size();
        vector<pair<int, int>> sx, sy;
        for (int i = 0; i < n; i++) {
            int x = points[i][0], y = points[i][1];
            sx.emplace_back(x - y, i);
            sy.emplace_back(x + y, i);
        }
        sort(sx.begin(), sx.end());
        sort(sy.begin(), sy.end());
        int maxVal1 = sx.back().first - sx[0].first;
        int maxVal2 = sy.back().first - sy[0].first;
        int res = INT_MAX;
        if (maxVal1 >= maxVal2) {
            int i = sx[0].second, j = sx.back().second;
            // 去掉 i 后的最大曼哈顿距离
            res = min(res, max(remove(sx, i), remove(sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = min(res, max(remove(sx, j), remove(sy, j)));
        } else {
            int i = sy[0].second, j = sy.back().second;
            // 去掉 i 后的最大曼哈顿距离
            res = min(res, max(remove(sx, i), remove(sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = min(res, max(remove(sx, j), remove(sy, j)));
        }
        
        return res;
    }
};
```

* [sol2-Java]

```Java
class Solution {
    public int minimumDistance(int[][] points) {
        int n = points.length;
        List<int[]> sx = new ArrayList<int[]>();
        List<int[]> sy = new ArrayList<int[]>();
        for (int i = 0; i < n; i++) {
            int x = points[i][0], y = points[i][1];
            sx.add(new int[]{x - y, i});
            sy.add(new int[]{x + y, i});
        }
        sx.sort((a, b) -> a[0] - b[0]);
        sy.sort((a, b) -> a[0] - b[0]);
        int maxVal1 = sx.get(sx.size() - 1)[0] - sx.get(0)[0];
        int maxVal2 = sy.get(sy.size() - 1)[0] - sy.get(0)[0];
        int res = Integer.MAX_VALUE;
        if (maxVal1 >= maxVal2) {
            int i = sx.get(0)[1], j = sx.get(sx.size() - 1)[1];
            // 去掉 i 后的最大曼哈顿距离
            res = Math.min(res, Math.max(remove(sx, i), remove(sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = Math.min(res, Math.max(remove(sx, j), remove(sy, j)));
        } else {
            int i = sy.get(0)[1], j = sy.get(sy.size() - 1)[1];
            // 去掉 i 后的最大曼哈顿距离
            res = Math.min(res, Math.max(remove(sx, i), remove(sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = Math.min(res, Math.max(remove(sx, j), remove(sy, j)));
        }
        return res;
    }

    public int remove(List<int[]> arr, int i) {
        int n = arr.size();
        if (arr.get(0)[1] == i) {
            return arr.get(n - 1)[0] - arr.get(1)[0];
        } else if (arr.get(n - 1)[1] == i) {
            return arr.get(n - 2)[0] - arr.get(0)[0];
        } else {
            return arr.get(n - 1)[0] - arr.get(0)[0];
        }
    }
}
```

* [sol2-C#]

```C#
public class Solution {
    public int MinimumDistance(int[][] points) {
        int n = points.Length;
        IList<int[]> sx = new List<int[]>();
        IList<int[]> sy = new List<int[]>();
        for (int i = 0; i < n; i++) {
            int x = points[i][0], y = points[i][1];
            sx.Add(new int[]{x - y, i});
            sy.Add(new int[]{x + y, i});
        }
        ((List<int[]>) sx).Sort((a, b) => a[0] - b[0]);
        ((List<int[]>) sy).Sort((a, b) => a[0] - b[0]);
        int maxVal1 = sx[sx.Count - 1][0] - sx[0][0];
        int maxVal2 = sy[sy.Count - 1][0] - sy[0][0];
        int res = int.MaxValue;
        if (maxVal1 >= maxVal2) {
            int i = sx[0][1], j = sx[sx.Count - 1][1];
            // 去掉 i 后的最大曼哈顿距离
            res = Math.Min(res, Math.Max(remove(sx, i), remove(sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = Math.Min(res, Math.Max(remove(sx, j), remove(sy, j)));
        } else {
            int i = sy[0][1], j = sy[sy.Count - 1][1];
            // 去掉 i 后的最大曼哈顿距离
            res = Math.Min(res, Math.Max(remove(sx, i), remove(sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = Math.Min(res, Math.Max(remove(sx, j), remove(sy, j)));
        }
        return res;
    }

    public int remove(IList<int[]> arr, int i) {
        int n = arr.Count;
        if (arr[0][1] == i) {
            return arr[n - 1][0] - arr[1][0];
        } else if (arr[n - 1][1] == i) {
            return arr[n - 2][0] - arr[0][0];
        } else {
            return arr[n - 1][0] - arr[0][0];
        }
    }
}
```

* [sol2-Go]

```Go
func minimumDistance(points [][]int) int {
    n := len(points)
    sx := make([][]int, n)
    sy := make([][]int, n)
    for i := 0; i < n; i++ {
        x, y := points[i][0], points[i][1]
        sx[i] = []int{x - y, i}
        sy[i] = []int{x + y, i}
    }
    sort.Slice(sx, func(i, j int) bool {
		return sx[i][0] < sx[j][0]
	})
	sort.Slice(sy, func(i, j int) bool {
		return sy[i][0] < sy[j][0]
	})
    maxVal1 := sx[n -1][0] - sx[0][0]
    maxVal2 := sy[n -1][0] - sy[0][0]
    res := int(^uint(0) >> 1)
    if maxVal1 >= maxVal2 {
        i, j := sx[0][1], sx[n - 1][1]
        // 去掉 i 后的最大曼哈顿距离
        res = min(res, max(remove(sx, i), remove(sy, i)))
        // 去掉 j 后的最大曼哈顿距离
        res = min(res, max(remove(sx, j), remove(sy, j)))
    } else {
        i, j := sy[0][1], sy[n - 1][1]
        // 去掉 i 后的最大曼哈顿距离
        res = min(res, max(remove(sx, i), remove(sy, i)))
        // 去掉 j 后的最大曼哈顿距离
        res = min(res, max(remove(sx, j), remove(sy, j)))
    }
    
    return res
}

func remove(arr [][]int, i int) int {
    n := len(arr)
    if arr[0][1] == i {
        return arr[n - 1][0] - arr[1][0]
    } else if arr[n - 1][1] == i {
        return arr[n - 2][0] - arr[0][0]
    } else {
        return arr[n - 1][0] - arr[0][0]
    }
}
```

* [sol2-Python3]

```Python
class Solution:
    def minimumDistance(self, points: List[List[int]]) -> int:
        def remove(arr: List[tuple], i: int) -> int:
            n = len(arr)
            if arr[0][1] == i:
                return arr[n - 1][0] - arr[1][0]
            elif arr[-1][1] == i:
                return arr[n - 2][0] - arr[0][0]
            else:
                return arr[-1][0] - arr[0][0]

        n = len(points)
        sx = [(x - y, i) for i, (x, y) in enumerate(points)]
        sy = [(x + y, i) for i, (x, y) in enumerate(points)]
        sx.sort()
        sy.sort()
        maxVal1 = sx[-1][0] - sx[0][0]
        maxVal2 = sy[-1][0] - sy[0][0]
        res = float('inf')
        if maxVal1 >= maxVal2:
            i, j = sx[0][1], sx[-1][1]
            # 去掉 i 后的最大曼哈顿距离
            res = min(res, max(remove(sx, i), remove(sy, i)))
            # 去掉 j 后的最大曼哈顿距离
            res = min(res, max(remove(sx, j), remove(sy, j)))
        else:
            i, j = sy[0][1], sy[-1][1]
            # 去掉 i 后的最大曼哈顿距离
            res = min(res, max(remove(sx, i), remove(sy, i)))
            # 去掉 j 后的最大曼哈顿距离
            res = min(res, max(remove(sx, j), remove(sy, j)))
        return res
```

* [sol2-C]

```C
int calc(int **arr, int arrSize, int i) {
    if (arr[0][1] == i) {
        return arr[arrSize - 1][0] - arr[1][0];
    } else if (arr[arrSize - 1][1] == i) {
        return arr[arrSize - 2][0] - arr[0][0];
    } else {
        return arr[arrSize - 1][0] - arr[0][0];
    }
}

int cmp(const void *a, const void *b) {
    return (*(int **)a)[0] - (*(int **)b)[0];
}

int minimumDistance(int** points, int pointsSize, int* pointsColSize) {
    int n = pointsSize;
    int *sx[n], *sy[n];
    for (int i = 0; i < n; i++) {
        sx[i] = (int *)malloc(sizeof(int) * 2);
        sy[i] = (int *)malloc(sizeof(int) * 2);
        int x = points[i][0], y = points[i][1];
        sx[i][0] = x - y;
        sx[i][1] = i;
        sy[i][0] = x + y;
        sy[i][1] = i;
    }
    qsort(sx, n, sizeof(int *), cmp);
    qsort(sy, n, sizeof(int *), cmp);
    int maxVal1 = sx[n - 1][0] - sx[0][0];
    int maxVal2 = sy[n - 1][0] - sy[0][0];
    int res = INT_MAX;
    if (maxVal1 >= maxVal2) {
        int i = sx[0][1], j = sx[n - 1][1];
        // 去掉 i 后的最大曼哈顿距离
        res = fmin(res, fmax(calc(sx, n, i), calc(sy, n, i)));
        // 去掉 j 后的最大曼哈顿距离
        res = fmin(res, fmax(calc(sx, n, j), calc(sy, n, j)));
    } else {
        int i = sy[0][1], j = sy[n - 1][1];
        // 去掉 i 后的最大曼哈顿距离
        res = fmin(res, fmax(calc(sx, n, i), calc(sy, n, i)));
        // 去掉 j 后的最大曼哈顿距离
        res = fmin(res, fmax(calc(sx, n, j), calc(sy, n, j)));
    }
    for (int i = 0; i < n; i++) {
        free(sx[i]);
        free(sy[i]);
    }
    return res;
}
```

* [sol2-JavaScript]

```JavaScript
var minimumDistance = function(points) {
    const n = points.length;
    const sx = [];
    const sy = [];
    
    for (let i = 0; i < n; i++) {
        const [x, y] = points[i];
        sx.push([x - y, i]);
        sy.push([x + y, i]);
    }
    sx.sort((a, b) => a[0] - b[0]);
    sy.sort((a, b) => a[0] - b[0]);
    const maxVal1 = sx[n - 1][0] - sx[0][0];
    const maxVal2 = sy[n - 1][0] - sy[0][0];
    let res = Infinity;
    if (maxVal1 >= maxVal2) {
        const i = sx[0][1], j = sx[n - 1][1];
        // 去掉 i 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, i), remove(sy, i)));
        // 去掉 j 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, j), remove(sy, j)));
    } else {
        const i = sy[0][1], j = sy[n - 1][1];
        // 去掉 i 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, i), remove(sy, i)));
        // 去掉 j 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, j), remove(sy, j)));
    }
    return res;
};

function remove(arr, i) {
    const n = arr.length;
    if (arr[0][1] === i) {
        return arr[n - 1][0] - arr[1][0];
    } else if (arr[n - 1][1] === i) {
        return arr[n - 2][0] - arr[0][0];
    } else {
        return arr[n - 1][0] - arr[0][0];
    }
}
```

* [sol2-TypeScript]

```TypeScript
function minimumDistance(points: number[][]): number {
    const n: number = points.length;
    const sx = [];
    const sy = [];
    for (let i = 0; i < n; i++) {
        const [x, y] = points[i];
        sx.push([x - y, i]);
        sy.push([x + y, i]);
    }
    sx.sort((a, b) => a[0] - b[0]);
    sy.sort((a, b) => a[0] - b[0]);
    const maxVal1: number = sx[n - 1][0] - sx[0][0];
    const maxVal2: number = sy[n - 1][0] - sy[0][0];
    let res: number = Infinity;
    if (maxVal1 >= maxVal2) {
        const i: number = sx[0][1], j: number = sx[n - 1][1];
        // 去掉 i 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, i), remove(sy, i)));
        // 去掉 j 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, j), remove(sy, j)));
    } else {
        const i: number = sy[0][1], j: number = sy[n - 1][1];
        // 去掉 i 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, i), remove(sy, i)));
        // 去掉 j 后的最大曼哈顿距离
        res = Math.min(res, Math.max(remove(sx, j), remove(sy, j)));
    }
    return res;
};

function remove(arr: [number, number][], i: number): number {
    const n: number = arr.length;
    if (arr[0][1] === i) {
        return arr[n - 1][0] - arr[1][0];
    } else if (arr[n - 1][1] === i) {
        return arr[n - 2][0] - arr[0][0];
    } else {
        return arr[n - 1][0] - arr[0][0];
    }
}
```

* [sol2-Rust]

```Rust
impl Solution {
    pub fn minimum_distance(points: Vec<Vec<i32>>) -> i32 {
        let n = points.len();
        let mut sx: Vec<(i32, usize)> = Vec::with_capacity(n);
        let mut sy: Vec<(i32, usize)> = Vec::with_capacity(n);
        for (i, point) in points.iter().enumerate() {
            let x = point[0];
            let y = point[1];
            sx.push((x - y, i));
            sy.push((x + y, i));
        }
        sx.sort_unstable_by_key(|pair| pair.0);
        sy.sort_unstable_by_key(|pair| pair.0);
        let max_val1 = sx[n - 1].0 - sx[0].0;
        let max_val2 = sy[n - 1].0 - sy[0].0;
        let mut res = std::i32::MAX;
        if max_val1 >= max_val2 {
            let i = sx[0].1;
            let j = sx[n - 1].1;
            // 去掉 i 后的最大曼哈顿距离
            res = res.min(std::cmp::max(Self::remove(&sx, i), Self::remove(&sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = res.min(std::cmp::max(Self::remove(&sx, j), Self::remove(&sy, j)));
        } else {
            let i = sy[0].1;
            let j = sy[n - 1].1;
            // 去掉 i 后的最大曼哈顿距离
            res = res.min(std::cmp::max(Self::remove(&sx, i), Self::remove(&sy, i)));
            // 去掉 j 后的最大曼哈顿距离
            res = res.min(std::cmp::max(Self::remove(&sx, j), Self::remove(&sy, j)));
        }
        res
    }

    fn remove(arr: &Vec<(i32, usize)>, i: usize) -> i32 {
        let n = arr.len();
        if arr[0].1 == i {
            return arr[n - 1].0 - arr[1].0;
        } else if arr[n - 1].1 == i {
            return arr[n - 2].0 - arr[0].0;
        } else {
            return arr[n - 1].0 - arr[0].0;
        }
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n \log n)$，$n$ 表示给定的数组的长度。对所有点的横坐标与纵坐标的差与和进行排序，需要的时间为 $O(n \log n)$。

- 空间复杂度：$O(n)$，$n$ 表示给定的数组的长度。需要用有数组存储每个点的横坐标与纵坐标的差与和，需要的空间为 $O(n)$。

